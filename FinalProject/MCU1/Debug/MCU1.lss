
MCU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004100  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000094  00800060  00004100  00004194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  008000f4  008000f4  00004228  2**0
                  ALLOC
  3 .stab         00002c70  00000000  00000000  00004228  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f7f  00000000  00000000  00006e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007e17  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007f57  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000080c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000abfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b9a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bb08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bd95  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c563  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e0       	ldi	r30, 0x00	; 0
      68:	f1 e4       	ldi	r31, 0x41	; 65
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3f       	cpi	r26, 0xF4	; 244
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 ef       	ldi	r26, 0xF4	; 244
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 30       	cpi	r26, 0x03	; 3
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 7e 20 	jmp	0x40fc	; 0x40fc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 02 20 	jmp	0x4004	; 0x4004 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 ee       	ldi	r26, 0xE6	; 230
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1e 20 	jmp	0x403c	; 0x403c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0e 20 	jmp	0x401c	; 0x401c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2a 20 	jmp	0x4054	; 0x4054 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0e 20 	jmp	0x401c	; 0x401c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2a 20 	jmp	0x4054	; 0x4054 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 02 20 	jmp	0x4004	; 0x4004 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	86 ee       	ldi	r24, 0xE6	; 230
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1e 20 	jmp	0x403c	; 0x403c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0e 20 	jmp	0x401c	; 0x401c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2a 20 	jmp	0x4054	; 0x4054 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0e 20 	jmp	0x401c	; 0x401c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2a 20 	jmp	0x4054	; 0x4054 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0e 20 	jmp	0x401c	; 0x401c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2a 20 	jmp	0x4054	; 0x4054 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 12 20 	jmp	0x4024	; 0x4024 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2e 20 	jmp	0x405c	; 0x405c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
uint8 passwordconfirmation[ArraySize];

uint8 passwordCompare(void);

int main()
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	cd 57       	subi	r28, 0x7D	; 125
     b54:	d1 40       	sbci	r29, 0x01	; 1
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	uint8 key;
	uint8 key2;
	uint8 pass=0;
     b60:	fe 01       	movw	r30, r28
     b62:	e2 59       	subi	r30, 0x92	; 146
     b64:	fe 4f       	sbci	r31, 0xFE	; 254
     b66:	10 82       	st	Z, r1
	uint8 i;
	uint8 string[1];
//	uint8 x=0,y=0,z=0,m=0,l=0,h=0;
	LCD_init();
     b68:	0e 94 bf 19 	call	0x337e	; 0x337e <LCD_init>
	USART_config_type USART_CONFIG = {_8_bits,disabled,_1_bit,9600};
     b6c:	ce 01       	movw	r24, r28
     b6e:	8e 58       	subi	r24, 0x8E	; 142
     b70:	9e 4f       	sbci	r25, 0xFE	; 254
     b72:	c7 58       	subi	r28, 0x87	; 135
     b74:	de 4f       	sbci	r29, 0xFE	; 254
     b76:	99 83       	std	Y+1, r25	; 0x01
     b78:	88 83       	st	Y, r24
     b7a:	c9 57       	subi	r28, 0x79	; 121
     b7c:	d1 40       	sbci	r29, 0x01	; 1
     b7e:	2e ee       	ldi	r18, 0xEE	; 238
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	c5 58       	subi	r28, 0x85	; 133
     b84:	de 4f       	sbci	r29, 0xFE	; 254
     b86:	39 83       	std	Y+1, r19	; 0x01
     b88:	28 83       	st	Y, r18
     b8a:	cb 57       	subi	r28, 0x7B	; 123
     b8c:	d1 40       	sbci	r29, 0x01	; 1
     b8e:	35 e0       	ldi	r19, 0x05	; 5
     b90:	c3 58       	subi	r28, 0x83	; 131
     b92:	de 4f       	sbci	r29, 0xFE	; 254
     b94:	38 83       	st	Y, r19
     b96:	cd 57       	subi	r28, 0x7D	; 125
     b98:	d1 40       	sbci	r29, 0x01	; 1
     b9a:	c5 58       	subi	r28, 0x85	; 133
     b9c:	de 4f       	sbci	r29, 0xFE	; 254
     b9e:	e8 81       	ld	r30, Y
     ba0:	f9 81       	ldd	r31, Y+1	; 0x01
     ba2:	cb 57       	subi	r28, 0x7B	; 123
     ba4:	d1 40       	sbci	r29, 0x01	; 1
     ba6:	00 80       	ld	r0, Z
     ba8:	c5 58       	subi	r28, 0x85	; 133
     baa:	de 4f       	sbci	r29, 0xFE	; 254
     bac:	28 81       	ld	r18, Y
     bae:	39 81       	ldd	r19, Y+1	; 0x01
     bb0:	cb 57       	subi	r28, 0x7B	; 123
     bb2:	d1 40       	sbci	r29, 0x01	; 1
     bb4:	2f 5f       	subi	r18, 0xFF	; 255
     bb6:	3f 4f       	sbci	r19, 0xFF	; 255
     bb8:	c5 58       	subi	r28, 0x85	; 133
     bba:	de 4f       	sbci	r29, 0xFE	; 254
     bbc:	39 83       	std	Y+1, r19	; 0x01
     bbe:	28 83       	st	Y, r18
     bc0:	cb 57       	subi	r28, 0x7B	; 123
     bc2:	d1 40       	sbci	r29, 0x01	; 1
     bc4:	c7 58       	subi	r28, 0x87	; 135
     bc6:	de 4f       	sbci	r29, 0xFE	; 254
     bc8:	e8 81       	ld	r30, Y
     bca:	f9 81       	ldd	r31, Y+1	; 0x01
     bcc:	c9 57       	subi	r28, 0x79	; 121
     bce:	d1 40       	sbci	r29, 0x01	; 1
     bd0:	00 82       	st	Z, r0
     bd2:	c7 58       	subi	r28, 0x87	; 135
     bd4:	de 4f       	sbci	r29, 0xFE	; 254
     bd6:	28 81       	ld	r18, Y
     bd8:	39 81       	ldd	r19, Y+1	; 0x01
     bda:	c9 57       	subi	r28, 0x79	; 121
     bdc:	d1 40       	sbci	r29, 0x01	; 1
     bde:	2f 5f       	subi	r18, 0xFF	; 255
     be0:	3f 4f       	sbci	r19, 0xFF	; 255
     be2:	c7 58       	subi	r28, 0x87	; 135
     be4:	de 4f       	sbci	r29, 0xFE	; 254
     be6:	39 83       	std	Y+1, r19	; 0x01
     be8:	28 83       	st	Y, r18
     bea:	c9 57       	subi	r28, 0x79	; 121
     bec:	d1 40       	sbci	r29, 0x01	; 1
     bee:	c3 58       	subi	r28, 0x83	; 131
     bf0:	de 4f       	sbci	r29, 0xFE	; 254
     bf2:	38 81       	ld	r19, Y
     bf4:	cd 57       	subi	r28, 0x7D	; 125
     bf6:	d1 40       	sbci	r29, 0x01	; 1
     bf8:	31 50       	subi	r19, 0x01	; 1
     bfa:	c3 58       	subi	r28, 0x83	; 131
     bfc:	de 4f       	sbci	r29, 0xFE	; 254
     bfe:	38 83       	st	Y, r19
     c00:	cd 57       	subi	r28, 0x7D	; 125
     c02:	d1 40       	sbci	r29, 0x01	; 1
     c04:	c3 58       	subi	r28, 0x83	; 131
     c06:	de 4f       	sbci	r29, 0xFE	; 254
     c08:	88 81       	ld	r24, Y
     c0a:	cd 57       	subi	r28, 0x7D	; 125
     c0c:	d1 40       	sbci	r29, 0x01	; 1
     c0e:	88 23       	and	r24, r24
     c10:	21 f6       	brne	.-120    	; 0xb9a <main+0x54>
	UART_init(&USART_CONFIG);
     c12:	ce 01       	movw	r24, r28
     c14:	8e 58       	subi	r24, 0x8E	; 142
     c16:	9e 4f       	sbci	r25, 0xFE	; 254
     c18:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <UART_init>
	LCD_clearScreen();
     c1c:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"New Password");
     c20:	20 e6       	ldi	r18, 0x60	; 96
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	a9 01       	movw	r20, r18
     c2a:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_displayStringRowColumn>
	LCD_goToRowColumn(1,0);
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	60 e0       	ldi	r22, 0x00	; 0
     c32:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <LCD_goToRowColumn>
	for(i=0;i<ArraySize;i++)
     c36:	fe 01       	movw	r30, r28
     c38:	e3 59       	subi	r30, 0x93	; 147
     c3a:	fe 4f       	sbci	r31, 0xFE	; 254
     c3c:	10 82       	st	Z, r1
     c3e:	8d c1       	rjmp	.+794    	; 0xf5a <main+0x414>
	{
		key = KeyPad_getPressedKey(); /* get the pressed key number */
     c40:	0e 94 c1 18 	call	0x3182	; 0x3182 <KeyPad_getPressedKey>
     c44:	fe 01       	movw	r30, r28
     c46:	e0 59       	subi	r30, 0x90	; 144
     c48:	fe 4f       	sbci	r31, 0xFE	; 254
     c4a:	80 83       	st	Z, r24
     c4c:	fe 01       	movw	r30, r28
     c4e:	e7 59       	subi	r30, 0x97	; 151
     c50:	fe 4f       	sbci	r31, 0xFE	; 254
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	a8 ec       	ldi	r26, 0xC8	; 200
     c58:	b2 e4       	ldi	r27, 0x42	; 66
     c5a:	80 83       	st	Z, r24
     c5c:	91 83       	std	Z+1, r25	; 0x01
     c5e:	a2 83       	std	Z+2, r26	; 0x02
     c60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c62:	8e 01       	movw	r16, r28
     c64:	0b 59       	subi	r16, 0x9B	; 155
     c66:	1e 4f       	sbci	r17, 0xFE	; 254
     c68:	fe 01       	movw	r30, r28
     c6a:	e7 59       	subi	r30, 0x97	; 151
     c6c:	fe 4f       	sbci	r31, 0xFE	; 254
     c6e:	60 81       	ld	r22, Z
     c70:	71 81       	ldd	r23, Z+1	; 0x01
     c72:	82 81       	ldd	r24, Z+2	; 0x02
     c74:	93 81       	ldd	r25, Z+3	; 0x03
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	4a ef       	ldi	r20, 0xFA	; 250
     c7c:	54 e4       	ldi	r21, 0x44	; 68
     c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c82:	dc 01       	movw	r26, r24
     c84:	cb 01       	movw	r24, r22
     c86:	f8 01       	movw	r30, r16
     c88:	80 83       	st	Z, r24
     c8a:	91 83       	std	Z+1, r25	; 0x01
     c8c:	a2 83       	std	Z+2, r26	; 0x02
     c8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c90:	fe 01       	movw	r30, r28
     c92:	eb 59       	subi	r30, 0x9B	; 155
     c94:	fe 4f       	sbci	r31, 0xFE	; 254
     c96:	60 81       	ld	r22, Z
     c98:	71 81       	ldd	r23, Z+1	; 0x01
     c9a:	82 81       	ldd	r24, Z+2	; 0x02
     c9c:	93 81       	ldd	r25, Z+3	; 0x03
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	40 e8       	ldi	r20, 0x80	; 128
     ca4:	5f e3       	ldi	r21, 0x3F	; 63
     ca6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     caa:	88 23       	and	r24, r24
     cac:	44 f4       	brge	.+16     	; 0xcbe <main+0x178>
		__ticks = 1;
     cae:	fe 01       	movw	r30, r28
     cb0:	ed 59       	subi	r30, 0x9D	; 157
     cb2:	fe 4f       	sbci	r31, 0xFE	; 254
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	91 83       	std	Z+1, r25	; 0x01
     cba:	80 83       	st	Z, r24
     cbc:	64 c0       	rjmp	.+200    	; 0xd86 <main+0x240>
	else if (__tmp > 65535)
     cbe:	fe 01       	movw	r30, r28
     cc0:	eb 59       	subi	r30, 0x9B	; 155
     cc2:	fe 4f       	sbci	r31, 0xFE	; 254
     cc4:	60 81       	ld	r22, Z
     cc6:	71 81       	ldd	r23, Z+1	; 0x01
     cc8:	82 81       	ldd	r24, Z+2	; 0x02
     cca:	93 81       	ldd	r25, Z+3	; 0x03
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	3f ef       	ldi	r19, 0xFF	; 255
     cd0:	4f e7       	ldi	r20, 0x7F	; 127
     cd2:	57 e4       	ldi	r21, 0x47	; 71
     cd4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cd8:	18 16       	cp	r1, r24
     cda:	0c f0       	brlt	.+2      	; 0xcde <main+0x198>
     cdc:	43 c0       	rjmp	.+134    	; 0xd64 <main+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cde:	fe 01       	movw	r30, r28
     ce0:	e7 59       	subi	r30, 0x97	; 151
     ce2:	fe 4f       	sbci	r31, 0xFE	; 254
     ce4:	60 81       	ld	r22, Z
     ce6:	71 81       	ldd	r23, Z+1	; 0x01
     ce8:	82 81       	ldd	r24, Z+2	; 0x02
     cea:	93 81       	ldd	r25, Z+3	; 0x03
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	40 e2       	ldi	r20, 0x20	; 32
     cf2:	51 e4       	ldi	r21, 0x41	; 65
     cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cf8:	dc 01       	movw	r26, r24
     cfa:	cb 01       	movw	r24, r22
     cfc:	8e 01       	movw	r16, r28
     cfe:	0d 59       	subi	r16, 0x9D	; 157
     d00:	1e 4f       	sbci	r17, 0xFE	; 254
     d02:	bc 01       	movw	r22, r24
     d04:	cd 01       	movw	r24, r26
     d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d0a:	dc 01       	movw	r26, r24
     d0c:	cb 01       	movw	r24, r22
     d0e:	f8 01       	movw	r30, r16
     d10:	91 83       	std	Z+1, r25	; 0x01
     d12:	80 83       	st	Z, r24
     d14:	1f c0       	rjmp	.+62     	; 0xd54 <main+0x20e>
     d16:	fe 01       	movw	r30, r28
     d18:	ef 59       	subi	r30, 0x9F	; 159
     d1a:	fe 4f       	sbci	r31, 0xFE	; 254
     d1c:	88 ec       	ldi	r24, 0xC8	; 200
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	91 83       	std	Z+1, r25	; 0x01
     d22:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d24:	fe 01       	movw	r30, r28
     d26:	ef 59       	subi	r30, 0x9F	; 159
     d28:	fe 4f       	sbci	r31, 0xFE	; 254
     d2a:	80 81       	ld	r24, Z
     d2c:	91 81       	ldd	r25, Z+1	; 0x01
     d2e:	01 97       	sbiw	r24, 0x01	; 1
     d30:	f1 f7       	brne	.-4      	; 0xd2e <main+0x1e8>
     d32:	fe 01       	movw	r30, r28
     d34:	ef 59       	subi	r30, 0x9F	; 159
     d36:	fe 4f       	sbci	r31, 0xFE	; 254
     d38:	91 83       	std	Z+1, r25	; 0x01
     d3a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d3c:	de 01       	movw	r26, r28
     d3e:	ad 59       	subi	r26, 0x9D	; 157
     d40:	be 4f       	sbci	r27, 0xFE	; 254
     d42:	fe 01       	movw	r30, r28
     d44:	ed 59       	subi	r30, 0x9D	; 157
     d46:	fe 4f       	sbci	r31, 0xFE	; 254
     d48:	80 81       	ld	r24, Z
     d4a:	91 81       	ldd	r25, Z+1	; 0x01
     d4c:	01 97       	sbiw	r24, 0x01	; 1
     d4e:	11 96       	adiw	r26, 0x01	; 1
     d50:	9c 93       	st	X, r25
     d52:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d54:	fe 01       	movw	r30, r28
     d56:	ed 59       	subi	r30, 0x9D	; 157
     d58:	fe 4f       	sbci	r31, 0xFE	; 254
     d5a:	80 81       	ld	r24, Z
     d5c:	91 81       	ldd	r25, Z+1	; 0x01
     d5e:	00 97       	sbiw	r24, 0x00	; 0
     d60:	d1 f6       	brne	.-76     	; 0xd16 <main+0x1d0>
     d62:	28 c0       	rjmp	.+80     	; 0xdb4 <main+0x26e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d64:	8e 01       	movw	r16, r28
     d66:	0d 59       	subi	r16, 0x9D	; 157
     d68:	1e 4f       	sbci	r17, 0xFE	; 254
     d6a:	fe 01       	movw	r30, r28
     d6c:	eb 59       	subi	r30, 0x9B	; 155
     d6e:	fe 4f       	sbci	r31, 0xFE	; 254
     d70:	60 81       	ld	r22, Z
     d72:	71 81       	ldd	r23, Z+1	; 0x01
     d74:	82 81       	ldd	r24, Z+2	; 0x02
     d76:	93 81       	ldd	r25, Z+3	; 0x03
     d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	f8 01       	movw	r30, r16
     d82:	91 83       	std	Z+1, r25	; 0x01
     d84:	80 83       	st	Z, r24
     d86:	de 01       	movw	r26, r28
     d88:	a1 5a       	subi	r26, 0xA1	; 161
     d8a:	be 4f       	sbci	r27, 0xFE	; 254
     d8c:	fe 01       	movw	r30, r28
     d8e:	ed 59       	subi	r30, 0x9D	; 157
     d90:	fe 4f       	sbci	r31, 0xFE	; 254
     d92:	80 81       	ld	r24, Z
     d94:	91 81       	ldd	r25, Z+1	; 0x01
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	9c 93       	st	X, r25
     d9a:	8e 93       	st	-X, r24
     d9c:	fe 01       	movw	r30, r28
     d9e:	e1 5a       	subi	r30, 0xA1	; 161
     da0:	fe 4f       	sbci	r31, 0xFE	; 254
     da2:	80 81       	ld	r24, Z
     da4:	91 81       	ldd	r25, Z+1	; 0x01
     da6:	01 97       	sbiw	r24, 0x01	; 1
     da8:	f1 f7       	brne	.-4      	; 0xda6 <main+0x260>
     daa:	fe 01       	movw	r30, r28
     dac:	e1 5a       	subi	r30, 0xA1	; 161
     dae:	fe 4f       	sbci	r31, 0xFE	; 254
     db0:	91 83       	std	Z+1, r25	; 0x01
     db2:	80 83       	st	Z, r24
		_delay_ms(100);
		if((key <= 9) && (key >= 0))
     db4:	fe 01       	movw	r30, r28
     db6:	e0 59       	subi	r30, 0x90	; 144
     db8:	fe 4f       	sbci	r31, 0xFE	; 254
     dba:	80 81       	ld	r24, Z
     dbc:	8a 30       	cpi	r24, 0x0A	; 10
     dbe:	88 f4       	brcc	.+34     	; 0xde2 <main+0x29c>
		{
			password[i]=key;
     dc0:	fe 01       	movw	r30, r28
     dc2:	e3 59       	subi	r30, 0x93	; 147
     dc4:	fe 4f       	sbci	r31, 0xFE	; 254
     dc6:	80 81       	ld	r24, Z
     dc8:	88 2f       	mov	r24, r24
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	dc 01       	movw	r26, r24
     dce:	a8 50       	subi	r26, 0x08	; 8
     dd0:	bf 4f       	sbci	r27, 0xFF	; 255
     dd2:	fe 01       	movw	r30, r28
     dd4:	e0 59       	subi	r30, 0x90	; 144
     dd6:	fe 4f       	sbci	r31, 0xFE	; 254
     dd8:	80 81       	ld	r24, Z
     dda:	8c 93       	st	X, r24
			LCD_displayCharacter('*');
     ddc:	8a e2       	ldi	r24, 0x2A	; 42
     dde:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <LCD_displayCharacter>
     de2:	fe 01       	movw	r30, r28
     de4:	e5 5a       	subi	r30, 0xA5	; 165
     de6:	fe 4f       	sbci	r31, 0xFE	; 254
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	aa ef       	ldi	r26, 0xFA	; 250
     dee:	b3 e4       	ldi	r27, 0x43	; 67
     df0:	80 83       	st	Z, r24
     df2:	91 83       	std	Z+1, r25	; 0x01
     df4:	a2 83       	std	Z+2, r26	; 0x02
     df6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     df8:	8e 01       	movw	r16, r28
     dfa:	09 5a       	subi	r16, 0xA9	; 169
     dfc:	1e 4f       	sbci	r17, 0xFE	; 254
     dfe:	fe 01       	movw	r30, r28
     e00:	e5 5a       	subi	r30, 0xA5	; 165
     e02:	fe 4f       	sbci	r31, 0xFE	; 254
     e04:	60 81       	ld	r22, Z
     e06:	71 81       	ldd	r23, Z+1	; 0x01
     e08:	82 81       	ldd	r24, Z+2	; 0x02
     e0a:	93 81       	ldd	r25, Z+3	; 0x03
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	4a ef       	ldi	r20, 0xFA	; 250
     e12:	54 e4       	ldi	r21, 0x44	; 68
     e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e18:	dc 01       	movw	r26, r24
     e1a:	cb 01       	movw	r24, r22
     e1c:	f8 01       	movw	r30, r16
     e1e:	80 83       	st	Z, r24
     e20:	91 83       	std	Z+1, r25	; 0x01
     e22:	a2 83       	std	Z+2, r26	; 0x02
     e24:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e26:	fe 01       	movw	r30, r28
     e28:	e9 5a       	subi	r30, 0xA9	; 169
     e2a:	fe 4f       	sbci	r31, 0xFE	; 254
     e2c:	60 81       	ld	r22, Z
     e2e:	71 81       	ldd	r23, Z+1	; 0x01
     e30:	82 81       	ldd	r24, Z+2	; 0x02
     e32:	93 81       	ldd	r25, Z+3	; 0x03
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	40 e8       	ldi	r20, 0x80	; 128
     e3a:	5f e3       	ldi	r21, 0x3F	; 63
     e3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e40:	88 23       	and	r24, r24
     e42:	44 f4       	brge	.+16     	; 0xe54 <main+0x30e>
		__ticks = 1;
     e44:	fe 01       	movw	r30, r28
     e46:	eb 5a       	subi	r30, 0xAB	; 171
     e48:	fe 4f       	sbci	r31, 0xFE	; 254
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	91 83       	std	Z+1, r25	; 0x01
     e50:	80 83       	st	Z, r24
     e52:	64 c0       	rjmp	.+200    	; 0xf1c <main+0x3d6>
	else if (__tmp > 65535)
     e54:	fe 01       	movw	r30, r28
     e56:	e9 5a       	subi	r30, 0xA9	; 169
     e58:	fe 4f       	sbci	r31, 0xFE	; 254
     e5a:	60 81       	ld	r22, Z
     e5c:	71 81       	ldd	r23, Z+1	; 0x01
     e5e:	82 81       	ldd	r24, Z+2	; 0x02
     e60:	93 81       	ldd	r25, Z+3	; 0x03
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	3f ef       	ldi	r19, 0xFF	; 255
     e66:	4f e7       	ldi	r20, 0x7F	; 127
     e68:	57 e4       	ldi	r21, 0x47	; 71
     e6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e6e:	18 16       	cp	r1, r24
     e70:	0c f0       	brlt	.+2      	; 0xe74 <main+0x32e>
     e72:	43 c0       	rjmp	.+134    	; 0xefa <main+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e74:	fe 01       	movw	r30, r28
     e76:	e5 5a       	subi	r30, 0xA5	; 165
     e78:	fe 4f       	sbci	r31, 0xFE	; 254
     e7a:	60 81       	ld	r22, Z
     e7c:	71 81       	ldd	r23, Z+1	; 0x01
     e7e:	82 81       	ldd	r24, Z+2	; 0x02
     e80:	93 81       	ldd	r25, Z+3	; 0x03
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	40 e2       	ldi	r20, 0x20	; 32
     e88:	51 e4       	ldi	r21, 0x41	; 65
     e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	8e 01       	movw	r16, r28
     e94:	0b 5a       	subi	r16, 0xAB	; 171
     e96:	1e 4f       	sbci	r17, 0xFE	; 254
     e98:	bc 01       	movw	r22, r24
     e9a:	cd 01       	movw	r24, r26
     e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ea0:	dc 01       	movw	r26, r24
     ea2:	cb 01       	movw	r24, r22
     ea4:	f8 01       	movw	r30, r16
     ea6:	91 83       	std	Z+1, r25	; 0x01
     ea8:	80 83       	st	Z, r24
     eaa:	1f c0       	rjmp	.+62     	; 0xeea <main+0x3a4>
     eac:	fe 01       	movw	r30, r28
     eae:	ed 5a       	subi	r30, 0xAD	; 173
     eb0:	fe 4f       	sbci	r31, 0xFE	; 254
     eb2:	88 ec       	ldi	r24, 0xC8	; 200
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	91 83       	std	Z+1, r25	; 0x01
     eb8:	80 83       	st	Z, r24
     eba:	fe 01       	movw	r30, r28
     ebc:	ed 5a       	subi	r30, 0xAD	; 173
     ebe:	fe 4f       	sbci	r31, 0xFE	; 254
     ec0:	80 81       	ld	r24, Z
     ec2:	91 81       	ldd	r25, Z+1	; 0x01
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	f1 f7       	brne	.-4      	; 0xec4 <main+0x37e>
     ec8:	fe 01       	movw	r30, r28
     eca:	ed 5a       	subi	r30, 0xAD	; 173
     ecc:	fe 4f       	sbci	r31, 0xFE	; 254
     ece:	91 83       	std	Z+1, r25	; 0x01
     ed0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed2:	de 01       	movw	r26, r28
     ed4:	ab 5a       	subi	r26, 0xAB	; 171
     ed6:	be 4f       	sbci	r27, 0xFE	; 254
     ed8:	fe 01       	movw	r30, r28
     eda:	eb 5a       	subi	r30, 0xAB	; 171
     edc:	fe 4f       	sbci	r31, 0xFE	; 254
     ede:	80 81       	ld	r24, Z
     ee0:	91 81       	ldd	r25, Z+1	; 0x01
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	11 96       	adiw	r26, 0x01	; 1
     ee6:	9c 93       	st	X, r25
     ee8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eea:	fe 01       	movw	r30, r28
     eec:	eb 5a       	subi	r30, 0xAB	; 171
     eee:	fe 4f       	sbci	r31, 0xFE	; 254
     ef0:	80 81       	ld	r24, Z
     ef2:	91 81       	ldd	r25, Z+1	; 0x01
     ef4:	00 97       	sbiw	r24, 0x00	; 0
     ef6:	d1 f6       	brne	.-76     	; 0xeac <main+0x366>
     ef8:	27 c0       	rjmp	.+78     	; 0xf48 <main+0x402>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     efa:	8e 01       	movw	r16, r28
     efc:	0b 5a       	subi	r16, 0xAB	; 171
     efe:	1e 4f       	sbci	r17, 0xFE	; 254
     f00:	fe 01       	movw	r30, r28
     f02:	e9 5a       	subi	r30, 0xA9	; 169
     f04:	fe 4f       	sbci	r31, 0xFE	; 254
     f06:	60 81       	ld	r22, Z
     f08:	71 81       	ldd	r23, Z+1	; 0x01
     f0a:	82 81       	ldd	r24, Z+2	; 0x02
     f0c:	93 81       	ldd	r25, Z+3	; 0x03
     f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f12:	dc 01       	movw	r26, r24
     f14:	cb 01       	movw	r24, r22
     f16:	f8 01       	movw	r30, r16
     f18:	91 83       	std	Z+1, r25	; 0x01
     f1a:	80 83       	st	Z, r24
     f1c:	de 01       	movw	r26, r28
     f1e:	af 5a       	subi	r26, 0xAF	; 175
     f20:	be 4f       	sbci	r27, 0xFE	; 254
     f22:	fe 01       	movw	r30, r28
     f24:	eb 5a       	subi	r30, 0xAB	; 171
     f26:	fe 4f       	sbci	r31, 0xFE	; 254
     f28:	80 81       	ld	r24, Z
     f2a:	91 81       	ldd	r25, Z+1	; 0x01
     f2c:	8d 93       	st	X+, r24
     f2e:	9c 93       	st	X, r25
     f30:	fe 01       	movw	r30, r28
     f32:	ef 5a       	subi	r30, 0xAF	; 175
     f34:	fe 4f       	sbci	r31, 0xFE	; 254
     f36:	80 81       	ld	r24, Z
     f38:	91 81       	ldd	r25, Z+1	; 0x01
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	f1 f7       	brne	.-4      	; 0xf3a <main+0x3f4>
     f3e:	fe 01       	movw	r30, r28
     f40:	ef 5a       	subi	r30, 0xAF	; 175
     f42:	fe 4f       	sbci	r31, 0xFE	; 254
     f44:	91 83       	std	Z+1, r25	; 0x01
     f46:	80 83       	st	Z, r24
	USART_config_type USART_CONFIG = {_8_bits,disabled,_1_bit,9600};
	UART_init(&USART_CONFIG);
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"New Password");
	LCD_goToRowColumn(1,0);
	for(i=0;i<ArraySize;i++)
     f48:	de 01       	movw	r26, r28
     f4a:	a3 59       	subi	r26, 0x93	; 147
     f4c:	be 4f       	sbci	r27, 0xFE	; 254
     f4e:	fe 01       	movw	r30, r28
     f50:	e3 59       	subi	r30, 0x93	; 147
     f52:	fe 4f       	sbci	r31, 0xFE	; 254
     f54:	80 81       	ld	r24, Z
     f56:	8f 5f       	subi	r24, 0xFF	; 255
     f58:	8c 93       	st	X, r24
     f5a:	fe 01       	movw	r30, r28
     f5c:	e3 59       	subi	r30, 0x93	; 147
     f5e:	fe 4f       	sbci	r31, 0xFE	; 254
     f60:	80 81       	ld	r24, Z
     f62:	85 30       	cpi	r24, 0x05	; 5
     f64:	08 f4       	brcc	.+2      	; 0xf68 <main+0x422>
     f66:	6c ce       	rjmp	.-808    	; 0xc40 <main+0xfa>
     f68:	fe 01       	movw	r30, r28
     f6a:	e3 5b       	subi	r30, 0xB3	; 179
     f6c:	fe 4f       	sbci	r31, 0xFE	; 254
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	aa ef       	ldi	r26, 0xFA	; 250
     f74:	b3 e4       	ldi	r27, 0x43	; 67
     f76:	80 83       	st	Z, r24
     f78:	91 83       	std	Z+1, r25	; 0x01
     f7a:	a2 83       	std	Z+2, r26	; 0x02
     f7c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f7e:	8e 01       	movw	r16, r28
     f80:	07 5b       	subi	r16, 0xB7	; 183
     f82:	1e 4f       	sbci	r17, 0xFE	; 254
     f84:	fe 01       	movw	r30, r28
     f86:	e3 5b       	subi	r30, 0xB3	; 179
     f88:	fe 4f       	sbci	r31, 0xFE	; 254
     f8a:	60 81       	ld	r22, Z
     f8c:	71 81       	ldd	r23, Z+1	; 0x01
     f8e:	82 81       	ldd	r24, Z+2	; 0x02
     f90:	93 81       	ldd	r25, Z+3	; 0x03
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	4a ef       	ldi	r20, 0xFA	; 250
     f98:	54 e4       	ldi	r21, 0x44	; 68
     f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	f8 01       	movw	r30, r16
     fa4:	80 83       	st	Z, r24
     fa6:	91 83       	std	Z+1, r25	; 0x01
     fa8:	a2 83       	std	Z+2, r26	; 0x02
     faa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     fac:	fe 01       	movw	r30, r28
     fae:	e7 5b       	subi	r30, 0xB7	; 183
     fb0:	fe 4f       	sbci	r31, 0xFE	; 254
     fb2:	60 81       	ld	r22, Z
     fb4:	71 81       	ldd	r23, Z+1	; 0x01
     fb6:	82 81       	ldd	r24, Z+2	; 0x02
     fb8:	93 81       	ldd	r25, Z+3	; 0x03
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	40 e8       	ldi	r20, 0x80	; 128
     fc0:	5f e3       	ldi	r21, 0x3F	; 63
     fc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fc6:	88 23       	and	r24, r24
     fc8:	44 f4       	brge	.+16     	; 0xfda <main+0x494>
		__ticks = 1;
     fca:	fe 01       	movw	r30, r28
     fcc:	e9 5b       	subi	r30, 0xB9	; 185
     fce:	fe 4f       	sbci	r31, 0xFE	; 254
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	91 83       	std	Z+1, r25	; 0x01
     fd6:	80 83       	st	Z, r24
     fd8:	64 c0       	rjmp	.+200    	; 0x10a2 <main+0x55c>
	else if (__tmp > 65535)
     fda:	fe 01       	movw	r30, r28
     fdc:	e7 5b       	subi	r30, 0xB7	; 183
     fde:	fe 4f       	sbci	r31, 0xFE	; 254
     fe0:	60 81       	ld	r22, Z
     fe2:	71 81       	ldd	r23, Z+1	; 0x01
     fe4:	82 81       	ldd	r24, Z+2	; 0x02
     fe6:	93 81       	ldd	r25, Z+3	; 0x03
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	3f ef       	ldi	r19, 0xFF	; 255
     fec:	4f e7       	ldi	r20, 0x7F	; 127
     fee:	57 e4       	ldi	r21, 0x47	; 71
     ff0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ff4:	18 16       	cp	r1, r24
     ff6:	0c f0       	brlt	.+2      	; 0xffa <main+0x4b4>
     ff8:	43 c0       	rjmp	.+134    	; 0x1080 <main+0x53a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ffa:	fe 01       	movw	r30, r28
     ffc:	e3 5b       	subi	r30, 0xB3	; 179
     ffe:	fe 4f       	sbci	r31, 0xFE	; 254
    1000:	60 81       	ld	r22, Z
    1002:	71 81       	ldd	r23, Z+1	; 0x01
    1004:	82 81       	ldd	r24, Z+2	; 0x02
    1006:	93 81       	ldd	r25, Z+3	; 0x03
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e2       	ldi	r20, 0x20	; 32
    100e:	51 e4       	ldi	r21, 0x41	; 65
    1010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	8e 01       	movw	r16, r28
    101a:	09 5b       	subi	r16, 0xB9	; 185
    101c:	1e 4f       	sbci	r17, 0xFE	; 254
    101e:	bc 01       	movw	r22, r24
    1020:	cd 01       	movw	r24, r26
    1022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1026:	dc 01       	movw	r26, r24
    1028:	cb 01       	movw	r24, r22
    102a:	f8 01       	movw	r30, r16
    102c:	91 83       	std	Z+1, r25	; 0x01
    102e:	80 83       	st	Z, r24
    1030:	1f c0       	rjmp	.+62     	; 0x1070 <main+0x52a>
    1032:	fe 01       	movw	r30, r28
    1034:	eb 5b       	subi	r30, 0xBB	; 187
    1036:	fe 4f       	sbci	r31, 0xFE	; 254
    1038:	88 ec       	ldi	r24, 0xC8	; 200
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	91 83       	std	Z+1, r25	; 0x01
    103e:	80 83       	st	Z, r24
    1040:	fe 01       	movw	r30, r28
    1042:	eb 5b       	subi	r30, 0xBB	; 187
    1044:	fe 4f       	sbci	r31, 0xFE	; 254
    1046:	80 81       	ld	r24, Z
    1048:	91 81       	ldd	r25, Z+1	; 0x01
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	f1 f7       	brne	.-4      	; 0x104a <main+0x504>
    104e:	fe 01       	movw	r30, r28
    1050:	eb 5b       	subi	r30, 0xBB	; 187
    1052:	fe 4f       	sbci	r31, 0xFE	; 254
    1054:	91 83       	std	Z+1, r25	; 0x01
    1056:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1058:	de 01       	movw	r26, r28
    105a:	a9 5b       	subi	r26, 0xB9	; 185
    105c:	be 4f       	sbci	r27, 0xFE	; 254
    105e:	fe 01       	movw	r30, r28
    1060:	e9 5b       	subi	r30, 0xB9	; 185
    1062:	fe 4f       	sbci	r31, 0xFE	; 254
    1064:	80 81       	ld	r24, Z
    1066:	91 81       	ldd	r25, Z+1	; 0x01
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	11 96       	adiw	r26, 0x01	; 1
    106c:	9c 93       	st	X, r25
    106e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1070:	fe 01       	movw	r30, r28
    1072:	e9 5b       	subi	r30, 0xB9	; 185
    1074:	fe 4f       	sbci	r31, 0xFE	; 254
    1076:	80 81       	ld	r24, Z
    1078:	91 81       	ldd	r25, Z+1	; 0x01
    107a:	00 97       	sbiw	r24, 0x00	; 0
    107c:	d1 f6       	brne	.-76     	; 0x1032 <main+0x4ec>
    107e:	27 c0       	rjmp	.+78     	; 0x10ce <main+0x588>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1080:	8e 01       	movw	r16, r28
    1082:	09 5b       	subi	r16, 0xB9	; 185
    1084:	1e 4f       	sbci	r17, 0xFE	; 254
    1086:	fe 01       	movw	r30, r28
    1088:	e7 5b       	subi	r30, 0xB7	; 183
    108a:	fe 4f       	sbci	r31, 0xFE	; 254
    108c:	60 81       	ld	r22, Z
    108e:	71 81       	ldd	r23, Z+1	; 0x01
    1090:	82 81       	ldd	r24, Z+2	; 0x02
    1092:	93 81       	ldd	r25, Z+3	; 0x03
    1094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	f8 01       	movw	r30, r16
    109e:	91 83       	std	Z+1, r25	; 0x01
    10a0:	80 83       	st	Z, r24
    10a2:	de 01       	movw	r26, r28
    10a4:	ad 5b       	subi	r26, 0xBD	; 189
    10a6:	be 4f       	sbci	r27, 0xFE	; 254
    10a8:	fe 01       	movw	r30, r28
    10aa:	e9 5b       	subi	r30, 0xB9	; 185
    10ac:	fe 4f       	sbci	r31, 0xFE	; 254
    10ae:	80 81       	ld	r24, Z
    10b0:	91 81       	ldd	r25, Z+1	; 0x01
    10b2:	8d 93       	st	X+, r24
    10b4:	9c 93       	st	X, r25
    10b6:	fe 01       	movw	r30, r28
    10b8:	ed 5b       	subi	r30, 0xBD	; 189
    10ba:	fe 4f       	sbci	r31, 0xFE	; 254
    10bc:	80 81       	ld	r24, Z
    10be:	91 81       	ldd	r25, Z+1	; 0x01
    10c0:	01 97       	sbiw	r24, 0x01	; 1
    10c2:	f1 f7       	brne	.-4      	; 0x10c0 <main+0x57a>
    10c4:	fe 01       	movw	r30, r28
    10c6:	ed 5b       	subi	r30, 0xBD	; 189
    10c8:	fe 4f       	sbci	r31, 0xFE	; 254
    10ca:	91 83       	std	Z+1, r25	; 0x01
    10cc:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
		}
		_delay_ms(500);
	}
	_delay_ms(500);
	LCD_clearScreen();
    10ce:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Confirm Password");
    10d2:	2d e6       	ldi	r18, 0x6D	; 109
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	60 e0       	ldi	r22, 0x00	; 0
    10da:	a9 01       	movw	r20, r18
    10dc:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_displayStringRowColumn>
	LCD_goToRowColumn(1,0);
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	60 e0       	ldi	r22, 0x00	; 0
    10e4:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <LCD_goToRowColumn>
	for(i=0;i<ArraySize;i++)
    10e8:	fe 01       	movw	r30, r28
    10ea:	e3 59       	subi	r30, 0x93	; 147
    10ec:	fe 4f       	sbci	r31, 0xFE	; 254
    10ee:	10 82       	st	Z, r1
    10f0:	99 c1       	rjmp	.+818    	; 0x1424 <main+0x8de>
	{
		key2 = KeyPad_getPressedKey(); /* get the pressed key number */
    10f2:	0e 94 c1 18 	call	0x3182	; 0x3182 <KeyPad_getPressedKey>
    10f6:	fe 01       	movw	r30, r28
    10f8:	e1 59       	subi	r30, 0x91	; 145
    10fa:	fe 4f       	sbci	r31, 0xFE	; 254
    10fc:	80 83       	st	Z, r24
    10fe:	fe 01       	movw	r30, r28
    1100:	e1 5c       	subi	r30, 0xC1	; 193
    1102:	fe 4f       	sbci	r31, 0xFE	; 254
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	a8 ec       	ldi	r26, 0xC8	; 200
    110a:	b2 e4       	ldi	r27, 0x42	; 66
    110c:	80 83       	st	Z, r24
    110e:	91 83       	std	Z+1, r25	; 0x01
    1110:	a2 83       	std	Z+2, r26	; 0x02
    1112:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1114:	8e 01       	movw	r16, r28
    1116:	05 5c       	subi	r16, 0xC5	; 197
    1118:	1e 4f       	sbci	r17, 0xFE	; 254
    111a:	fe 01       	movw	r30, r28
    111c:	e1 5c       	subi	r30, 0xC1	; 193
    111e:	fe 4f       	sbci	r31, 0xFE	; 254
    1120:	60 81       	ld	r22, Z
    1122:	71 81       	ldd	r23, Z+1	; 0x01
    1124:	82 81       	ldd	r24, Z+2	; 0x02
    1126:	93 81       	ldd	r25, Z+3	; 0x03
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	4a ef       	ldi	r20, 0xFA	; 250
    112e:	54 e4       	ldi	r21, 0x44	; 68
    1130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1134:	dc 01       	movw	r26, r24
    1136:	cb 01       	movw	r24, r22
    1138:	f8 01       	movw	r30, r16
    113a:	80 83       	st	Z, r24
    113c:	91 83       	std	Z+1, r25	; 0x01
    113e:	a2 83       	std	Z+2, r26	; 0x02
    1140:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1142:	fe 01       	movw	r30, r28
    1144:	e5 5c       	subi	r30, 0xC5	; 197
    1146:	fe 4f       	sbci	r31, 0xFE	; 254
    1148:	60 81       	ld	r22, Z
    114a:	71 81       	ldd	r23, Z+1	; 0x01
    114c:	82 81       	ldd	r24, Z+2	; 0x02
    114e:	93 81       	ldd	r25, Z+3	; 0x03
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	40 e8       	ldi	r20, 0x80	; 128
    1156:	5f e3       	ldi	r21, 0x3F	; 63
    1158:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    115c:	88 23       	and	r24, r24
    115e:	44 f4       	brge	.+16     	; 0x1170 <main+0x62a>
		__ticks = 1;
    1160:	fe 01       	movw	r30, r28
    1162:	e7 5c       	subi	r30, 0xC7	; 199
    1164:	fe 4f       	sbci	r31, 0xFE	; 254
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	91 83       	std	Z+1, r25	; 0x01
    116c:	80 83       	st	Z, r24
    116e:	64 c0       	rjmp	.+200    	; 0x1238 <main+0x6f2>
	else if (__tmp > 65535)
    1170:	fe 01       	movw	r30, r28
    1172:	e5 5c       	subi	r30, 0xC5	; 197
    1174:	fe 4f       	sbci	r31, 0xFE	; 254
    1176:	60 81       	ld	r22, Z
    1178:	71 81       	ldd	r23, Z+1	; 0x01
    117a:	82 81       	ldd	r24, Z+2	; 0x02
    117c:	93 81       	ldd	r25, Z+3	; 0x03
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	3f ef       	ldi	r19, 0xFF	; 255
    1182:	4f e7       	ldi	r20, 0x7F	; 127
    1184:	57 e4       	ldi	r21, 0x47	; 71
    1186:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    118a:	18 16       	cp	r1, r24
    118c:	0c f0       	brlt	.+2      	; 0x1190 <main+0x64a>
    118e:	43 c0       	rjmp	.+134    	; 0x1216 <main+0x6d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1190:	fe 01       	movw	r30, r28
    1192:	e1 5c       	subi	r30, 0xC1	; 193
    1194:	fe 4f       	sbci	r31, 0xFE	; 254
    1196:	60 81       	ld	r22, Z
    1198:	71 81       	ldd	r23, Z+1	; 0x01
    119a:	82 81       	ldd	r24, Z+2	; 0x02
    119c:	93 81       	ldd	r25, Z+3	; 0x03
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	40 e2       	ldi	r20, 0x20	; 32
    11a4:	51 e4       	ldi	r21, 0x41	; 65
    11a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	8e 01       	movw	r16, r28
    11b0:	07 5c       	subi	r16, 0xC7	; 199
    11b2:	1e 4f       	sbci	r17, 0xFE	; 254
    11b4:	bc 01       	movw	r22, r24
    11b6:	cd 01       	movw	r24, r26
    11b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11bc:	dc 01       	movw	r26, r24
    11be:	cb 01       	movw	r24, r22
    11c0:	f8 01       	movw	r30, r16
    11c2:	91 83       	std	Z+1, r25	; 0x01
    11c4:	80 83       	st	Z, r24
    11c6:	1f c0       	rjmp	.+62     	; 0x1206 <main+0x6c0>
    11c8:	fe 01       	movw	r30, r28
    11ca:	e9 5c       	subi	r30, 0xC9	; 201
    11cc:	fe 4f       	sbci	r31, 0xFE	; 254
    11ce:	88 ec       	ldi	r24, 0xC8	; 200
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	91 83       	std	Z+1, r25	; 0x01
    11d4:	80 83       	st	Z, r24
    11d6:	fe 01       	movw	r30, r28
    11d8:	e9 5c       	subi	r30, 0xC9	; 201
    11da:	fe 4f       	sbci	r31, 0xFE	; 254
    11dc:	80 81       	ld	r24, Z
    11de:	91 81       	ldd	r25, Z+1	; 0x01
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	f1 f7       	brne	.-4      	; 0x11e0 <main+0x69a>
    11e4:	fe 01       	movw	r30, r28
    11e6:	e9 5c       	subi	r30, 0xC9	; 201
    11e8:	fe 4f       	sbci	r31, 0xFE	; 254
    11ea:	91 83       	std	Z+1, r25	; 0x01
    11ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ee:	de 01       	movw	r26, r28
    11f0:	a7 5c       	subi	r26, 0xC7	; 199
    11f2:	be 4f       	sbci	r27, 0xFE	; 254
    11f4:	fe 01       	movw	r30, r28
    11f6:	e7 5c       	subi	r30, 0xC7	; 199
    11f8:	fe 4f       	sbci	r31, 0xFE	; 254
    11fa:	80 81       	ld	r24, Z
    11fc:	91 81       	ldd	r25, Z+1	; 0x01
    11fe:	01 97       	sbiw	r24, 0x01	; 1
    1200:	11 96       	adiw	r26, 0x01	; 1
    1202:	9c 93       	st	X, r25
    1204:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1206:	fe 01       	movw	r30, r28
    1208:	e7 5c       	subi	r30, 0xC7	; 199
    120a:	fe 4f       	sbci	r31, 0xFE	; 254
    120c:	80 81       	ld	r24, Z
    120e:	91 81       	ldd	r25, Z+1	; 0x01
    1210:	00 97       	sbiw	r24, 0x00	; 0
    1212:	d1 f6       	brne	.-76     	; 0x11c8 <main+0x682>
    1214:	28 c0       	rjmp	.+80     	; 0x1266 <main+0x720>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1216:	8e 01       	movw	r16, r28
    1218:	07 5c       	subi	r16, 0xC7	; 199
    121a:	1e 4f       	sbci	r17, 0xFE	; 254
    121c:	fe 01       	movw	r30, r28
    121e:	e5 5c       	subi	r30, 0xC5	; 197
    1220:	fe 4f       	sbci	r31, 0xFE	; 254
    1222:	60 81       	ld	r22, Z
    1224:	71 81       	ldd	r23, Z+1	; 0x01
    1226:	82 81       	ldd	r24, Z+2	; 0x02
    1228:	93 81       	ldd	r25, Z+3	; 0x03
    122a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	f8 01       	movw	r30, r16
    1234:	91 83       	std	Z+1, r25	; 0x01
    1236:	80 83       	st	Z, r24
    1238:	de 01       	movw	r26, r28
    123a:	ab 5c       	subi	r26, 0xCB	; 203
    123c:	be 4f       	sbci	r27, 0xFE	; 254
    123e:	fe 01       	movw	r30, r28
    1240:	e7 5c       	subi	r30, 0xC7	; 199
    1242:	fe 4f       	sbci	r31, 0xFE	; 254
    1244:	80 81       	ld	r24, Z
    1246:	91 81       	ldd	r25, Z+1	; 0x01
    1248:	11 96       	adiw	r26, 0x01	; 1
    124a:	9c 93       	st	X, r25
    124c:	8e 93       	st	-X, r24
    124e:	fe 01       	movw	r30, r28
    1250:	eb 5c       	subi	r30, 0xCB	; 203
    1252:	fe 4f       	sbci	r31, 0xFE	; 254
    1254:	80 81       	ld	r24, Z
    1256:	91 81       	ldd	r25, Z+1	; 0x01
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	f1 f7       	brne	.-4      	; 0x1258 <main+0x712>
    125c:	fe 01       	movw	r30, r28
    125e:	eb 5c       	subi	r30, 0xCB	; 203
    1260:	fe 4f       	sbci	r31, 0xFE	; 254
    1262:	91 83       	std	Z+1, r25	; 0x01
    1264:	80 83       	st	Z, r24
		_delay_ms(100);
		if((key2 <= 9) && (key2 >= 0))
    1266:	fe 01       	movw	r30, r28
    1268:	e1 59       	subi	r30, 0x91	; 145
    126a:	fe 4f       	sbci	r31, 0xFE	; 254
    126c:	80 81       	ld	r24, Z
    126e:	8a 30       	cpi	r24, 0x0A	; 10
    1270:	e8 f4       	brcc	.+58     	; 0x12ac <main+0x766>
		{passwordconfirmation[i]=key2;
    1272:	fe 01       	movw	r30, r28
    1274:	e3 59       	subi	r30, 0x93	; 147
    1276:	fe 4f       	sbci	r31, 0xFE	; 254
    1278:	80 81       	ld	r24, Z
    127a:	88 2f       	mov	r24, r24
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	dc 01       	movw	r26, r24
    1280:	a3 50       	subi	r26, 0x03	; 3
    1282:	bf 4f       	sbci	r27, 0xFF	; 255
    1284:	fe 01       	movw	r30, r28
    1286:	e1 59       	subi	r30, 0x91	; 145
    1288:	fe 4f       	sbci	r31, 0xFE	; 254
    128a:	80 81       	ld	r24, Z
    128c:	8c 93       	st	X, r24
		LCD_displayCharacter('*');
    128e:	8a e2       	ldi	r24, 0x2A	; 42
    1290:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <LCD_displayCharacter>
		UART_sendByte(passwordconfirmation[i]);
    1294:	fe 01       	movw	r30, r28
    1296:	e3 59       	subi	r30, 0x93	; 147
    1298:	fe 4f       	sbci	r31, 0xFE	; 254
    129a:	80 81       	ld	r24, Z
    129c:	88 2f       	mov	r24, r24
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	fc 01       	movw	r30, r24
    12a2:	e3 50       	subi	r30, 0x03	; 3
    12a4:	ff 4f       	sbci	r31, 0xFF	; 255
    12a6:	80 81       	ld	r24, Z
    12a8:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <UART_sendByte>
    12ac:	fe 01       	movw	r30, r28
    12ae:	ef 5c       	subi	r30, 0xCF	; 207
    12b0:	fe 4f       	sbci	r31, 0xFE	; 254
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	aa ef       	ldi	r26, 0xFA	; 250
    12b8:	b3 e4       	ldi	r27, 0x43	; 67
    12ba:	80 83       	st	Z, r24
    12bc:	91 83       	std	Z+1, r25	; 0x01
    12be:	a2 83       	std	Z+2, r26	; 0x02
    12c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12c2:	8e 01       	movw	r16, r28
    12c4:	03 5d       	subi	r16, 0xD3	; 211
    12c6:	1e 4f       	sbci	r17, 0xFE	; 254
    12c8:	fe 01       	movw	r30, r28
    12ca:	ef 5c       	subi	r30, 0xCF	; 207
    12cc:	fe 4f       	sbci	r31, 0xFE	; 254
    12ce:	60 81       	ld	r22, Z
    12d0:	71 81       	ldd	r23, Z+1	; 0x01
    12d2:	82 81       	ldd	r24, Z+2	; 0x02
    12d4:	93 81       	ldd	r25, Z+3	; 0x03
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	4a ef       	ldi	r20, 0xFA	; 250
    12dc:	54 e4       	ldi	r21, 0x44	; 68
    12de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	f8 01       	movw	r30, r16
    12e8:	80 83       	st	Z, r24
    12ea:	91 83       	std	Z+1, r25	; 0x01
    12ec:	a2 83       	std	Z+2, r26	; 0x02
    12ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12f0:	fe 01       	movw	r30, r28
    12f2:	e3 5d       	subi	r30, 0xD3	; 211
    12f4:	fe 4f       	sbci	r31, 0xFE	; 254
    12f6:	60 81       	ld	r22, Z
    12f8:	71 81       	ldd	r23, Z+1	; 0x01
    12fa:	82 81       	ldd	r24, Z+2	; 0x02
    12fc:	93 81       	ldd	r25, Z+3	; 0x03
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	40 e8       	ldi	r20, 0x80	; 128
    1304:	5f e3       	ldi	r21, 0x3F	; 63
    1306:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    130a:	88 23       	and	r24, r24
    130c:	44 f4       	brge	.+16     	; 0x131e <main+0x7d8>
		__ticks = 1;
    130e:	fe 01       	movw	r30, r28
    1310:	e5 5d       	subi	r30, 0xD5	; 213
    1312:	fe 4f       	sbci	r31, 0xFE	; 254
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	91 83       	std	Z+1, r25	; 0x01
    131a:	80 83       	st	Z, r24
    131c:	64 c0       	rjmp	.+200    	; 0x13e6 <main+0x8a0>
	else if (__tmp > 65535)
    131e:	fe 01       	movw	r30, r28
    1320:	e3 5d       	subi	r30, 0xD3	; 211
    1322:	fe 4f       	sbci	r31, 0xFE	; 254
    1324:	60 81       	ld	r22, Z
    1326:	71 81       	ldd	r23, Z+1	; 0x01
    1328:	82 81       	ldd	r24, Z+2	; 0x02
    132a:	93 81       	ldd	r25, Z+3	; 0x03
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	3f ef       	ldi	r19, 0xFF	; 255
    1330:	4f e7       	ldi	r20, 0x7F	; 127
    1332:	57 e4       	ldi	r21, 0x47	; 71
    1334:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1338:	18 16       	cp	r1, r24
    133a:	0c f0       	brlt	.+2      	; 0x133e <main+0x7f8>
    133c:	43 c0       	rjmp	.+134    	; 0x13c4 <main+0x87e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    133e:	fe 01       	movw	r30, r28
    1340:	ef 5c       	subi	r30, 0xCF	; 207
    1342:	fe 4f       	sbci	r31, 0xFE	; 254
    1344:	60 81       	ld	r22, Z
    1346:	71 81       	ldd	r23, Z+1	; 0x01
    1348:	82 81       	ldd	r24, Z+2	; 0x02
    134a:	93 81       	ldd	r25, Z+3	; 0x03
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	40 e2       	ldi	r20, 0x20	; 32
    1352:	51 e4       	ldi	r21, 0x41	; 65
    1354:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	8e 01       	movw	r16, r28
    135e:	05 5d       	subi	r16, 0xD5	; 213
    1360:	1e 4f       	sbci	r17, 0xFE	; 254
    1362:	bc 01       	movw	r22, r24
    1364:	cd 01       	movw	r24, r26
    1366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    136a:	dc 01       	movw	r26, r24
    136c:	cb 01       	movw	r24, r22
    136e:	f8 01       	movw	r30, r16
    1370:	91 83       	std	Z+1, r25	; 0x01
    1372:	80 83       	st	Z, r24
    1374:	1f c0       	rjmp	.+62     	; 0x13b4 <main+0x86e>
    1376:	fe 01       	movw	r30, r28
    1378:	e7 5d       	subi	r30, 0xD7	; 215
    137a:	fe 4f       	sbci	r31, 0xFE	; 254
    137c:	88 ec       	ldi	r24, 0xC8	; 200
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	91 83       	std	Z+1, r25	; 0x01
    1382:	80 83       	st	Z, r24
    1384:	fe 01       	movw	r30, r28
    1386:	e7 5d       	subi	r30, 0xD7	; 215
    1388:	fe 4f       	sbci	r31, 0xFE	; 254
    138a:	80 81       	ld	r24, Z
    138c:	91 81       	ldd	r25, Z+1	; 0x01
    138e:	01 97       	sbiw	r24, 0x01	; 1
    1390:	f1 f7       	brne	.-4      	; 0x138e <main+0x848>
    1392:	fe 01       	movw	r30, r28
    1394:	e7 5d       	subi	r30, 0xD7	; 215
    1396:	fe 4f       	sbci	r31, 0xFE	; 254
    1398:	91 83       	std	Z+1, r25	; 0x01
    139a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    139c:	de 01       	movw	r26, r28
    139e:	a5 5d       	subi	r26, 0xD5	; 213
    13a0:	be 4f       	sbci	r27, 0xFE	; 254
    13a2:	fe 01       	movw	r30, r28
    13a4:	e5 5d       	subi	r30, 0xD5	; 213
    13a6:	fe 4f       	sbci	r31, 0xFE	; 254
    13a8:	80 81       	ld	r24, Z
    13aa:	91 81       	ldd	r25, Z+1	; 0x01
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	11 96       	adiw	r26, 0x01	; 1
    13b0:	9c 93       	st	X, r25
    13b2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b4:	fe 01       	movw	r30, r28
    13b6:	e5 5d       	subi	r30, 0xD5	; 213
    13b8:	fe 4f       	sbci	r31, 0xFE	; 254
    13ba:	80 81       	ld	r24, Z
    13bc:	91 81       	ldd	r25, Z+1	; 0x01
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	d1 f6       	brne	.-76     	; 0x1376 <main+0x830>
    13c2:	27 c0       	rjmp	.+78     	; 0x1412 <main+0x8cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c4:	8e 01       	movw	r16, r28
    13c6:	05 5d       	subi	r16, 0xD5	; 213
    13c8:	1e 4f       	sbci	r17, 0xFE	; 254
    13ca:	fe 01       	movw	r30, r28
    13cc:	e3 5d       	subi	r30, 0xD3	; 211
    13ce:	fe 4f       	sbci	r31, 0xFE	; 254
    13d0:	60 81       	ld	r22, Z
    13d2:	71 81       	ldd	r23, Z+1	; 0x01
    13d4:	82 81       	ldd	r24, Z+2	; 0x02
    13d6:	93 81       	ldd	r25, Z+3	; 0x03
    13d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	f8 01       	movw	r30, r16
    13e2:	91 83       	std	Z+1, r25	; 0x01
    13e4:	80 83       	st	Z, r24
    13e6:	de 01       	movw	r26, r28
    13e8:	a9 5d       	subi	r26, 0xD9	; 217
    13ea:	be 4f       	sbci	r27, 0xFE	; 254
    13ec:	fe 01       	movw	r30, r28
    13ee:	e5 5d       	subi	r30, 0xD5	; 213
    13f0:	fe 4f       	sbci	r31, 0xFE	; 254
    13f2:	80 81       	ld	r24, Z
    13f4:	91 81       	ldd	r25, Z+1	; 0x01
    13f6:	8d 93       	st	X+, r24
    13f8:	9c 93       	st	X, r25
    13fa:	fe 01       	movw	r30, r28
    13fc:	e9 5d       	subi	r30, 0xD9	; 217
    13fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1400:	80 81       	ld	r24, Z
    1402:	91 81       	ldd	r25, Z+1	; 0x01
    1404:	01 97       	sbiw	r24, 0x01	; 1
    1406:	f1 f7       	brne	.-4      	; 0x1404 <main+0x8be>
    1408:	fe 01       	movw	r30, r28
    140a:	e9 5d       	subi	r30, 0xD9	; 217
    140c:	fe 4f       	sbci	r31, 0xFE	; 254
    140e:	91 83       	std	Z+1, r25	; 0x01
    1410:	80 83       	st	Z, r24
	}
	_delay_ms(500);
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Confirm Password");
	LCD_goToRowColumn(1,0);
	for(i=0;i<ArraySize;i++)
    1412:	de 01       	movw	r26, r28
    1414:	a3 59       	subi	r26, 0x93	; 147
    1416:	be 4f       	sbci	r27, 0xFE	; 254
    1418:	fe 01       	movw	r30, r28
    141a:	e3 59       	subi	r30, 0x93	; 147
    141c:	fe 4f       	sbci	r31, 0xFE	; 254
    141e:	80 81       	ld	r24, Z
    1420:	8f 5f       	subi	r24, 0xFF	; 255
    1422:	8c 93       	st	X, r24
    1424:	fe 01       	movw	r30, r28
    1426:	e3 59       	subi	r30, 0x93	; 147
    1428:	fe 4f       	sbci	r31, 0xFE	; 254
    142a:	80 81       	ld	r24, Z
    142c:	85 30       	cpi	r24, 0x05	; 5
    142e:	08 f4       	brcc	.+2      	; 0x1432 <main+0x8ec>
    1430:	60 ce       	rjmp	.-832    	; 0x10f2 <main+0x5ac>
    1432:	fe 01       	movw	r30, r28
    1434:	ed 5d       	subi	r30, 0xDD	; 221
    1436:	fe 4f       	sbci	r31, 0xFE	; 254
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	aa ef       	ldi	r26, 0xFA	; 250
    143e:	b3 e4       	ldi	r27, 0x43	; 67
    1440:	80 83       	st	Z, r24
    1442:	91 83       	std	Z+1, r25	; 0x01
    1444:	a2 83       	std	Z+2, r26	; 0x02
    1446:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1448:	8e 01       	movw	r16, r28
    144a:	01 5e       	subi	r16, 0xE1	; 225
    144c:	1e 4f       	sbci	r17, 0xFE	; 254
    144e:	fe 01       	movw	r30, r28
    1450:	ed 5d       	subi	r30, 0xDD	; 221
    1452:	fe 4f       	sbci	r31, 0xFE	; 254
    1454:	60 81       	ld	r22, Z
    1456:	71 81       	ldd	r23, Z+1	; 0x01
    1458:	82 81       	ldd	r24, Z+2	; 0x02
    145a:	93 81       	ldd	r25, Z+3	; 0x03
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	4a ef       	ldi	r20, 0xFA	; 250
    1462:	54 e4       	ldi	r21, 0x44	; 68
    1464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1468:	dc 01       	movw	r26, r24
    146a:	cb 01       	movw	r24, r22
    146c:	f8 01       	movw	r30, r16
    146e:	80 83       	st	Z, r24
    1470:	91 83       	std	Z+1, r25	; 0x01
    1472:	a2 83       	std	Z+2, r26	; 0x02
    1474:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1476:	fe 01       	movw	r30, r28
    1478:	e1 5e       	subi	r30, 0xE1	; 225
    147a:	fe 4f       	sbci	r31, 0xFE	; 254
    147c:	60 81       	ld	r22, Z
    147e:	71 81       	ldd	r23, Z+1	; 0x01
    1480:	82 81       	ldd	r24, Z+2	; 0x02
    1482:	93 81       	ldd	r25, Z+3	; 0x03
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	40 e8       	ldi	r20, 0x80	; 128
    148a:	5f e3       	ldi	r21, 0x3F	; 63
    148c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1490:	88 23       	and	r24, r24
    1492:	44 f4       	brge	.+16     	; 0x14a4 <main+0x95e>
		__ticks = 1;
    1494:	fe 01       	movw	r30, r28
    1496:	e3 5e       	subi	r30, 0xE3	; 227
    1498:	fe 4f       	sbci	r31, 0xFE	; 254
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	91 83       	std	Z+1, r25	; 0x01
    14a0:	80 83       	st	Z, r24
    14a2:	64 c0       	rjmp	.+200    	; 0x156c <main+0xa26>
	else if (__tmp > 65535)
    14a4:	fe 01       	movw	r30, r28
    14a6:	e1 5e       	subi	r30, 0xE1	; 225
    14a8:	fe 4f       	sbci	r31, 0xFE	; 254
    14aa:	60 81       	ld	r22, Z
    14ac:	71 81       	ldd	r23, Z+1	; 0x01
    14ae:	82 81       	ldd	r24, Z+2	; 0x02
    14b0:	93 81       	ldd	r25, Z+3	; 0x03
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	3f ef       	ldi	r19, 0xFF	; 255
    14b6:	4f e7       	ldi	r20, 0x7F	; 127
    14b8:	57 e4       	ldi	r21, 0x47	; 71
    14ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14be:	18 16       	cp	r1, r24
    14c0:	0c f0       	brlt	.+2      	; 0x14c4 <main+0x97e>
    14c2:	43 c0       	rjmp	.+134    	; 0x154a <main+0xa04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c4:	fe 01       	movw	r30, r28
    14c6:	ed 5d       	subi	r30, 0xDD	; 221
    14c8:	fe 4f       	sbci	r31, 0xFE	; 254
    14ca:	60 81       	ld	r22, Z
    14cc:	71 81       	ldd	r23, Z+1	; 0x01
    14ce:	82 81       	ldd	r24, Z+2	; 0x02
    14d0:	93 81       	ldd	r25, Z+3	; 0x03
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	40 e2       	ldi	r20, 0x20	; 32
    14d8:	51 e4       	ldi	r21, 0x41	; 65
    14da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	8e 01       	movw	r16, r28
    14e4:	03 5e       	subi	r16, 0xE3	; 227
    14e6:	1e 4f       	sbci	r17, 0xFE	; 254
    14e8:	bc 01       	movw	r22, r24
    14ea:	cd 01       	movw	r24, r26
    14ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	f8 01       	movw	r30, r16
    14f6:	91 83       	std	Z+1, r25	; 0x01
    14f8:	80 83       	st	Z, r24
    14fa:	1f c0       	rjmp	.+62     	; 0x153a <main+0x9f4>
    14fc:	fe 01       	movw	r30, r28
    14fe:	e5 5e       	subi	r30, 0xE5	; 229
    1500:	fe 4f       	sbci	r31, 0xFE	; 254
    1502:	88 ec       	ldi	r24, 0xC8	; 200
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	91 83       	std	Z+1, r25	; 0x01
    1508:	80 83       	st	Z, r24
    150a:	fe 01       	movw	r30, r28
    150c:	e5 5e       	subi	r30, 0xE5	; 229
    150e:	fe 4f       	sbci	r31, 0xFE	; 254
    1510:	80 81       	ld	r24, Z
    1512:	91 81       	ldd	r25, Z+1	; 0x01
    1514:	01 97       	sbiw	r24, 0x01	; 1
    1516:	f1 f7       	brne	.-4      	; 0x1514 <main+0x9ce>
    1518:	fe 01       	movw	r30, r28
    151a:	e5 5e       	subi	r30, 0xE5	; 229
    151c:	fe 4f       	sbci	r31, 0xFE	; 254
    151e:	91 83       	std	Z+1, r25	; 0x01
    1520:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1522:	de 01       	movw	r26, r28
    1524:	a3 5e       	subi	r26, 0xE3	; 227
    1526:	be 4f       	sbci	r27, 0xFE	; 254
    1528:	fe 01       	movw	r30, r28
    152a:	e3 5e       	subi	r30, 0xE3	; 227
    152c:	fe 4f       	sbci	r31, 0xFE	; 254
    152e:	80 81       	ld	r24, Z
    1530:	91 81       	ldd	r25, Z+1	; 0x01
    1532:	01 97       	sbiw	r24, 0x01	; 1
    1534:	11 96       	adiw	r26, 0x01	; 1
    1536:	9c 93       	st	X, r25
    1538:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    153a:	fe 01       	movw	r30, r28
    153c:	e3 5e       	subi	r30, 0xE3	; 227
    153e:	fe 4f       	sbci	r31, 0xFE	; 254
    1540:	80 81       	ld	r24, Z
    1542:	91 81       	ldd	r25, Z+1	; 0x01
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	d1 f6       	brne	.-76     	; 0x14fc <main+0x9b6>
    1548:	27 c0       	rjmp	.+78     	; 0x1598 <main+0xa52>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    154a:	8e 01       	movw	r16, r28
    154c:	03 5e       	subi	r16, 0xE3	; 227
    154e:	1e 4f       	sbci	r17, 0xFE	; 254
    1550:	fe 01       	movw	r30, r28
    1552:	e1 5e       	subi	r30, 0xE1	; 225
    1554:	fe 4f       	sbci	r31, 0xFE	; 254
    1556:	60 81       	ld	r22, Z
    1558:	71 81       	ldd	r23, Z+1	; 0x01
    155a:	82 81       	ldd	r24, Z+2	; 0x02
    155c:	93 81       	ldd	r25, Z+3	; 0x03
    155e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1562:	dc 01       	movw	r26, r24
    1564:	cb 01       	movw	r24, r22
    1566:	f8 01       	movw	r30, r16
    1568:	91 83       	std	Z+1, r25	; 0x01
    156a:	80 83       	st	Z, r24
    156c:	de 01       	movw	r26, r28
    156e:	a7 5e       	subi	r26, 0xE7	; 231
    1570:	be 4f       	sbci	r27, 0xFE	; 254
    1572:	fe 01       	movw	r30, r28
    1574:	e3 5e       	subi	r30, 0xE3	; 227
    1576:	fe 4f       	sbci	r31, 0xFE	; 254
    1578:	80 81       	ld	r24, Z
    157a:	91 81       	ldd	r25, Z+1	; 0x01
    157c:	8d 93       	st	X+, r24
    157e:	9c 93       	st	X, r25
    1580:	fe 01       	movw	r30, r28
    1582:	e7 5e       	subi	r30, 0xE7	; 231
    1584:	fe 4f       	sbci	r31, 0xFE	; 254
    1586:	80 81       	ld	r24, Z
    1588:	91 81       	ldd	r25, Z+1	; 0x01
    158a:	01 97       	sbiw	r24, 0x01	; 1
    158c:	f1 f7       	brne	.-4      	; 0x158a <main+0xa44>
    158e:	fe 01       	movw	r30, r28
    1590:	e7 5e       	subi	r30, 0xE7	; 231
    1592:	fe 4f       	sbci	r31, 0xFE	; 254
    1594:	91 83       	std	Z+1, r25	; 0x01
    1596:	80 83       	st	Z, r24
		UART_sendByte(passwordconfirmation[i]);
		}
		_delay_ms(500);
	}
	_delay_ms(500);
	LCD_clearScreen();
    1598:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"C.H.E.C.K.I.N.G");
    159c:	2e e7       	ldi	r18, 0x7E	; 126
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	60 e0       	ldi	r22, 0x00	; 0
    15a4:	a9 01       	movw	r20, r18
    15a6:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_displayStringRowColumn>
    15aa:	fe 01       	movw	r30, r28
    15ac:	eb 5e       	subi	r30, 0xEB	; 235
    15ae:	fe 4f       	sbci	r31, 0xFE	; 254
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	aa ef       	ldi	r26, 0xFA	; 250
    15b6:	b4 e4       	ldi	r27, 0x44	; 68
    15b8:	80 83       	st	Z, r24
    15ba:	91 83       	std	Z+1, r25	; 0x01
    15bc:	a2 83       	std	Z+2, r26	; 0x02
    15be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c0:	8e 01       	movw	r16, r28
    15c2:	0f 5e       	subi	r16, 0xEF	; 239
    15c4:	1e 4f       	sbci	r17, 0xFE	; 254
    15c6:	fe 01       	movw	r30, r28
    15c8:	eb 5e       	subi	r30, 0xEB	; 235
    15ca:	fe 4f       	sbci	r31, 0xFE	; 254
    15cc:	60 81       	ld	r22, Z
    15ce:	71 81       	ldd	r23, Z+1	; 0x01
    15d0:	82 81       	ldd	r24, Z+2	; 0x02
    15d2:	93 81       	ldd	r25, Z+3	; 0x03
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	4a ef       	ldi	r20, 0xFA	; 250
    15da:	54 e4       	ldi	r21, 0x44	; 68
    15dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	f8 01       	movw	r30, r16
    15e6:	80 83       	st	Z, r24
    15e8:	91 83       	std	Z+1, r25	; 0x01
    15ea:	a2 83       	std	Z+2, r26	; 0x02
    15ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15ee:	fe 01       	movw	r30, r28
    15f0:	ef 5e       	subi	r30, 0xEF	; 239
    15f2:	fe 4f       	sbci	r31, 0xFE	; 254
    15f4:	60 81       	ld	r22, Z
    15f6:	71 81       	ldd	r23, Z+1	; 0x01
    15f8:	82 81       	ldd	r24, Z+2	; 0x02
    15fa:	93 81       	ldd	r25, Z+3	; 0x03
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	40 e8       	ldi	r20, 0x80	; 128
    1602:	5f e3       	ldi	r21, 0x3F	; 63
    1604:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1608:	88 23       	and	r24, r24
    160a:	44 f4       	brge	.+16     	; 0x161c <main+0xad6>
		__ticks = 1;
    160c:	fe 01       	movw	r30, r28
    160e:	e1 5f       	subi	r30, 0xF1	; 241
    1610:	fe 4f       	sbci	r31, 0xFE	; 254
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	91 83       	std	Z+1, r25	; 0x01
    1618:	80 83       	st	Z, r24
    161a:	64 c0       	rjmp	.+200    	; 0x16e4 <main+0xb9e>
	else if (__tmp > 65535)
    161c:	fe 01       	movw	r30, r28
    161e:	ef 5e       	subi	r30, 0xEF	; 239
    1620:	fe 4f       	sbci	r31, 0xFE	; 254
    1622:	60 81       	ld	r22, Z
    1624:	71 81       	ldd	r23, Z+1	; 0x01
    1626:	82 81       	ldd	r24, Z+2	; 0x02
    1628:	93 81       	ldd	r25, Z+3	; 0x03
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	3f ef       	ldi	r19, 0xFF	; 255
    162e:	4f e7       	ldi	r20, 0x7F	; 127
    1630:	57 e4       	ldi	r21, 0x47	; 71
    1632:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1636:	18 16       	cp	r1, r24
    1638:	0c f0       	brlt	.+2      	; 0x163c <main+0xaf6>
    163a:	43 c0       	rjmp	.+134    	; 0x16c2 <main+0xb7c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    163c:	fe 01       	movw	r30, r28
    163e:	eb 5e       	subi	r30, 0xEB	; 235
    1640:	fe 4f       	sbci	r31, 0xFE	; 254
    1642:	60 81       	ld	r22, Z
    1644:	71 81       	ldd	r23, Z+1	; 0x01
    1646:	82 81       	ldd	r24, Z+2	; 0x02
    1648:	93 81       	ldd	r25, Z+3	; 0x03
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	40 e2       	ldi	r20, 0x20	; 32
    1650:	51 e4       	ldi	r21, 0x41	; 65
    1652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	8e 01       	movw	r16, r28
    165c:	01 5f       	subi	r16, 0xF1	; 241
    165e:	1e 4f       	sbci	r17, 0xFE	; 254
    1660:	bc 01       	movw	r22, r24
    1662:	cd 01       	movw	r24, r26
    1664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	f8 01       	movw	r30, r16
    166e:	91 83       	std	Z+1, r25	; 0x01
    1670:	80 83       	st	Z, r24
    1672:	1f c0       	rjmp	.+62     	; 0x16b2 <main+0xb6c>
    1674:	fe 01       	movw	r30, r28
    1676:	e3 5f       	subi	r30, 0xF3	; 243
    1678:	fe 4f       	sbci	r31, 0xFE	; 254
    167a:	88 ec       	ldi	r24, 0xC8	; 200
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	91 83       	std	Z+1, r25	; 0x01
    1680:	80 83       	st	Z, r24
    1682:	fe 01       	movw	r30, r28
    1684:	e3 5f       	subi	r30, 0xF3	; 243
    1686:	fe 4f       	sbci	r31, 0xFE	; 254
    1688:	80 81       	ld	r24, Z
    168a:	91 81       	ldd	r25, Z+1	; 0x01
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	f1 f7       	brne	.-4      	; 0x168c <main+0xb46>
    1690:	fe 01       	movw	r30, r28
    1692:	e3 5f       	subi	r30, 0xF3	; 243
    1694:	fe 4f       	sbci	r31, 0xFE	; 254
    1696:	91 83       	std	Z+1, r25	; 0x01
    1698:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    169a:	de 01       	movw	r26, r28
    169c:	a1 5f       	subi	r26, 0xF1	; 241
    169e:	be 4f       	sbci	r27, 0xFE	; 254
    16a0:	fe 01       	movw	r30, r28
    16a2:	e1 5f       	subi	r30, 0xF1	; 241
    16a4:	fe 4f       	sbci	r31, 0xFE	; 254
    16a6:	80 81       	ld	r24, Z
    16a8:	91 81       	ldd	r25, Z+1	; 0x01
    16aa:	01 97       	sbiw	r24, 0x01	; 1
    16ac:	11 96       	adiw	r26, 0x01	; 1
    16ae:	9c 93       	st	X, r25
    16b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b2:	fe 01       	movw	r30, r28
    16b4:	e1 5f       	subi	r30, 0xF1	; 241
    16b6:	fe 4f       	sbci	r31, 0xFE	; 254
    16b8:	80 81       	ld	r24, Z
    16ba:	91 81       	ldd	r25, Z+1	; 0x01
    16bc:	00 97       	sbiw	r24, 0x00	; 0
    16be:	d1 f6       	brne	.-76     	; 0x1674 <main+0xb2e>
    16c0:	5f c3       	rjmp	.+1726   	; 0x1d80 <main+0x123a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c2:	8e 01       	movw	r16, r28
    16c4:	01 5f       	subi	r16, 0xF1	; 241
    16c6:	1e 4f       	sbci	r17, 0xFE	; 254
    16c8:	fe 01       	movw	r30, r28
    16ca:	ef 5e       	subi	r30, 0xEF	; 239
    16cc:	fe 4f       	sbci	r31, 0xFE	; 254
    16ce:	60 81       	ld	r22, Z
    16d0:	71 81       	ldd	r23, Z+1	; 0x01
    16d2:	82 81       	ldd	r24, Z+2	; 0x02
    16d4:	93 81       	ldd	r25, Z+3	; 0x03
    16d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	f8 01       	movw	r30, r16
    16e0:	91 83       	std	Z+1, r25	; 0x01
    16e2:	80 83       	st	Z, r24
    16e4:	de 01       	movw	r26, r28
    16e6:	a5 5f       	subi	r26, 0xF5	; 245
    16e8:	be 4f       	sbci	r27, 0xFE	; 254
    16ea:	fe 01       	movw	r30, r28
    16ec:	e1 5f       	subi	r30, 0xF1	; 241
    16ee:	fe 4f       	sbci	r31, 0xFE	; 254
    16f0:	80 81       	ld	r24, Z
    16f2:	91 81       	ldd	r25, Z+1	; 0x01
    16f4:	11 96       	adiw	r26, 0x01	; 1
    16f6:	9c 93       	st	X, r25
    16f8:	8e 93       	st	-X, r24
    16fa:	fe 01       	movw	r30, r28
    16fc:	e5 5f       	subi	r30, 0xF5	; 245
    16fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1700:	80 81       	ld	r24, Z
    1702:	91 81       	ldd	r25, Z+1	; 0x01
    1704:	01 97       	sbiw	r24, 0x01	; 1
    1706:	f1 f7       	brne	.-4      	; 0x1704 <main+0xbbe>
    1708:	fe 01       	movw	r30, r28
    170a:	e5 5f       	subi	r30, 0xF5	; 245
    170c:	fe 4f       	sbci	r31, 0xFE	; 254
    170e:	91 83       	std	Z+1, r25	; 0x01
    1710:	80 83       	st	Z, r24
    1712:	36 c3       	rjmp	.+1644   	; 0x1d80 <main+0x123a>
	_delay_ms(2000);
	//_delay_ms(500);
	while(pass==0)
	{
		pass=passwordCompare();
    1714:	0e 94 99 18 	call	0x3132	; 0x3132 <passwordCompare>
    1718:	fe 01       	movw	r30, r28
    171a:	e2 59       	subi	r30, 0x92	; 146
    171c:	fe 4f       	sbci	r31, 0xFE	; 254
    171e:	80 83       	st	Z, r24
		if(pass==1)
    1720:	fe 01       	movw	r30, r28
    1722:	e2 59       	subi	r30, 0x92	; 146
    1724:	fe 4f       	sbci	r31, 0xFE	; 254
    1726:	80 81       	ld	r24, Z
    1728:	81 30       	cpi	r24, 0x01	; 1
    172a:	09 f4       	brne	.+2      	; 0x172e <main+0xbe8>
    172c:	30 c3       	rjmp	.+1632   	; 0x1d8e <main+0x1248>
		{
			break;
		}
		LCD_clearScreen();
    172e:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Try again");
    1732:	2e e8       	ldi	r18, 0x8E	; 142
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	60 e0       	ldi	r22, 0x00	; 0
    173a:	a9 01       	movw	r20, r18
    173c:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"No match");
    1740:	28 e9       	ldi	r18, 0x98	; 152
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	60 e0       	ldi	r22, 0x00	; 0
    1748:	a9 01       	movw	r20, r18
    174a:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_displayStringRowColumn>
    174e:	fe 01       	movw	r30, r28
    1750:	e9 5f       	subi	r30, 0xF9	; 249
    1752:	fe 4f       	sbci	r31, 0xFE	; 254
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	aa ef       	ldi	r26, 0xFA	; 250
    175a:	b4 e4       	ldi	r27, 0x44	; 68
    175c:	80 83       	st	Z, r24
    175e:	91 83       	std	Z+1, r25	; 0x01
    1760:	a2 83       	std	Z+2, r26	; 0x02
    1762:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1764:	8e 01       	movw	r16, r28
    1766:	0d 5f       	subi	r16, 0xFD	; 253
    1768:	1e 4f       	sbci	r17, 0xFE	; 254
    176a:	fe 01       	movw	r30, r28
    176c:	e9 5f       	subi	r30, 0xF9	; 249
    176e:	fe 4f       	sbci	r31, 0xFE	; 254
    1770:	60 81       	ld	r22, Z
    1772:	71 81       	ldd	r23, Z+1	; 0x01
    1774:	82 81       	ldd	r24, Z+2	; 0x02
    1776:	93 81       	ldd	r25, Z+3	; 0x03
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	4a ef       	ldi	r20, 0xFA	; 250
    177e:	54 e4       	ldi	r21, 0x44	; 68
    1780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	f8 01       	movw	r30, r16
    178a:	80 83       	st	Z, r24
    178c:	91 83       	std	Z+1, r25	; 0x01
    178e:	a2 83       	std	Z+2, r26	; 0x02
    1790:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1792:	fe 01       	movw	r30, r28
    1794:	ed 5f       	subi	r30, 0xFD	; 253
    1796:	fe 4f       	sbci	r31, 0xFE	; 254
    1798:	60 81       	ld	r22, Z
    179a:	71 81       	ldd	r23, Z+1	; 0x01
    179c:	82 81       	ldd	r24, Z+2	; 0x02
    179e:	93 81       	ldd	r25, Z+3	; 0x03
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	40 e8       	ldi	r20, 0x80	; 128
    17a6:	5f e3       	ldi	r21, 0x3F	; 63
    17a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ac:	88 23       	and	r24, r24
    17ae:	44 f4       	brge	.+16     	; 0x17c0 <main+0xc7a>
		__ticks = 1;
    17b0:	fe 01       	movw	r30, r28
    17b2:	ef 5f       	subi	r30, 0xFF	; 255
    17b4:	fe 4f       	sbci	r31, 0xFE	; 254
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	91 83       	std	Z+1, r25	; 0x01
    17bc:	80 83       	st	Z, r24
    17be:	64 c0       	rjmp	.+200    	; 0x1888 <main+0xd42>
	else if (__tmp > 65535)
    17c0:	fe 01       	movw	r30, r28
    17c2:	ed 5f       	subi	r30, 0xFD	; 253
    17c4:	fe 4f       	sbci	r31, 0xFE	; 254
    17c6:	60 81       	ld	r22, Z
    17c8:	71 81       	ldd	r23, Z+1	; 0x01
    17ca:	82 81       	ldd	r24, Z+2	; 0x02
    17cc:	93 81       	ldd	r25, Z+3	; 0x03
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	3f ef       	ldi	r19, 0xFF	; 255
    17d2:	4f e7       	ldi	r20, 0x7F	; 127
    17d4:	57 e4       	ldi	r21, 0x47	; 71
    17d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17da:	18 16       	cp	r1, r24
    17dc:	0c f0       	brlt	.+2      	; 0x17e0 <main+0xc9a>
    17de:	43 c0       	rjmp	.+134    	; 0x1866 <main+0xd20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e0:	fe 01       	movw	r30, r28
    17e2:	e9 5f       	subi	r30, 0xF9	; 249
    17e4:	fe 4f       	sbci	r31, 0xFE	; 254
    17e6:	60 81       	ld	r22, Z
    17e8:	71 81       	ldd	r23, Z+1	; 0x01
    17ea:	82 81       	ldd	r24, Z+2	; 0x02
    17ec:	93 81       	ldd	r25, Z+3	; 0x03
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	40 e2       	ldi	r20, 0x20	; 32
    17f4:	51 e4       	ldi	r21, 0x41	; 65
    17f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	8e 01       	movw	r16, r28
    1800:	0f 5f       	subi	r16, 0xFF	; 255
    1802:	1e 4f       	sbci	r17, 0xFE	; 254
    1804:	bc 01       	movw	r22, r24
    1806:	cd 01       	movw	r24, r26
    1808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	f8 01       	movw	r30, r16
    1812:	91 83       	std	Z+1, r25	; 0x01
    1814:	80 83       	st	Z, r24
    1816:	1f c0       	rjmp	.+62     	; 0x1856 <main+0xd10>
    1818:	fe 01       	movw	r30, r28
    181a:	e1 50       	subi	r30, 0x01	; 1
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	88 ec       	ldi	r24, 0xC8	; 200
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	91 83       	std	Z+1, r25	; 0x01
    1824:	80 83       	st	Z, r24
    1826:	fe 01       	movw	r30, r28
    1828:	e1 50       	subi	r30, 0x01	; 1
    182a:	ff 4f       	sbci	r31, 0xFF	; 255
    182c:	80 81       	ld	r24, Z
    182e:	91 81       	ldd	r25, Z+1	; 0x01
    1830:	01 97       	sbiw	r24, 0x01	; 1
    1832:	f1 f7       	brne	.-4      	; 0x1830 <main+0xcea>
    1834:	fe 01       	movw	r30, r28
    1836:	e1 50       	subi	r30, 0x01	; 1
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	91 83       	std	Z+1, r25	; 0x01
    183c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    183e:	de 01       	movw	r26, r28
    1840:	af 5f       	subi	r26, 0xFF	; 255
    1842:	be 4f       	sbci	r27, 0xFE	; 254
    1844:	fe 01       	movw	r30, r28
    1846:	ef 5f       	subi	r30, 0xFF	; 255
    1848:	fe 4f       	sbci	r31, 0xFE	; 254
    184a:	80 81       	ld	r24, Z
    184c:	91 81       	ldd	r25, Z+1	; 0x01
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	11 96       	adiw	r26, 0x01	; 1
    1852:	9c 93       	st	X, r25
    1854:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1856:	fe 01       	movw	r30, r28
    1858:	ef 5f       	subi	r30, 0xFF	; 255
    185a:	fe 4f       	sbci	r31, 0xFE	; 254
    185c:	80 81       	ld	r24, Z
    185e:	91 81       	ldd	r25, Z+1	; 0x01
    1860:	00 97       	sbiw	r24, 0x00	; 0
    1862:	d1 f6       	brne	.-76     	; 0x1818 <main+0xcd2>
    1864:	27 c0       	rjmp	.+78     	; 0x18b4 <main+0xd6e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1866:	8e 01       	movw	r16, r28
    1868:	0f 5f       	subi	r16, 0xFF	; 255
    186a:	1e 4f       	sbci	r17, 0xFE	; 254
    186c:	fe 01       	movw	r30, r28
    186e:	ed 5f       	subi	r30, 0xFD	; 253
    1870:	fe 4f       	sbci	r31, 0xFE	; 254
    1872:	60 81       	ld	r22, Z
    1874:	71 81       	ldd	r23, Z+1	; 0x01
    1876:	82 81       	ldd	r24, Z+2	; 0x02
    1878:	93 81       	ldd	r25, Z+3	; 0x03
    187a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	f8 01       	movw	r30, r16
    1884:	91 83       	std	Z+1, r25	; 0x01
    1886:	80 83       	st	Z, r24
    1888:	de 01       	movw	r26, r28
    188a:	a3 50       	subi	r26, 0x03	; 3
    188c:	bf 4f       	sbci	r27, 0xFF	; 255
    188e:	fe 01       	movw	r30, r28
    1890:	ef 5f       	subi	r30, 0xFF	; 255
    1892:	fe 4f       	sbci	r31, 0xFE	; 254
    1894:	80 81       	ld	r24, Z
    1896:	91 81       	ldd	r25, Z+1	; 0x01
    1898:	8d 93       	st	X+, r24
    189a:	9c 93       	st	X, r25
    189c:	fe 01       	movw	r30, r28
    189e:	e3 50       	subi	r30, 0x03	; 3
    18a0:	ff 4f       	sbci	r31, 0xFF	; 255
    18a2:	80 81       	ld	r24, Z
    18a4:	91 81       	ldd	r25, Z+1	; 0x01
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	f1 f7       	brne	.-4      	; 0x18a6 <main+0xd60>
    18aa:	fe 01       	movw	r30, r28
    18ac:	e3 50       	subi	r30, 0x03	; 3
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	91 83       	std	Z+1, r25	; 0x01
    18b2:	80 83       	st	Z, r24
		_delay_ms(2000);
		LCD_clearScreen();
    18b4:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Confirm password");
    18b8:	21 ea       	ldi	r18, 0xA1	; 161
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	60 e0       	ldi	r22, 0x00	; 0
    18c0:	a9 01       	movw	r20, r18
    18c2:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_displayStringRowColumn>
		LCD_goToRowColumn(1,0);
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	60 e0       	ldi	r22, 0x00	; 0
    18ca:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <LCD_goToRowColumn>
		for(i=0;i<ArraySize;i++)
    18ce:	fe 01       	movw	r30, r28
    18d0:	e3 59       	subi	r30, 0x93	; 147
    18d2:	fe 4f       	sbci	r31, 0xFE	; 254
    18d4:	10 82       	st	Z, r1
    18d6:	99 c1       	rjmp	.+818    	; 0x1c0a <main+0x10c4>
		{
			key2 = KeyPad_getPressedKey(); /* get the pressed key number */
    18d8:	0e 94 c1 18 	call	0x3182	; 0x3182 <KeyPad_getPressedKey>
    18dc:	fe 01       	movw	r30, r28
    18de:	e1 59       	subi	r30, 0x91	; 145
    18e0:	fe 4f       	sbci	r31, 0xFE	; 254
    18e2:	80 83       	st	Z, r24
    18e4:	fe 01       	movw	r30, r28
    18e6:	e7 50       	subi	r30, 0x07	; 7
    18e8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	a8 ec       	ldi	r26, 0xC8	; 200
    18f0:	b2 e4       	ldi	r27, 0x42	; 66
    18f2:	80 83       	st	Z, r24
    18f4:	91 83       	std	Z+1, r25	; 0x01
    18f6:	a2 83       	std	Z+2, r26	; 0x02
    18f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18fa:	8e 01       	movw	r16, r28
    18fc:	0b 50       	subi	r16, 0x0B	; 11
    18fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1900:	fe 01       	movw	r30, r28
    1902:	e7 50       	subi	r30, 0x07	; 7
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	60 81       	ld	r22, Z
    1908:	71 81       	ldd	r23, Z+1	; 0x01
    190a:	82 81       	ldd	r24, Z+2	; 0x02
    190c:	93 81       	ldd	r25, Z+3	; 0x03
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	4a ef       	ldi	r20, 0xFA	; 250
    1914:	54 e4       	ldi	r21, 0x44	; 68
    1916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	f8 01       	movw	r30, r16
    1920:	80 83       	st	Z, r24
    1922:	91 83       	std	Z+1, r25	; 0x01
    1924:	a2 83       	std	Z+2, r26	; 0x02
    1926:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1928:	fe 01       	movw	r30, r28
    192a:	eb 50       	subi	r30, 0x0B	; 11
    192c:	ff 4f       	sbci	r31, 0xFF	; 255
    192e:	60 81       	ld	r22, Z
    1930:	71 81       	ldd	r23, Z+1	; 0x01
    1932:	82 81       	ldd	r24, Z+2	; 0x02
    1934:	93 81       	ldd	r25, Z+3	; 0x03
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	40 e8       	ldi	r20, 0x80	; 128
    193c:	5f e3       	ldi	r21, 0x3F	; 63
    193e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1942:	88 23       	and	r24, r24
    1944:	44 f4       	brge	.+16     	; 0x1956 <main+0xe10>
		__ticks = 1;
    1946:	fe 01       	movw	r30, r28
    1948:	ed 50       	subi	r30, 0x0D	; 13
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	91 83       	std	Z+1, r25	; 0x01
    1952:	80 83       	st	Z, r24
    1954:	64 c0       	rjmp	.+200    	; 0x1a1e <main+0xed8>
	else if (__tmp > 65535)
    1956:	fe 01       	movw	r30, r28
    1958:	eb 50       	subi	r30, 0x0B	; 11
    195a:	ff 4f       	sbci	r31, 0xFF	; 255
    195c:	60 81       	ld	r22, Z
    195e:	71 81       	ldd	r23, Z+1	; 0x01
    1960:	82 81       	ldd	r24, Z+2	; 0x02
    1962:	93 81       	ldd	r25, Z+3	; 0x03
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	3f ef       	ldi	r19, 0xFF	; 255
    1968:	4f e7       	ldi	r20, 0x7F	; 127
    196a:	57 e4       	ldi	r21, 0x47	; 71
    196c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1970:	18 16       	cp	r1, r24
    1972:	0c f0       	brlt	.+2      	; 0x1976 <main+0xe30>
    1974:	43 c0       	rjmp	.+134    	; 0x19fc <main+0xeb6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1976:	fe 01       	movw	r30, r28
    1978:	e7 50       	subi	r30, 0x07	; 7
    197a:	ff 4f       	sbci	r31, 0xFF	; 255
    197c:	60 81       	ld	r22, Z
    197e:	71 81       	ldd	r23, Z+1	; 0x01
    1980:	82 81       	ldd	r24, Z+2	; 0x02
    1982:	93 81       	ldd	r25, Z+3	; 0x03
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e2       	ldi	r20, 0x20	; 32
    198a:	51 e4       	ldi	r21, 0x41	; 65
    198c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	8e 01       	movw	r16, r28
    1996:	0d 50       	subi	r16, 0x0D	; 13
    1998:	1f 4f       	sbci	r17, 0xFF	; 255
    199a:	bc 01       	movw	r22, r24
    199c:	cd 01       	movw	r24, r26
    199e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	f8 01       	movw	r30, r16
    19a8:	91 83       	std	Z+1, r25	; 0x01
    19aa:	80 83       	st	Z, r24
    19ac:	1f c0       	rjmp	.+62     	; 0x19ec <main+0xea6>
    19ae:	fe 01       	movw	r30, r28
    19b0:	ef 50       	subi	r30, 0x0F	; 15
    19b2:	ff 4f       	sbci	r31, 0xFF	; 255
    19b4:	88 ec       	ldi	r24, 0xC8	; 200
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	91 83       	std	Z+1, r25	; 0x01
    19ba:	80 83       	st	Z, r24
    19bc:	fe 01       	movw	r30, r28
    19be:	ef 50       	subi	r30, 0x0F	; 15
    19c0:	ff 4f       	sbci	r31, 0xFF	; 255
    19c2:	80 81       	ld	r24, Z
    19c4:	91 81       	ldd	r25, Z+1	; 0x01
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	f1 f7       	brne	.-4      	; 0x19c6 <main+0xe80>
    19ca:	fe 01       	movw	r30, r28
    19cc:	ef 50       	subi	r30, 0x0F	; 15
    19ce:	ff 4f       	sbci	r31, 0xFF	; 255
    19d0:	91 83       	std	Z+1, r25	; 0x01
    19d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d4:	de 01       	movw	r26, r28
    19d6:	ad 50       	subi	r26, 0x0D	; 13
    19d8:	bf 4f       	sbci	r27, 0xFF	; 255
    19da:	fe 01       	movw	r30, r28
    19dc:	ed 50       	subi	r30, 0x0D	; 13
    19de:	ff 4f       	sbci	r31, 0xFF	; 255
    19e0:	80 81       	ld	r24, Z
    19e2:	91 81       	ldd	r25, Z+1	; 0x01
    19e4:	01 97       	sbiw	r24, 0x01	; 1
    19e6:	11 96       	adiw	r26, 0x01	; 1
    19e8:	9c 93       	st	X, r25
    19ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ec:	fe 01       	movw	r30, r28
    19ee:	ed 50       	subi	r30, 0x0D	; 13
    19f0:	ff 4f       	sbci	r31, 0xFF	; 255
    19f2:	80 81       	ld	r24, Z
    19f4:	91 81       	ldd	r25, Z+1	; 0x01
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	d1 f6       	brne	.-76     	; 0x19ae <main+0xe68>
    19fa:	28 c0       	rjmp	.+80     	; 0x1a4c <main+0xf06>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fc:	8e 01       	movw	r16, r28
    19fe:	0d 50       	subi	r16, 0x0D	; 13
    1a00:	1f 4f       	sbci	r17, 0xFF	; 255
    1a02:	fe 01       	movw	r30, r28
    1a04:	eb 50       	subi	r30, 0x0B	; 11
    1a06:	ff 4f       	sbci	r31, 0xFF	; 255
    1a08:	60 81       	ld	r22, Z
    1a0a:	71 81       	ldd	r23, Z+1	; 0x01
    1a0c:	82 81       	ldd	r24, Z+2	; 0x02
    1a0e:	93 81       	ldd	r25, Z+3	; 0x03
    1a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	f8 01       	movw	r30, r16
    1a1a:	91 83       	std	Z+1, r25	; 0x01
    1a1c:	80 83       	st	Z, r24
    1a1e:	de 01       	movw	r26, r28
    1a20:	a1 51       	subi	r26, 0x11	; 17
    1a22:	bf 4f       	sbci	r27, 0xFF	; 255
    1a24:	fe 01       	movw	r30, r28
    1a26:	ed 50       	subi	r30, 0x0D	; 13
    1a28:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2a:	80 81       	ld	r24, Z
    1a2c:	91 81       	ldd	r25, Z+1	; 0x01
    1a2e:	11 96       	adiw	r26, 0x01	; 1
    1a30:	9c 93       	st	X, r25
    1a32:	8e 93       	st	-X, r24
    1a34:	fe 01       	movw	r30, r28
    1a36:	e1 51       	subi	r30, 0x11	; 17
    1a38:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3a:	80 81       	ld	r24, Z
    1a3c:	91 81       	ldd	r25, Z+1	; 0x01
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	f1 f7       	brne	.-4      	; 0x1a3e <main+0xef8>
    1a42:	fe 01       	movw	r30, r28
    1a44:	e1 51       	subi	r30, 0x11	; 17
    1a46:	ff 4f       	sbci	r31, 0xFF	; 255
    1a48:	91 83       	std	Z+1, r25	; 0x01
    1a4a:	80 83       	st	Z, r24
			_delay_ms(100);
			if((key2 <= 9) && (key2 >= 0))
    1a4c:	fe 01       	movw	r30, r28
    1a4e:	e1 59       	subi	r30, 0x91	; 145
    1a50:	fe 4f       	sbci	r31, 0xFE	; 254
    1a52:	80 81       	ld	r24, Z
    1a54:	8a 30       	cpi	r24, 0x0A	; 10
    1a56:	e8 f4       	brcc	.+58     	; 0x1a92 <main+0xf4c>
			{passwordconfirmation[i]=key2;
    1a58:	fe 01       	movw	r30, r28
    1a5a:	e3 59       	subi	r30, 0x93	; 147
    1a5c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a5e:	80 81       	ld	r24, Z
    1a60:	88 2f       	mov	r24, r24
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	dc 01       	movw	r26, r24
    1a66:	a3 50       	subi	r26, 0x03	; 3
    1a68:	bf 4f       	sbci	r27, 0xFF	; 255
    1a6a:	fe 01       	movw	r30, r28
    1a6c:	e1 59       	subi	r30, 0x91	; 145
    1a6e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a70:	80 81       	ld	r24, Z
    1a72:	8c 93       	st	X, r24
			LCD_displayCharacter('*');
    1a74:	8a e2       	ldi	r24, 0x2A	; 42
    1a76:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <LCD_displayCharacter>
			UART_sendByte(passwordconfirmation[i]);
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	e3 59       	subi	r30, 0x93	; 147
    1a7e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a80:	80 81       	ld	r24, Z
    1a82:	88 2f       	mov	r24, r24
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	fc 01       	movw	r30, r24
    1a88:	e3 50       	subi	r30, 0x03	; 3
    1a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8c:	80 81       	ld	r24, Z
    1a8e:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <UART_sendByte>
    1a92:	fe 01       	movw	r30, r28
    1a94:	e5 51       	subi	r30, 0x15	; 21
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	aa ef       	ldi	r26, 0xFA	; 250
    1a9e:	b3 e4       	ldi	r27, 0x43	; 67
    1aa0:	80 83       	st	Z, r24
    1aa2:	91 83       	std	Z+1, r25	; 0x01
    1aa4:	a2 83       	std	Z+2, r26	; 0x02
    1aa6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa8:	8e 01       	movw	r16, r28
    1aaa:	09 51       	subi	r16, 0x19	; 25
    1aac:	1f 4f       	sbci	r17, 0xFF	; 255
    1aae:	fe 01       	movw	r30, r28
    1ab0:	e5 51       	subi	r30, 0x15	; 21
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	60 81       	ld	r22, Z
    1ab6:	71 81       	ldd	r23, Z+1	; 0x01
    1ab8:	82 81       	ldd	r24, Z+2	; 0x02
    1aba:	93 81       	ldd	r25, Z+3	; 0x03
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	4a ef       	ldi	r20, 0xFA	; 250
    1ac2:	54 e4       	ldi	r21, 0x44	; 68
    1ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	f8 01       	movw	r30, r16
    1ace:	80 83       	st	Z, r24
    1ad0:	91 83       	std	Z+1, r25	; 0x01
    1ad2:	a2 83       	std	Z+2, r26	; 0x02
    1ad4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	e9 51       	subi	r30, 0x19	; 25
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	60 81       	ld	r22, Z
    1ade:	71 81       	ldd	r23, Z+1	; 0x01
    1ae0:	82 81       	ldd	r24, Z+2	; 0x02
    1ae2:	93 81       	ldd	r25, Z+3	; 0x03
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	40 e8       	ldi	r20, 0x80	; 128
    1aea:	5f e3       	ldi	r21, 0x3F	; 63
    1aec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1af0:	88 23       	and	r24, r24
    1af2:	44 f4       	brge	.+16     	; 0x1b04 <main+0xfbe>
		__ticks = 1;
    1af4:	fe 01       	movw	r30, r28
    1af6:	eb 51       	subi	r30, 0x1B	; 27
    1af8:	ff 4f       	sbci	r31, 0xFF	; 255
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	91 83       	std	Z+1, r25	; 0x01
    1b00:	80 83       	st	Z, r24
    1b02:	64 c0       	rjmp	.+200    	; 0x1bcc <main+0x1086>
	else if (__tmp > 65535)
    1b04:	fe 01       	movw	r30, r28
    1b06:	e9 51       	subi	r30, 0x19	; 25
    1b08:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0a:	60 81       	ld	r22, Z
    1b0c:	71 81       	ldd	r23, Z+1	; 0x01
    1b0e:	82 81       	ldd	r24, Z+2	; 0x02
    1b10:	93 81       	ldd	r25, Z+3	; 0x03
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	3f ef       	ldi	r19, 0xFF	; 255
    1b16:	4f e7       	ldi	r20, 0x7F	; 127
    1b18:	57 e4       	ldi	r21, 0x47	; 71
    1b1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b1e:	18 16       	cp	r1, r24
    1b20:	0c f0       	brlt	.+2      	; 0x1b24 <main+0xfde>
    1b22:	43 c0       	rjmp	.+134    	; 0x1baa <main+0x1064>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b24:	fe 01       	movw	r30, r28
    1b26:	e5 51       	subi	r30, 0x15	; 21
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	60 81       	ld	r22, Z
    1b2c:	71 81       	ldd	r23, Z+1	; 0x01
    1b2e:	82 81       	ldd	r24, Z+2	; 0x02
    1b30:	93 81       	ldd	r25, Z+3	; 0x03
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	40 e2       	ldi	r20, 0x20	; 32
    1b38:	51 e4       	ldi	r21, 0x41	; 65
    1b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	8e 01       	movw	r16, r28
    1b44:	0b 51       	subi	r16, 0x1B	; 27
    1b46:	1f 4f       	sbci	r17, 0xFF	; 255
    1b48:	bc 01       	movw	r22, r24
    1b4a:	cd 01       	movw	r24, r26
    1b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	f8 01       	movw	r30, r16
    1b56:	91 83       	std	Z+1, r25	; 0x01
    1b58:	80 83       	st	Z, r24
    1b5a:	1f c0       	rjmp	.+62     	; 0x1b9a <main+0x1054>
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	ed 51       	subi	r30, 0x1D	; 29
    1b60:	ff 4f       	sbci	r31, 0xFF	; 255
    1b62:	88 ec       	ldi	r24, 0xC8	; 200
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	91 83       	std	Z+1, r25	; 0x01
    1b68:	80 83       	st	Z, r24
    1b6a:	fe 01       	movw	r30, r28
    1b6c:	ed 51       	subi	r30, 0x1D	; 29
    1b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b70:	80 81       	ld	r24, Z
    1b72:	91 81       	ldd	r25, Z+1	; 0x01
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	f1 f7       	brne	.-4      	; 0x1b74 <main+0x102e>
    1b78:	fe 01       	movw	r30, r28
    1b7a:	ed 51       	subi	r30, 0x1D	; 29
    1b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7e:	91 83       	std	Z+1, r25	; 0x01
    1b80:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b82:	de 01       	movw	r26, r28
    1b84:	ab 51       	subi	r26, 0x1B	; 27
    1b86:	bf 4f       	sbci	r27, 0xFF	; 255
    1b88:	fe 01       	movw	r30, r28
    1b8a:	eb 51       	subi	r30, 0x1B	; 27
    1b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8e:	80 81       	ld	r24, Z
    1b90:	91 81       	ldd	r25, Z+1	; 0x01
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	11 96       	adiw	r26, 0x01	; 1
    1b96:	9c 93       	st	X, r25
    1b98:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	eb 51       	subi	r30, 0x1B	; 27
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	80 81       	ld	r24, Z
    1ba2:	91 81       	ldd	r25, Z+1	; 0x01
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	d1 f6       	brne	.-76     	; 0x1b5c <main+0x1016>
    1ba8:	27 c0       	rjmp	.+78     	; 0x1bf8 <main+0x10b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1baa:	8e 01       	movw	r16, r28
    1bac:	0b 51       	subi	r16, 0x1B	; 27
    1bae:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb0:	fe 01       	movw	r30, r28
    1bb2:	e9 51       	subi	r30, 0x19	; 25
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	60 81       	ld	r22, Z
    1bb8:	71 81       	ldd	r23, Z+1	; 0x01
    1bba:	82 81       	ldd	r24, Z+2	; 0x02
    1bbc:	93 81       	ldd	r25, Z+3	; 0x03
    1bbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	f8 01       	movw	r30, r16
    1bc8:	91 83       	std	Z+1, r25	; 0x01
    1bca:	80 83       	st	Z, r24
    1bcc:	de 01       	movw	r26, r28
    1bce:	af 51       	subi	r26, 0x1F	; 31
    1bd0:	bf 4f       	sbci	r27, 0xFF	; 255
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	eb 51       	subi	r30, 0x1B	; 27
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	80 81       	ld	r24, Z
    1bda:	91 81       	ldd	r25, Z+1	; 0x01
    1bdc:	8d 93       	st	X+, r24
    1bde:	9c 93       	st	X, r25
    1be0:	fe 01       	movw	r30, r28
    1be2:	ef 51       	subi	r30, 0x1F	; 31
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	80 81       	ld	r24, Z
    1be8:	91 81       	ldd	r25, Z+1	; 0x01
    1bea:	01 97       	sbiw	r24, 0x01	; 1
    1bec:	f1 f7       	brne	.-4      	; 0x1bea <main+0x10a4>
    1bee:	fe 01       	movw	r30, r28
    1bf0:	ef 51       	subi	r30, 0x1F	; 31
    1bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf4:	91 83       	std	Z+1, r25	; 0x01
    1bf6:	80 83       	st	Z, r24
		LCD_displayStringRowColumn(1,0,"No match");
		_delay_ms(2000);
		LCD_clearScreen();
		LCD_displayStringRowColumn(0,0,"Confirm password");
		LCD_goToRowColumn(1,0);
		for(i=0;i<ArraySize;i++)
    1bf8:	de 01       	movw	r26, r28
    1bfa:	a3 59       	subi	r26, 0x93	; 147
    1bfc:	be 4f       	sbci	r27, 0xFE	; 254
    1bfe:	fe 01       	movw	r30, r28
    1c00:	e3 59       	subi	r30, 0x93	; 147
    1c02:	fe 4f       	sbci	r31, 0xFE	; 254
    1c04:	80 81       	ld	r24, Z
    1c06:	8f 5f       	subi	r24, 0xFF	; 255
    1c08:	8c 93       	st	X, r24
    1c0a:	fe 01       	movw	r30, r28
    1c0c:	e3 59       	subi	r30, 0x93	; 147
    1c0e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c10:	80 81       	ld	r24, Z
    1c12:	85 30       	cpi	r24, 0x05	; 5
    1c14:	08 f4       	brcc	.+2      	; 0x1c18 <main+0x10d2>
    1c16:	60 ce       	rjmp	.-832    	; 0x18d8 <main+0xd92>
    1c18:	fe 01       	movw	r30, r28
    1c1a:	e3 52       	subi	r30, 0x23	; 35
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	aa ef       	ldi	r26, 0xFA	; 250
    1c24:	b3 e4       	ldi	r27, 0x43	; 67
    1c26:	80 83       	st	Z, r24
    1c28:	91 83       	std	Z+1, r25	; 0x01
    1c2a:	a2 83       	std	Z+2, r26	; 0x02
    1c2c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c2e:	8e 01       	movw	r16, r28
    1c30:	07 52       	subi	r16, 0x27	; 39
    1c32:	1f 4f       	sbci	r17, 0xFF	; 255
    1c34:	fe 01       	movw	r30, r28
    1c36:	e3 52       	subi	r30, 0x23	; 35
    1c38:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3a:	60 81       	ld	r22, Z
    1c3c:	71 81       	ldd	r23, Z+1	; 0x01
    1c3e:	82 81       	ldd	r24, Z+2	; 0x02
    1c40:	93 81       	ldd	r25, Z+3	; 0x03
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	4a ef       	ldi	r20, 0xFA	; 250
    1c48:	54 e4       	ldi	r21, 0x44	; 68
    1c4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	f8 01       	movw	r30, r16
    1c54:	80 83       	st	Z, r24
    1c56:	91 83       	std	Z+1, r25	; 0x01
    1c58:	a2 83       	std	Z+2, r26	; 0x02
    1c5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c5c:	fe 01       	movw	r30, r28
    1c5e:	e7 52       	subi	r30, 0x27	; 39
    1c60:	ff 4f       	sbci	r31, 0xFF	; 255
    1c62:	60 81       	ld	r22, Z
    1c64:	71 81       	ldd	r23, Z+1	; 0x01
    1c66:	82 81       	ldd	r24, Z+2	; 0x02
    1c68:	93 81       	ldd	r25, Z+3	; 0x03
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	40 e8       	ldi	r20, 0x80	; 128
    1c70:	5f e3       	ldi	r21, 0x3F	; 63
    1c72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c76:	88 23       	and	r24, r24
    1c78:	44 f4       	brge	.+16     	; 0x1c8a <main+0x1144>
		__ticks = 1;
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	e9 52       	subi	r30, 0x29	; 41
    1c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	91 83       	std	Z+1, r25	; 0x01
    1c86:	80 83       	st	Z, r24
    1c88:	64 c0       	rjmp	.+200    	; 0x1d52 <main+0x120c>
	else if (__tmp > 65535)
    1c8a:	fe 01       	movw	r30, r28
    1c8c:	e7 52       	subi	r30, 0x27	; 39
    1c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c90:	60 81       	ld	r22, Z
    1c92:	71 81       	ldd	r23, Z+1	; 0x01
    1c94:	82 81       	ldd	r24, Z+2	; 0x02
    1c96:	93 81       	ldd	r25, Z+3	; 0x03
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	3f ef       	ldi	r19, 0xFF	; 255
    1c9c:	4f e7       	ldi	r20, 0x7F	; 127
    1c9e:	57 e4       	ldi	r21, 0x47	; 71
    1ca0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ca4:	18 16       	cp	r1, r24
    1ca6:	0c f0       	brlt	.+2      	; 0x1caa <main+0x1164>
    1ca8:	43 c0       	rjmp	.+134    	; 0x1d30 <main+0x11ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1caa:	fe 01       	movw	r30, r28
    1cac:	e3 52       	subi	r30, 0x23	; 35
    1cae:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb0:	60 81       	ld	r22, Z
    1cb2:	71 81       	ldd	r23, Z+1	; 0x01
    1cb4:	82 81       	ldd	r24, Z+2	; 0x02
    1cb6:	93 81       	ldd	r25, Z+3	; 0x03
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	40 e2       	ldi	r20, 0x20	; 32
    1cbe:	51 e4       	ldi	r21, 0x41	; 65
    1cc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	8e 01       	movw	r16, r28
    1cca:	09 52       	subi	r16, 0x29	; 41
    1ccc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cce:	bc 01       	movw	r22, r24
    1cd0:	cd 01       	movw	r24, r26
    1cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	f8 01       	movw	r30, r16
    1cdc:	91 83       	std	Z+1, r25	; 0x01
    1cde:	80 83       	st	Z, r24
    1ce0:	1f c0       	rjmp	.+62     	; 0x1d20 <main+0x11da>
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	eb 52       	subi	r30, 0x2B	; 43
    1ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce8:	88 ec       	ldi	r24, 0xC8	; 200
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	91 83       	std	Z+1, r25	; 0x01
    1cee:	80 83       	st	Z, r24
    1cf0:	fe 01       	movw	r30, r28
    1cf2:	eb 52       	subi	r30, 0x2B	; 43
    1cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf6:	80 81       	ld	r24, Z
    1cf8:	91 81       	ldd	r25, Z+1	; 0x01
    1cfa:	01 97       	sbiw	r24, 0x01	; 1
    1cfc:	f1 f7       	brne	.-4      	; 0x1cfa <main+0x11b4>
    1cfe:	fe 01       	movw	r30, r28
    1d00:	eb 52       	subi	r30, 0x2B	; 43
    1d02:	ff 4f       	sbci	r31, 0xFF	; 255
    1d04:	91 83       	std	Z+1, r25	; 0x01
    1d06:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d08:	de 01       	movw	r26, r28
    1d0a:	a9 52       	subi	r26, 0x29	; 41
    1d0c:	bf 4f       	sbci	r27, 0xFF	; 255
    1d0e:	fe 01       	movw	r30, r28
    1d10:	e9 52       	subi	r30, 0x29	; 41
    1d12:	ff 4f       	sbci	r31, 0xFF	; 255
    1d14:	80 81       	ld	r24, Z
    1d16:	91 81       	ldd	r25, Z+1	; 0x01
    1d18:	01 97       	sbiw	r24, 0x01	; 1
    1d1a:	11 96       	adiw	r26, 0x01	; 1
    1d1c:	9c 93       	st	X, r25
    1d1e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d20:	fe 01       	movw	r30, r28
    1d22:	e9 52       	subi	r30, 0x29	; 41
    1d24:	ff 4f       	sbci	r31, 0xFF	; 255
    1d26:	80 81       	ld	r24, Z
    1d28:	91 81       	ldd	r25, Z+1	; 0x01
    1d2a:	00 97       	sbiw	r24, 0x00	; 0
    1d2c:	d1 f6       	brne	.-76     	; 0x1ce2 <main+0x119c>
    1d2e:	28 c0       	rjmp	.+80     	; 0x1d80 <main+0x123a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d30:	8e 01       	movw	r16, r28
    1d32:	09 52       	subi	r16, 0x29	; 41
    1d34:	1f 4f       	sbci	r17, 0xFF	; 255
    1d36:	fe 01       	movw	r30, r28
    1d38:	e7 52       	subi	r30, 0x27	; 39
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	60 81       	ld	r22, Z
    1d3e:	71 81       	ldd	r23, Z+1	; 0x01
    1d40:	82 81       	ldd	r24, Z+2	; 0x02
    1d42:	93 81       	ldd	r25, Z+3	; 0x03
    1d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	f8 01       	movw	r30, r16
    1d4e:	91 83       	std	Z+1, r25	; 0x01
    1d50:	80 83       	st	Z, r24
    1d52:	de 01       	movw	r26, r28
    1d54:	ad 52       	subi	r26, 0x2D	; 45
    1d56:	bf 4f       	sbci	r27, 0xFF	; 255
    1d58:	fe 01       	movw	r30, r28
    1d5a:	e9 52       	subi	r30, 0x29	; 41
    1d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5e:	80 81       	ld	r24, Z
    1d60:	91 81       	ldd	r25, Z+1	; 0x01
    1d62:	11 96       	adiw	r26, 0x01	; 1
    1d64:	9c 93       	st	X, r25
    1d66:	8e 93       	st	-X, r24
    1d68:	fe 01       	movw	r30, r28
    1d6a:	ed 52       	subi	r30, 0x2D	; 45
    1d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6e:	80 81       	ld	r24, Z
    1d70:	91 81       	ldd	r25, Z+1	; 0x01
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	f1 f7       	brne	.-4      	; 0x1d72 <main+0x122c>
    1d76:	fe 01       	movw	r30, r28
    1d78:	ed 52       	subi	r30, 0x2D	; 45
    1d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7c:	91 83       	std	Z+1, r25	; 0x01
    1d7e:	80 83       	st	Z, r24
	_delay_ms(500);
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"C.H.E.C.K.I.N.G");
	_delay_ms(2000);
	//_delay_ms(500);
	while(pass==0)
    1d80:	fe 01       	movw	r30, r28
    1d82:	e2 59       	subi	r30, 0x92	; 146
    1d84:	fe 4f       	sbci	r31, 0xFE	; 254
    1d86:	80 81       	ld	r24, Z
    1d88:	88 23       	and	r24, r24
    1d8a:	09 f4       	brne	.+2      	; 0x1d8e <main+0x1248>
    1d8c:	c3 cc       	rjmp	.-1658   	; 0x1714 <main+0xbce>
			}
			_delay_ms(500);
		}
		_delay_ms(500);
	}
	LCD_clearScreen();
    1d8e:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <LCD_clearScreen>
	UART_sendByte(M2_READY); // MC2 is ready
    1d92:	80 e1       	ldi	r24, 0x10	; 16
    1d94:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <UART_sendByte>
	UART_receivestring(string); // receive the string
    1d98:	ce 01       	movw	r24, r28
    1d9a:	8f 58       	subi	r24, 0x8F	; 143
    1d9c:	9e 4f       	sbci	r25, 0xFE	; 254
    1d9e:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <UART_receivestring>
	LCD_displayString(string); // display the string on LCD
    1da2:	ce 01       	movw	r24, r28
    1da4:	8f 58       	subi	r24, 0x8F	; 143
    1da6:	9e 4f       	sbci	r25, 0xFE	; 254
    1da8:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <LCD_displayString>
    1dac:	fe 01       	movw	r30, r28
    1dae:	e1 53       	subi	r30, 0x31	; 49
    1db0:	ff 4f       	sbci	r31, 0xFF	; 255
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	90 e8       	ldi	r25, 0x80	; 128
    1db6:	ab e3       	ldi	r26, 0x3B	; 59
    1db8:	b5 e4       	ldi	r27, 0x45	; 69
    1dba:	80 83       	st	Z, r24
    1dbc:	91 83       	std	Z+1, r25	; 0x01
    1dbe:	a2 83       	std	Z+2, r26	; 0x02
    1dc0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc2:	8e 01       	movw	r16, r28
    1dc4:	05 53       	subi	r16, 0x35	; 53
    1dc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc8:	fe 01       	movw	r30, r28
    1dca:	e1 53       	subi	r30, 0x31	; 49
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	60 81       	ld	r22, Z
    1dd0:	71 81       	ldd	r23, Z+1	; 0x01
    1dd2:	82 81       	ldd	r24, Z+2	; 0x02
    1dd4:	93 81       	ldd	r25, Z+3	; 0x03
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	4a ef       	ldi	r20, 0xFA	; 250
    1ddc:	54 e4       	ldi	r21, 0x44	; 68
    1dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	f8 01       	movw	r30, r16
    1de8:	80 83       	st	Z, r24
    1dea:	91 83       	std	Z+1, r25	; 0x01
    1dec:	a2 83       	std	Z+2, r26	; 0x02
    1dee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1df0:	fe 01       	movw	r30, r28
    1df2:	e5 53       	subi	r30, 0x35	; 53
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	60 81       	ld	r22, Z
    1df8:	71 81       	ldd	r23, Z+1	; 0x01
    1dfa:	82 81       	ldd	r24, Z+2	; 0x02
    1dfc:	93 81       	ldd	r25, Z+3	; 0x03
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	40 e8       	ldi	r20, 0x80	; 128
    1e04:	5f e3       	ldi	r21, 0x3F	; 63
    1e06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e0a:	88 23       	and	r24, r24
    1e0c:	44 f4       	brge	.+16     	; 0x1e1e <main+0x12d8>
		__ticks = 1;
    1e0e:	fe 01       	movw	r30, r28
    1e10:	e7 53       	subi	r30, 0x37	; 55
    1e12:	ff 4f       	sbci	r31, 0xFF	; 255
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	91 83       	std	Z+1, r25	; 0x01
    1e1a:	80 83       	st	Z, r24
    1e1c:	64 c0       	rjmp	.+200    	; 0x1ee6 <main+0x13a0>
	else if (__tmp > 65535)
    1e1e:	fe 01       	movw	r30, r28
    1e20:	e5 53       	subi	r30, 0x35	; 53
    1e22:	ff 4f       	sbci	r31, 0xFF	; 255
    1e24:	60 81       	ld	r22, Z
    1e26:	71 81       	ldd	r23, Z+1	; 0x01
    1e28:	82 81       	ldd	r24, Z+2	; 0x02
    1e2a:	93 81       	ldd	r25, Z+3	; 0x03
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	3f ef       	ldi	r19, 0xFF	; 255
    1e30:	4f e7       	ldi	r20, 0x7F	; 127
    1e32:	57 e4       	ldi	r21, 0x47	; 71
    1e34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e38:	18 16       	cp	r1, r24
    1e3a:	0c f0       	brlt	.+2      	; 0x1e3e <main+0x12f8>
    1e3c:	43 c0       	rjmp	.+134    	; 0x1ec4 <main+0x137e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e3e:	fe 01       	movw	r30, r28
    1e40:	e1 53       	subi	r30, 0x31	; 49
    1e42:	ff 4f       	sbci	r31, 0xFF	; 255
    1e44:	60 81       	ld	r22, Z
    1e46:	71 81       	ldd	r23, Z+1	; 0x01
    1e48:	82 81       	ldd	r24, Z+2	; 0x02
    1e4a:	93 81       	ldd	r25, Z+3	; 0x03
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	40 e2       	ldi	r20, 0x20	; 32
    1e52:	51 e4       	ldi	r21, 0x41	; 65
    1e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	8e 01       	movw	r16, r28
    1e5e:	07 53       	subi	r16, 0x37	; 55
    1e60:	1f 4f       	sbci	r17, 0xFF	; 255
    1e62:	bc 01       	movw	r22, r24
    1e64:	cd 01       	movw	r24, r26
    1e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	f8 01       	movw	r30, r16
    1e70:	91 83       	std	Z+1, r25	; 0x01
    1e72:	80 83       	st	Z, r24
    1e74:	1f c0       	rjmp	.+62     	; 0x1eb4 <main+0x136e>
    1e76:	fe 01       	movw	r30, r28
    1e78:	e9 53       	subi	r30, 0x39	; 57
    1e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7c:	88 ec       	ldi	r24, 0xC8	; 200
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	91 83       	std	Z+1, r25	; 0x01
    1e82:	80 83       	st	Z, r24
    1e84:	fe 01       	movw	r30, r28
    1e86:	e9 53       	subi	r30, 0x39	; 57
    1e88:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8a:	80 81       	ld	r24, Z
    1e8c:	91 81       	ldd	r25, Z+1	; 0x01
    1e8e:	01 97       	sbiw	r24, 0x01	; 1
    1e90:	f1 f7       	brne	.-4      	; 0x1e8e <main+0x1348>
    1e92:	fe 01       	movw	r30, r28
    1e94:	e9 53       	subi	r30, 0x39	; 57
    1e96:	ff 4f       	sbci	r31, 0xFF	; 255
    1e98:	91 83       	std	Z+1, r25	; 0x01
    1e9a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e9c:	de 01       	movw	r26, r28
    1e9e:	a7 53       	subi	r26, 0x37	; 55
    1ea0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	e7 53       	subi	r30, 0x37	; 55
    1ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea8:	80 81       	ld	r24, Z
    1eaa:	91 81       	ldd	r25, Z+1	; 0x01
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	11 96       	adiw	r26, 0x01	; 1
    1eb0:	9c 93       	st	X, r25
    1eb2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb4:	fe 01       	movw	r30, r28
    1eb6:	e7 53       	subi	r30, 0x37	; 55
    1eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eba:	80 81       	ld	r24, Z
    1ebc:	91 81       	ldd	r25, Z+1	; 0x01
    1ebe:	00 97       	sbiw	r24, 0x00	; 0
    1ec0:	d1 f6       	brne	.-76     	; 0x1e76 <main+0x1330>
    1ec2:	27 c0       	rjmp	.+78     	; 0x1f12 <main+0x13cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec4:	8e 01       	movw	r16, r28
    1ec6:	07 53       	subi	r16, 0x37	; 55
    1ec8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eca:	fe 01       	movw	r30, r28
    1ecc:	e5 53       	subi	r30, 0x35	; 53
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	60 81       	ld	r22, Z
    1ed2:	71 81       	ldd	r23, Z+1	; 0x01
    1ed4:	82 81       	ldd	r24, Z+2	; 0x02
    1ed6:	93 81       	ldd	r25, Z+3	; 0x03
    1ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	f8 01       	movw	r30, r16
    1ee2:	91 83       	std	Z+1, r25	; 0x01
    1ee4:	80 83       	st	Z, r24
    1ee6:	de 01       	movw	r26, r28
    1ee8:	ab 53       	subi	r26, 0x3B	; 59
    1eea:	bf 4f       	sbci	r27, 0xFF	; 255
    1eec:	fe 01       	movw	r30, r28
    1eee:	e7 53       	subi	r30, 0x37	; 55
    1ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef2:	80 81       	ld	r24, Z
    1ef4:	91 81       	ldd	r25, Z+1	; 0x01
    1ef6:	8d 93       	st	X+, r24
    1ef8:	9c 93       	st	X, r25
    1efa:	fe 01       	movw	r30, r28
    1efc:	eb 53       	subi	r30, 0x3B	; 59
    1efe:	ff 4f       	sbci	r31, 0xFF	; 255
    1f00:	80 81       	ld	r24, Z
    1f02:	91 81       	ldd	r25, Z+1	; 0x01
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	f1 f7       	brne	.-4      	; 0x1f04 <main+0x13be>
    1f08:	fe 01       	movw	r30, r28
    1f0a:	eb 53       	subi	r30, 0x3B	; 59
    1f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0e:	91 83       	std	Z+1, r25	; 0x01
    1f10:	80 83       	st	Z, r24
	_delay_ms(3000);
	while(1)
	{
		LCD_clearScreen();
    1f12:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"+ Change Pass");
    1f16:	22 eb       	ldi	r18, 0xB2	; 178
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	60 e0       	ldi	r22, 0x00	; 0
    1f1e:	a9 01       	movw	r20, r18
    1f20:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"- Open Door");
    1f24:	20 ec       	ldi	r18, 0xC0	; 192
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	60 e0       	ldi	r22, 0x00	; 0
    1f2c:	a9 01       	movw	r20, r18
    1f2e:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_displayStringRowColumn>
		key2 = KeyPad_getPressedKey(); /* get the pressed key number */
    1f32:	0e 94 c1 18 	call	0x3182	; 0x3182 <KeyPad_getPressedKey>
    1f36:	fe 01       	movw	r30, r28
    1f38:	e1 59       	subi	r30, 0x91	; 145
    1f3a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f3c:	80 83       	st	Z, r24
    1f3e:	fe 01       	movw	r30, r28
    1f40:	ef 53       	subi	r30, 0x3F	; 63
    1f42:	ff 4f       	sbci	r31, 0xFF	; 255
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	aa ef       	ldi	r26, 0xFA	; 250
    1f4a:	b3 e4       	ldi	r27, 0x43	; 67
    1f4c:	80 83       	st	Z, r24
    1f4e:	91 83       	std	Z+1, r25	; 0x01
    1f50:	a2 83       	std	Z+2, r26	; 0x02
    1f52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f54:	8e 01       	movw	r16, r28
    1f56:	03 54       	subi	r16, 0x43	; 67
    1f58:	1f 4f       	sbci	r17, 0xFF	; 255
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	ef 53       	subi	r30, 0x3F	; 63
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	60 81       	ld	r22, Z
    1f62:	71 81       	ldd	r23, Z+1	; 0x01
    1f64:	82 81       	ldd	r24, Z+2	; 0x02
    1f66:	93 81       	ldd	r25, Z+3	; 0x03
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	4a ef       	ldi	r20, 0xFA	; 250
    1f6e:	54 e4       	ldi	r21, 0x44	; 68
    1f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	f8 01       	movw	r30, r16
    1f7a:	80 83       	st	Z, r24
    1f7c:	91 83       	std	Z+1, r25	; 0x01
    1f7e:	a2 83       	std	Z+2, r26	; 0x02
    1f80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f82:	fe 01       	movw	r30, r28
    1f84:	e3 54       	subi	r30, 0x43	; 67
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	60 81       	ld	r22, Z
    1f8a:	71 81       	ldd	r23, Z+1	; 0x01
    1f8c:	82 81       	ldd	r24, Z+2	; 0x02
    1f8e:	93 81       	ldd	r25, Z+3	; 0x03
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e8       	ldi	r20, 0x80	; 128
    1f96:	5f e3       	ldi	r21, 0x3F	; 63
    1f98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f9c:	88 23       	and	r24, r24
    1f9e:	44 f4       	brge	.+16     	; 0x1fb0 <main+0x146a>
		__ticks = 1;
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	e5 54       	subi	r30, 0x45	; 69
    1fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	91 83       	std	Z+1, r25	; 0x01
    1fac:	80 83       	st	Z, r24
    1fae:	64 c0       	rjmp	.+200    	; 0x2078 <main+0x1532>
	else if (__tmp > 65535)
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	e3 54       	subi	r30, 0x43	; 67
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	60 81       	ld	r22, Z
    1fb8:	71 81       	ldd	r23, Z+1	; 0x01
    1fba:	82 81       	ldd	r24, Z+2	; 0x02
    1fbc:	93 81       	ldd	r25, Z+3	; 0x03
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	3f ef       	ldi	r19, 0xFF	; 255
    1fc2:	4f e7       	ldi	r20, 0x7F	; 127
    1fc4:	57 e4       	ldi	r21, 0x47	; 71
    1fc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fca:	18 16       	cp	r1, r24
    1fcc:	0c f0       	brlt	.+2      	; 0x1fd0 <main+0x148a>
    1fce:	43 c0       	rjmp	.+134    	; 0x2056 <main+0x1510>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd0:	fe 01       	movw	r30, r28
    1fd2:	ef 53       	subi	r30, 0x3F	; 63
    1fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd6:	60 81       	ld	r22, Z
    1fd8:	71 81       	ldd	r23, Z+1	; 0x01
    1fda:	82 81       	ldd	r24, Z+2	; 0x02
    1fdc:	93 81       	ldd	r25, Z+3	; 0x03
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	40 e2       	ldi	r20, 0x20	; 32
    1fe4:	51 e4       	ldi	r21, 0x41	; 65
    1fe6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	8e 01       	movw	r16, r28
    1ff0:	05 54       	subi	r16, 0x45	; 69
    1ff2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff4:	bc 01       	movw	r22, r24
    1ff6:	cd 01       	movw	r24, r26
    1ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	f8 01       	movw	r30, r16
    2002:	91 83       	std	Z+1, r25	; 0x01
    2004:	80 83       	st	Z, r24
    2006:	1f c0       	rjmp	.+62     	; 0x2046 <main+0x1500>
    2008:	fe 01       	movw	r30, r28
    200a:	e7 54       	subi	r30, 0x47	; 71
    200c:	ff 4f       	sbci	r31, 0xFF	; 255
    200e:	88 ec       	ldi	r24, 0xC8	; 200
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	91 83       	std	Z+1, r25	; 0x01
    2014:	80 83       	st	Z, r24
    2016:	fe 01       	movw	r30, r28
    2018:	e7 54       	subi	r30, 0x47	; 71
    201a:	ff 4f       	sbci	r31, 0xFF	; 255
    201c:	80 81       	ld	r24, Z
    201e:	91 81       	ldd	r25, Z+1	; 0x01
    2020:	01 97       	sbiw	r24, 0x01	; 1
    2022:	f1 f7       	brne	.-4      	; 0x2020 <main+0x14da>
    2024:	fe 01       	movw	r30, r28
    2026:	e7 54       	subi	r30, 0x47	; 71
    2028:	ff 4f       	sbci	r31, 0xFF	; 255
    202a:	91 83       	std	Z+1, r25	; 0x01
    202c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    202e:	de 01       	movw	r26, r28
    2030:	a5 54       	subi	r26, 0x45	; 69
    2032:	bf 4f       	sbci	r27, 0xFF	; 255
    2034:	fe 01       	movw	r30, r28
    2036:	e5 54       	subi	r30, 0x45	; 69
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	80 81       	ld	r24, Z
    203c:	91 81       	ldd	r25, Z+1	; 0x01
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	11 96       	adiw	r26, 0x01	; 1
    2042:	9c 93       	st	X, r25
    2044:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2046:	fe 01       	movw	r30, r28
    2048:	e5 54       	subi	r30, 0x45	; 69
    204a:	ff 4f       	sbci	r31, 0xFF	; 255
    204c:	80 81       	ld	r24, Z
    204e:	91 81       	ldd	r25, Z+1	; 0x01
    2050:	00 97       	sbiw	r24, 0x00	; 0
    2052:	d1 f6       	brne	.-76     	; 0x2008 <main+0x14c2>
    2054:	28 c0       	rjmp	.+80     	; 0x20a6 <main+0x1560>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2056:	8e 01       	movw	r16, r28
    2058:	05 54       	subi	r16, 0x45	; 69
    205a:	1f 4f       	sbci	r17, 0xFF	; 255
    205c:	fe 01       	movw	r30, r28
    205e:	e3 54       	subi	r30, 0x43	; 67
    2060:	ff 4f       	sbci	r31, 0xFF	; 255
    2062:	60 81       	ld	r22, Z
    2064:	71 81       	ldd	r23, Z+1	; 0x01
    2066:	82 81       	ldd	r24, Z+2	; 0x02
    2068:	93 81       	ldd	r25, Z+3	; 0x03
    206a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	f8 01       	movw	r30, r16
    2074:	91 83       	std	Z+1, r25	; 0x01
    2076:	80 83       	st	Z, r24
    2078:	de 01       	movw	r26, r28
    207a:	a9 54       	subi	r26, 0x49	; 73
    207c:	bf 4f       	sbci	r27, 0xFF	; 255
    207e:	fe 01       	movw	r30, r28
    2080:	e5 54       	subi	r30, 0x45	; 69
    2082:	ff 4f       	sbci	r31, 0xFF	; 255
    2084:	80 81       	ld	r24, Z
    2086:	91 81       	ldd	r25, Z+1	; 0x01
    2088:	11 96       	adiw	r26, 0x01	; 1
    208a:	9c 93       	st	X, r25
    208c:	8e 93       	st	-X, r24
    208e:	fe 01       	movw	r30, r28
    2090:	e9 54       	subi	r30, 0x49	; 73
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	80 81       	ld	r24, Z
    2096:	91 81       	ldd	r25, Z+1	; 0x01
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	f1 f7       	brne	.-4      	; 0x2098 <main+0x1552>
    209c:	fe 01       	movw	r30, r28
    209e:	e9 54       	subi	r30, 0x49	; 73
    20a0:	ff 4f       	sbci	r31, 0xFF	; 255
    20a2:	91 83       	std	Z+1, r25	; 0x01
    20a4:	80 83       	st	Z, r24
		_delay_ms(500);
		switch(key2)
    20a6:	fe 01       	movw	r30, r28
    20a8:	e1 59       	subi	r30, 0x91	; 145
    20aa:	fe 4f       	sbci	r31, 0xFE	; 254
    20ac:	80 81       	ld	r24, Z
    20ae:	28 2f       	mov	r18, r24
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	c9 58       	subi	r28, 0x89	; 137
    20b4:	de 4f       	sbci	r29, 0xFE	; 254
    20b6:	39 83       	std	Y+1, r19	; 0x01
    20b8:	28 83       	st	Y, r18
    20ba:	c7 57       	subi	r28, 0x77	; 119
    20bc:	d1 40       	sbci	r29, 0x01	; 1
    20be:	c9 58       	subi	r28, 0x89	; 137
    20c0:	de 4f       	sbci	r29, 0xFE	; 254
    20c2:	88 81       	ld	r24, Y
    20c4:	99 81       	ldd	r25, Y+1	; 0x01
    20c6:	c7 57       	subi	r28, 0x77	; 119
    20c8:	d1 40       	sbci	r29, 0x01	; 1
    20ca:	8b 32       	cpi	r24, 0x2B	; 43
    20cc:	91 05       	cpc	r25, r1
    20ce:	59 f0       	breq	.+22     	; 0x20e6 <main+0x15a0>
    20d0:	c9 58       	subi	r28, 0x89	; 137
    20d2:	de 4f       	sbci	r29, 0xFE	; 254
    20d4:	e8 81       	ld	r30, Y
    20d6:	f9 81       	ldd	r31, Y+1	; 0x01
    20d8:	c7 57       	subi	r28, 0x77	; 119
    20da:	d1 40       	sbci	r29, 0x01	; 1
    20dc:	ed 32       	cpi	r30, 0x2D	; 45
    20de:	f1 05       	cpc	r31, r1
    20e0:	09 f4       	brne	.+2      	; 0x20e4 <main+0x159e>
    20e2:	b7 c0       	rjmp	.+366    	; 0x2252 <main+0x170c>
    20e4:	16 cf       	rjmp	.-468    	; 0x1f12 <main+0x13cc>
    20e6:	fe 01       	movw	r30, r28
    20e8:	ed 54       	subi	r30, 0x4D	; 77
    20ea:	ff 4f       	sbci	r31, 0xFF	; 255
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	aa e7       	ldi	r26, 0x7A	; 122
    20f2:	b4 e4       	ldi	r27, 0x44	; 68
    20f4:	80 83       	st	Z, r24
    20f6:	91 83       	std	Z+1, r25	; 0x01
    20f8:	a2 83       	std	Z+2, r26	; 0x02
    20fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20fc:	8e 01       	movw	r16, r28
    20fe:	01 55       	subi	r16, 0x51	; 81
    2100:	1f 4f       	sbci	r17, 0xFF	; 255
    2102:	fe 01       	movw	r30, r28
    2104:	ed 54       	subi	r30, 0x4D	; 77
    2106:	ff 4f       	sbci	r31, 0xFF	; 255
    2108:	60 81       	ld	r22, Z
    210a:	71 81       	ldd	r23, Z+1	; 0x01
    210c:	82 81       	ldd	r24, Z+2	; 0x02
    210e:	93 81       	ldd	r25, Z+3	; 0x03
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	4a ef       	ldi	r20, 0xFA	; 250
    2116:	54 e4       	ldi	r21, 0x44	; 68
    2118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	f8 01       	movw	r30, r16
    2122:	80 83       	st	Z, r24
    2124:	91 83       	std	Z+1, r25	; 0x01
    2126:	a2 83       	std	Z+2, r26	; 0x02
    2128:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    212a:	fe 01       	movw	r30, r28
    212c:	e1 55       	subi	r30, 0x51	; 81
    212e:	ff 4f       	sbci	r31, 0xFF	; 255
    2130:	60 81       	ld	r22, Z
    2132:	71 81       	ldd	r23, Z+1	; 0x01
    2134:	82 81       	ldd	r24, Z+2	; 0x02
    2136:	93 81       	ldd	r25, Z+3	; 0x03
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	40 e8       	ldi	r20, 0x80	; 128
    213e:	5f e3       	ldi	r21, 0x3F	; 63
    2140:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2144:	88 23       	and	r24, r24
    2146:	44 f4       	brge	.+16     	; 0x2158 <main+0x1612>
		__ticks = 1;
    2148:	fe 01       	movw	r30, r28
    214a:	e3 55       	subi	r30, 0x53	; 83
    214c:	ff 4f       	sbci	r31, 0xFF	; 255
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	91 83       	std	Z+1, r25	; 0x01
    2154:	80 83       	st	Z, r24
    2156:	64 c0       	rjmp	.+200    	; 0x2220 <main+0x16da>
	else if (__tmp > 65535)
    2158:	fe 01       	movw	r30, r28
    215a:	e1 55       	subi	r30, 0x51	; 81
    215c:	ff 4f       	sbci	r31, 0xFF	; 255
    215e:	60 81       	ld	r22, Z
    2160:	71 81       	ldd	r23, Z+1	; 0x01
    2162:	82 81       	ldd	r24, Z+2	; 0x02
    2164:	93 81       	ldd	r25, Z+3	; 0x03
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	3f ef       	ldi	r19, 0xFF	; 255
    216a:	4f e7       	ldi	r20, 0x7F	; 127
    216c:	57 e4       	ldi	r21, 0x47	; 71
    216e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2172:	18 16       	cp	r1, r24
    2174:	0c f0       	brlt	.+2      	; 0x2178 <main+0x1632>
    2176:	43 c0       	rjmp	.+134    	; 0x21fe <main+0x16b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2178:	fe 01       	movw	r30, r28
    217a:	ed 54       	subi	r30, 0x4D	; 77
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	60 81       	ld	r22, Z
    2180:	71 81       	ldd	r23, Z+1	; 0x01
    2182:	82 81       	ldd	r24, Z+2	; 0x02
    2184:	93 81       	ldd	r25, Z+3	; 0x03
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	40 e2       	ldi	r20, 0x20	; 32
    218c:	51 e4       	ldi	r21, 0x41	; 65
    218e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	8e 01       	movw	r16, r28
    2198:	03 55       	subi	r16, 0x53	; 83
    219a:	1f 4f       	sbci	r17, 0xFF	; 255
    219c:	bc 01       	movw	r22, r24
    219e:	cd 01       	movw	r24, r26
    21a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	f8 01       	movw	r30, r16
    21aa:	91 83       	std	Z+1, r25	; 0x01
    21ac:	80 83       	st	Z, r24
    21ae:	1f c0       	rjmp	.+62     	; 0x21ee <main+0x16a8>
    21b0:	fe 01       	movw	r30, r28
    21b2:	e5 55       	subi	r30, 0x55	; 85
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	88 ec       	ldi	r24, 0xC8	; 200
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	91 83       	std	Z+1, r25	; 0x01
    21bc:	80 83       	st	Z, r24
    21be:	fe 01       	movw	r30, r28
    21c0:	e5 55       	subi	r30, 0x55	; 85
    21c2:	ff 4f       	sbci	r31, 0xFF	; 255
    21c4:	80 81       	ld	r24, Z
    21c6:	91 81       	ldd	r25, Z+1	; 0x01
    21c8:	01 97       	sbiw	r24, 0x01	; 1
    21ca:	f1 f7       	brne	.-4      	; 0x21c8 <main+0x1682>
    21cc:	fe 01       	movw	r30, r28
    21ce:	e5 55       	subi	r30, 0x55	; 85
    21d0:	ff 4f       	sbci	r31, 0xFF	; 255
    21d2:	91 83       	std	Z+1, r25	; 0x01
    21d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d6:	de 01       	movw	r26, r28
    21d8:	a3 55       	subi	r26, 0x53	; 83
    21da:	bf 4f       	sbci	r27, 0xFF	; 255
    21dc:	fe 01       	movw	r30, r28
    21de:	e3 55       	subi	r30, 0x53	; 83
    21e0:	ff 4f       	sbci	r31, 0xFF	; 255
    21e2:	80 81       	ld	r24, Z
    21e4:	91 81       	ldd	r25, Z+1	; 0x01
    21e6:	01 97       	sbiw	r24, 0x01	; 1
    21e8:	11 96       	adiw	r26, 0x01	; 1
    21ea:	9c 93       	st	X, r25
    21ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ee:	fe 01       	movw	r30, r28
    21f0:	e3 55       	subi	r30, 0x53	; 83
    21f2:	ff 4f       	sbci	r31, 0xFF	; 255
    21f4:	80 81       	ld	r24, Z
    21f6:	91 81       	ldd	r25, Z+1	; 0x01
    21f8:	00 97       	sbiw	r24, 0x00	; 0
    21fa:	d1 f6       	brne	.-76     	; 0x21b0 <main+0x166a>
    21fc:	27 c0       	rjmp	.+78     	; 0x224c <main+0x1706>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21fe:	8e 01       	movw	r16, r28
    2200:	03 55       	subi	r16, 0x53	; 83
    2202:	1f 4f       	sbci	r17, 0xFF	; 255
    2204:	fe 01       	movw	r30, r28
    2206:	e1 55       	subi	r30, 0x51	; 81
    2208:	ff 4f       	sbci	r31, 0xFF	; 255
    220a:	60 81       	ld	r22, Z
    220c:	71 81       	ldd	r23, Z+1	; 0x01
    220e:	82 81       	ldd	r24, Z+2	; 0x02
    2210:	93 81       	ldd	r25, Z+3	; 0x03
    2212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	f8 01       	movw	r30, r16
    221c:	91 83       	std	Z+1, r25	; 0x01
    221e:	80 83       	st	Z, r24
    2220:	de 01       	movw	r26, r28
    2222:	a7 55       	subi	r26, 0x57	; 87
    2224:	bf 4f       	sbci	r27, 0xFF	; 255
    2226:	fe 01       	movw	r30, r28
    2228:	e3 55       	subi	r30, 0x53	; 83
    222a:	ff 4f       	sbci	r31, 0xFF	; 255
    222c:	80 81       	ld	r24, Z
    222e:	91 81       	ldd	r25, Z+1	; 0x01
    2230:	8d 93       	st	X+, r24
    2232:	9c 93       	st	X, r25
    2234:	fe 01       	movw	r30, r28
    2236:	e7 55       	subi	r30, 0x57	; 87
    2238:	ff 4f       	sbci	r31, 0xFF	; 255
    223a:	80 81       	ld	r24, Z
    223c:	91 81       	ldd	r25, Z+1	; 0x01
    223e:	01 97       	sbiw	r24, 0x01	; 1
    2240:	f1 f7       	brne	.-4      	; 0x223e <main+0x16f8>
    2242:	fe 01       	movw	r30, r28
    2244:	e7 55       	subi	r30, 0x57	; 87
    2246:	ff 4f       	sbci	r31, 0xFF	; 255
    2248:	91 83       	std	Z+1, r25	; 0x01
    224a:	80 83       	st	Z, r24
		{
		case CHANGE_PASSWORD:
			_delay_ms(1000);
			LCD_clearScreen();
    224c:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <LCD_clearScreen>
    2250:	60 ce       	rjmp	.-832    	; 0x1f12 <main+0x13cc>
			//			passwordToConfirmFlag= 0;
			break;
		case OPEN_DOOR:
			LCD_clearScreen();
    2252:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"You choose - ");
    2256:	2c ec       	ldi	r18, 0xCC	; 204
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	60 e0       	ldi	r22, 0x00	; 0
    225e:	a9 01       	movw	r20, r18
    2260:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_displayStringRowColumn>
    2264:	fe 01       	movw	r30, r28
    2266:	eb 55       	subi	r30, 0x5B	; 91
    2268:	ff 4f       	sbci	r31, 0xFF	; 255
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	aa ef       	ldi	r26, 0xFA	; 250
    2270:	b4 e4       	ldi	r27, 0x44	; 68
    2272:	80 83       	st	Z, r24
    2274:	91 83       	std	Z+1, r25	; 0x01
    2276:	a2 83       	std	Z+2, r26	; 0x02
    2278:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    227a:	8e 01       	movw	r16, r28
    227c:	0f 55       	subi	r16, 0x5F	; 95
    227e:	1f 4f       	sbci	r17, 0xFF	; 255
    2280:	fe 01       	movw	r30, r28
    2282:	eb 55       	subi	r30, 0x5B	; 91
    2284:	ff 4f       	sbci	r31, 0xFF	; 255
    2286:	60 81       	ld	r22, Z
    2288:	71 81       	ldd	r23, Z+1	; 0x01
    228a:	82 81       	ldd	r24, Z+2	; 0x02
    228c:	93 81       	ldd	r25, Z+3	; 0x03
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	4a ef       	ldi	r20, 0xFA	; 250
    2294:	54 e4       	ldi	r21, 0x44	; 68
    2296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	f8 01       	movw	r30, r16
    22a0:	80 83       	st	Z, r24
    22a2:	91 83       	std	Z+1, r25	; 0x01
    22a4:	a2 83       	std	Z+2, r26	; 0x02
    22a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22a8:	fe 01       	movw	r30, r28
    22aa:	ef 55       	subi	r30, 0x5F	; 95
    22ac:	ff 4f       	sbci	r31, 0xFF	; 255
    22ae:	60 81       	ld	r22, Z
    22b0:	71 81       	ldd	r23, Z+1	; 0x01
    22b2:	82 81       	ldd	r24, Z+2	; 0x02
    22b4:	93 81       	ldd	r25, Z+3	; 0x03
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	40 e8       	ldi	r20, 0x80	; 128
    22bc:	5f e3       	ldi	r21, 0x3F	; 63
    22be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22c2:	88 23       	and	r24, r24
    22c4:	44 f4       	brge	.+16     	; 0x22d6 <main+0x1790>
		__ticks = 1;
    22c6:	fe 01       	movw	r30, r28
    22c8:	e1 56       	subi	r30, 0x61	; 97
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	91 83       	std	Z+1, r25	; 0x01
    22d2:	80 83       	st	Z, r24
    22d4:	64 c0       	rjmp	.+200    	; 0x239e <main+0x1858>
	else if (__tmp > 65535)
    22d6:	fe 01       	movw	r30, r28
    22d8:	ef 55       	subi	r30, 0x5F	; 95
    22da:	ff 4f       	sbci	r31, 0xFF	; 255
    22dc:	60 81       	ld	r22, Z
    22de:	71 81       	ldd	r23, Z+1	; 0x01
    22e0:	82 81       	ldd	r24, Z+2	; 0x02
    22e2:	93 81       	ldd	r25, Z+3	; 0x03
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	3f ef       	ldi	r19, 0xFF	; 255
    22e8:	4f e7       	ldi	r20, 0x7F	; 127
    22ea:	57 e4       	ldi	r21, 0x47	; 71
    22ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22f0:	18 16       	cp	r1, r24
    22f2:	0c f0       	brlt	.+2      	; 0x22f6 <main+0x17b0>
    22f4:	43 c0       	rjmp	.+134    	; 0x237c <main+0x1836>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f6:	fe 01       	movw	r30, r28
    22f8:	eb 55       	subi	r30, 0x5B	; 91
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	60 81       	ld	r22, Z
    22fe:	71 81       	ldd	r23, Z+1	; 0x01
    2300:	82 81       	ldd	r24, Z+2	; 0x02
    2302:	93 81       	ldd	r25, Z+3	; 0x03
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	40 e2       	ldi	r20, 0x20	; 32
    230a:	51 e4       	ldi	r21, 0x41	; 65
    230c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	8e 01       	movw	r16, r28
    2316:	01 56       	subi	r16, 0x61	; 97
    2318:	1f 4f       	sbci	r17, 0xFF	; 255
    231a:	bc 01       	movw	r22, r24
    231c:	cd 01       	movw	r24, r26
    231e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	f8 01       	movw	r30, r16
    2328:	91 83       	std	Z+1, r25	; 0x01
    232a:	80 83       	st	Z, r24
    232c:	1f c0       	rjmp	.+62     	; 0x236c <main+0x1826>
    232e:	fe 01       	movw	r30, r28
    2330:	e3 56       	subi	r30, 0x63	; 99
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	88 ec       	ldi	r24, 0xC8	; 200
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	91 83       	std	Z+1, r25	; 0x01
    233a:	80 83       	st	Z, r24
    233c:	fe 01       	movw	r30, r28
    233e:	e3 56       	subi	r30, 0x63	; 99
    2340:	ff 4f       	sbci	r31, 0xFF	; 255
    2342:	80 81       	ld	r24, Z
    2344:	91 81       	ldd	r25, Z+1	; 0x01
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	f1 f7       	brne	.-4      	; 0x2346 <main+0x1800>
    234a:	fe 01       	movw	r30, r28
    234c:	e3 56       	subi	r30, 0x63	; 99
    234e:	ff 4f       	sbci	r31, 0xFF	; 255
    2350:	91 83       	std	Z+1, r25	; 0x01
    2352:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2354:	de 01       	movw	r26, r28
    2356:	a1 56       	subi	r26, 0x61	; 97
    2358:	bf 4f       	sbci	r27, 0xFF	; 255
    235a:	fe 01       	movw	r30, r28
    235c:	e1 56       	subi	r30, 0x61	; 97
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	80 81       	ld	r24, Z
    2362:	91 81       	ldd	r25, Z+1	; 0x01
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	11 96       	adiw	r26, 0x01	; 1
    2368:	9c 93       	st	X, r25
    236a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236c:	fe 01       	movw	r30, r28
    236e:	e1 56       	subi	r30, 0x61	; 97
    2370:	ff 4f       	sbci	r31, 0xFF	; 255
    2372:	80 81       	ld	r24, Z
    2374:	91 81       	ldd	r25, Z+1	; 0x01
    2376:	00 97       	sbiw	r24, 0x00	; 0
    2378:	d1 f6       	brne	.-76     	; 0x232e <main+0x17e8>
    237a:	27 c0       	rjmp	.+78     	; 0x23ca <main+0x1884>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    237c:	8e 01       	movw	r16, r28
    237e:	01 56       	subi	r16, 0x61	; 97
    2380:	1f 4f       	sbci	r17, 0xFF	; 255
    2382:	fe 01       	movw	r30, r28
    2384:	ef 55       	subi	r30, 0x5F	; 95
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	60 81       	ld	r22, Z
    238a:	71 81       	ldd	r23, Z+1	; 0x01
    238c:	82 81       	ldd	r24, Z+2	; 0x02
    238e:	93 81       	ldd	r25, Z+3	; 0x03
    2390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	f8 01       	movw	r30, r16
    239a:	91 83       	std	Z+1, r25	; 0x01
    239c:	80 83       	st	Z, r24
    239e:	de 01       	movw	r26, r28
    23a0:	a5 56       	subi	r26, 0x65	; 101
    23a2:	bf 4f       	sbci	r27, 0xFF	; 255
    23a4:	fe 01       	movw	r30, r28
    23a6:	e1 56       	subi	r30, 0x61	; 97
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	80 81       	ld	r24, Z
    23ac:	91 81       	ldd	r25, Z+1	; 0x01
    23ae:	8d 93       	st	X+, r24
    23b0:	9c 93       	st	X, r25
    23b2:	fe 01       	movw	r30, r28
    23b4:	e5 56       	subi	r30, 0x65	; 101
    23b6:	ff 4f       	sbci	r31, 0xFF	; 255
    23b8:	80 81       	ld	r24, Z
    23ba:	91 81       	ldd	r25, Z+1	; 0x01
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	f1 f7       	brne	.-4      	; 0x23bc <main+0x1876>
    23c0:	fe 01       	movw	r30, r28
    23c2:	e5 56       	subi	r30, 0x65	; 101
    23c4:	ff 4f       	sbci	r31, 0xFF	; 255
    23c6:	91 83       	std	Z+1, r25	; 0x01
    23c8:	80 83       	st	Z, r24
			_delay_ms(2000);
			UART_sendByte(DOOR_LOCKING); // MC2 is ready
    23ca:	89 e9       	ldi	r24, 0x99	; 153
    23cc:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <UART_sendByte>
			UART_receivestring(string); // receive the string
    23d0:	ce 01       	movw	r24, r28
    23d2:	8f 58       	subi	r24, 0x8F	; 143
    23d4:	9e 4f       	sbci	r25, 0xFE	; 254
    23d6:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <UART_receivestring>
			LCD_clearScreen();
    23da:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <LCD_clearScreen>
			LCD_displayString(string); // display the string on LCD
    23de:	ce 01       	movw	r24, r28
    23e0:	8f 58       	subi	r24, 0x8F	; 143
    23e2:	9e 4f       	sbci	r25, 0xFE	; 254
    23e4:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <LCD_displayString>
    23e8:	fe 01       	movw	r30, r28
    23ea:	e9 56       	subi	r30, 0x69	; 105
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	90 e8       	ldi	r25, 0x80	; 128
    23f2:	ab e3       	ldi	r26, 0x3B	; 59
    23f4:	b5 e4       	ldi	r27, 0x45	; 69
    23f6:	80 83       	st	Z, r24
    23f8:	91 83       	std	Z+1, r25	; 0x01
    23fa:	a2 83       	std	Z+2, r26	; 0x02
    23fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23fe:	8e 01       	movw	r16, r28
    2400:	0d 56       	subi	r16, 0x6D	; 109
    2402:	1f 4f       	sbci	r17, 0xFF	; 255
    2404:	fe 01       	movw	r30, r28
    2406:	e9 56       	subi	r30, 0x69	; 105
    2408:	ff 4f       	sbci	r31, 0xFF	; 255
    240a:	60 81       	ld	r22, Z
    240c:	71 81       	ldd	r23, Z+1	; 0x01
    240e:	82 81       	ldd	r24, Z+2	; 0x02
    2410:	93 81       	ldd	r25, Z+3	; 0x03
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	4a ef       	ldi	r20, 0xFA	; 250
    2418:	54 e4       	ldi	r21, 0x44	; 68
    241a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	f8 01       	movw	r30, r16
    2424:	80 83       	st	Z, r24
    2426:	91 83       	std	Z+1, r25	; 0x01
    2428:	a2 83       	std	Z+2, r26	; 0x02
    242a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    242c:	fe 01       	movw	r30, r28
    242e:	ed 56       	subi	r30, 0x6D	; 109
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	60 81       	ld	r22, Z
    2434:	71 81       	ldd	r23, Z+1	; 0x01
    2436:	82 81       	ldd	r24, Z+2	; 0x02
    2438:	93 81       	ldd	r25, Z+3	; 0x03
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	40 e8       	ldi	r20, 0x80	; 128
    2440:	5f e3       	ldi	r21, 0x3F	; 63
    2442:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2446:	88 23       	and	r24, r24
    2448:	44 f4       	brge	.+16     	; 0x245a <main+0x1914>
		__ticks = 1;
    244a:	fe 01       	movw	r30, r28
    244c:	ef 56       	subi	r30, 0x6F	; 111
    244e:	ff 4f       	sbci	r31, 0xFF	; 255
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	91 83       	std	Z+1, r25	; 0x01
    2456:	80 83       	st	Z, r24
    2458:	64 c0       	rjmp	.+200    	; 0x2522 <main+0x19dc>
	else if (__tmp > 65535)
    245a:	fe 01       	movw	r30, r28
    245c:	ed 56       	subi	r30, 0x6D	; 109
    245e:	ff 4f       	sbci	r31, 0xFF	; 255
    2460:	60 81       	ld	r22, Z
    2462:	71 81       	ldd	r23, Z+1	; 0x01
    2464:	82 81       	ldd	r24, Z+2	; 0x02
    2466:	93 81       	ldd	r25, Z+3	; 0x03
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	3f ef       	ldi	r19, 0xFF	; 255
    246c:	4f e7       	ldi	r20, 0x7F	; 127
    246e:	57 e4       	ldi	r21, 0x47	; 71
    2470:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2474:	18 16       	cp	r1, r24
    2476:	0c f0       	brlt	.+2      	; 0x247a <main+0x1934>
    2478:	43 c0       	rjmp	.+134    	; 0x2500 <main+0x19ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    247a:	fe 01       	movw	r30, r28
    247c:	e9 56       	subi	r30, 0x69	; 105
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	60 81       	ld	r22, Z
    2482:	71 81       	ldd	r23, Z+1	; 0x01
    2484:	82 81       	ldd	r24, Z+2	; 0x02
    2486:	93 81       	ldd	r25, Z+3	; 0x03
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	40 e2       	ldi	r20, 0x20	; 32
    248e:	51 e4       	ldi	r21, 0x41	; 65
    2490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	8e 01       	movw	r16, r28
    249a:	0f 56       	subi	r16, 0x6F	; 111
    249c:	1f 4f       	sbci	r17, 0xFF	; 255
    249e:	bc 01       	movw	r22, r24
    24a0:	cd 01       	movw	r24, r26
    24a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	f8 01       	movw	r30, r16
    24ac:	91 83       	std	Z+1, r25	; 0x01
    24ae:	80 83       	st	Z, r24
    24b0:	1f c0       	rjmp	.+62     	; 0x24f0 <main+0x19aa>
    24b2:	fe 01       	movw	r30, r28
    24b4:	e1 57       	subi	r30, 0x71	; 113
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	88 ec       	ldi	r24, 0xC8	; 200
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	91 83       	std	Z+1, r25	; 0x01
    24be:	80 83       	st	Z, r24
    24c0:	fe 01       	movw	r30, r28
    24c2:	e1 57       	subi	r30, 0x71	; 113
    24c4:	ff 4f       	sbci	r31, 0xFF	; 255
    24c6:	80 81       	ld	r24, Z
    24c8:	91 81       	ldd	r25, Z+1	; 0x01
    24ca:	01 97       	sbiw	r24, 0x01	; 1
    24cc:	f1 f7       	brne	.-4      	; 0x24ca <main+0x1984>
    24ce:	fe 01       	movw	r30, r28
    24d0:	e1 57       	subi	r30, 0x71	; 113
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	91 83       	std	Z+1, r25	; 0x01
    24d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d8:	de 01       	movw	r26, r28
    24da:	af 56       	subi	r26, 0x6F	; 111
    24dc:	bf 4f       	sbci	r27, 0xFF	; 255
    24de:	fe 01       	movw	r30, r28
    24e0:	ef 56       	subi	r30, 0x6F	; 111
    24e2:	ff 4f       	sbci	r31, 0xFF	; 255
    24e4:	80 81       	ld	r24, Z
    24e6:	91 81       	ldd	r25, Z+1	; 0x01
    24e8:	01 97       	sbiw	r24, 0x01	; 1
    24ea:	11 96       	adiw	r26, 0x01	; 1
    24ec:	9c 93       	st	X, r25
    24ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f0:	fe 01       	movw	r30, r28
    24f2:	ef 56       	subi	r30, 0x6F	; 111
    24f4:	ff 4f       	sbci	r31, 0xFF	; 255
    24f6:	80 81       	ld	r24, Z
    24f8:	91 81       	ldd	r25, Z+1	; 0x01
    24fa:	00 97       	sbiw	r24, 0x00	; 0
    24fc:	d1 f6       	brne	.-76     	; 0x24b2 <main+0x196c>
    24fe:	27 c0       	rjmp	.+78     	; 0x254e <main+0x1a08>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2500:	8e 01       	movw	r16, r28
    2502:	0f 56       	subi	r16, 0x6F	; 111
    2504:	1f 4f       	sbci	r17, 0xFF	; 255
    2506:	fe 01       	movw	r30, r28
    2508:	ed 56       	subi	r30, 0x6D	; 109
    250a:	ff 4f       	sbci	r31, 0xFF	; 255
    250c:	60 81       	ld	r22, Z
    250e:	71 81       	ldd	r23, Z+1	; 0x01
    2510:	82 81       	ldd	r24, Z+2	; 0x02
    2512:	93 81       	ldd	r25, Z+3	; 0x03
    2514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	f8 01       	movw	r30, r16
    251e:	91 83       	std	Z+1, r25	; 0x01
    2520:	80 83       	st	Z, r24
    2522:	de 01       	movw	r26, r28
    2524:	a3 57       	subi	r26, 0x73	; 115
    2526:	bf 4f       	sbci	r27, 0xFF	; 255
    2528:	fe 01       	movw	r30, r28
    252a:	ef 56       	subi	r30, 0x6F	; 111
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	80 81       	ld	r24, Z
    2530:	91 81       	ldd	r25, Z+1	; 0x01
    2532:	8d 93       	st	X+, r24
    2534:	9c 93       	st	X, r25
    2536:	fe 01       	movw	r30, r28
    2538:	e3 57       	subi	r30, 0x73	; 115
    253a:	ff 4f       	sbci	r31, 0xFF	; 255
    253c:	80 81       	ld	r24, Z
    253e:	91 81       	ldd	r25, Z+1	; 0x01
    2540:	01 97       	sbiw	r24, 0x01	; 1
    2542:	f1 f7       	brne	.-4      	; 0x2540 <main+0x19fa>
    2544:	fe 01       	movw	r30, r28
    2546:	e3 57       	subi	r30, 0x73	; 115
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	91 83       	std	Z+1, r25	; 0x01
    254c:	80 83       	st	Z, r24
    254e:	fe 01       	movw	r30, r28
    2550:	e7 57       	subi	r30, 0x77	; 119
    2552:	ff 4f       	sbci	r31, 0xFF	; 255
    2554:	80 e0       	ldi	r24, 0x00	; 0
    2556:	90 e8       	ldi	r25, 0x80	; 128
    2558:	ab e3       	ldi	r26, 0x3B	; 59
    255a:	b5 e4       	ldi	r27, 0x45	; 69
    255c:	80 83       	st	Z, r24
    255e:	91 83       	std	Z+1, r25	; 0x01
    2560:	a2 83       	std	Z+2, r26	; 0x02
    2562:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2564:	8e 01       	movw	r16, r28
    2566:	0b 57       	subi	r16, 0x7B	; 123
    2568:	1f 4f       	sbci	r17, 0xFF	; 255
    256a:	fe 01       	movw	r30, r28
    256c:	e7 57       	subi	r30, 0x77	; 119
    256e:	ff 4f       	sbci	r31, 0xFF	; 255
    2570:	60 81       	ld	r22, Z
    2572:	71 81       	ldd	r23, Z+1	; 0x01
    2574:	82 81       	ldd	r24, Z+2	; 0x02
    2576:	93 81       	ldd	r25, Z+3	; 0x03
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	4a ef       	ldi	r20, 0xFA	; 250
    257e:	54 e4       	ldi	r21, 0x44	; 68
    2580:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	f8 01       	movw	r30, r16
    258a:	80 83       	st	Z, r24
    258c:	91 83       	std	Z+1, r25	; 0x01
    258e:	a2 83       	std	Z+2, r26	; 0x02
    2590:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2592:	fe 01       	movw	r30, r28
    2594:	eb 57       	subi	r30, 0x7B	; 123
    2596:	ff 4f       	sbci	r31, 0xFF	; 255
    2598:	60 81       	ld	r22, Z
    259a:	71 81       	ldd	r23, Z+1	; 0x01
    259c:	82 81       	ldd	r24, Z+2	; 0x02
    259e:	93 81       	ldd	r25, Z+3	; 0x03
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	40 e8       	ldi	r20, 0x80	; 128
    25a6:	5f e3       	ldi	r21, 0x3F	; 63
    25a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25ac:	88 23       	and	r24, r24
    25ae:	44 f4       	brge	.+16     	; 0x25c0 <main+0x1a7a>
		__ticks = 1;
    25b0:	fe 01       	movw	r30, r28
    25b2:	ed 57       	subi	r30, 0x7D	; 125
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	91 83       	std	Z+1, r25	; 0x01
    25bc:	80 83       	st	Z, r24
    25be:	64 c0       	rjmp	.+200    	; 0x2688 <main+0x1b42>
	else if (__tmp > 65535)
    25c0:	fe 01       	movw	r30, r28
    25c2:	eb 57       	subi	r30, 0x7B	; 123
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	60 81       	ld	r22, Z
    25c8:	71 81       	ldd	r23, Z+1	; 0x01
    25ca:	82 81       	ldd	r24, Z+2	; 0x02
    25cc:	93 81       	ldd	r25, Z+3	; 0x03
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	3f ef       	ldi	r19, 0xFF	; 255
    25d2:	4f e7       	ldi	r20, 0x7F	; 127
    25d4:	57 e4       	ldi	r21, 0x47	; 71
    25d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25da:	18 16       	cp	r1, r24
    25dc:	0c f0       	brlt	.+2      	; 0x25e0 <main+0x1a9a>
    25de:	43 c0       	rjmp	.+134    	; 0x2666 <main+0x1b20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e0:	fe 01       	movw	r30, r28
    25e2:	e7 57       	subi	r30, 0x77	; 119
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	60 81       	ld	r22, Z
    25e8:	71 81       	ldd	r23, Z+1	; 0x01
    25ea:	82 81       	ldd	r24, Z+2	; 0x02
    25ec:	93 81       	ldd	r25, Z+3	; 0x03
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	40 e2       	ldi	r20, 0x20	; 32
    25f4:	51 e4       	ldi	r21, 0x41	; 65
    25f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	8e 01       	movw	r16, r28
    2600:	0d 57       	subi	r16, 0x7D	; 125
    2602:	1f 4f       	sbci	r17, 0xFF	; 255
    2604:	bc 01       	movw	r22, r24
    2606:	cd 01       	movw	r24, r26
    2608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260c:	dc 01       	movw	r26, r24
    260e:	cb 01       	movw	r24, r22
    2610:	f8 01       	movw	r30, r16
    2612:	91 83       	std	Z+1, r25	; 0x01
    2614:	80 83       	st	Z, r24
    2616:	1f c0       	rjmp	.+62     	; 0x2656 <main+0x1b10>
    2618:	fe 01       	movw	r30, r28
    261a:	ef 57       	subi	r30, 0x7F	; 127
    261c:	ff 4f       	sbci	r31, 0xFF	; 255
    261e:	88 ec       	ldi	r24, 0xC8	; 200
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	91 83       	std	Z+1, r25	; 0x01
    2624:	80 83       	st	Z, r24
    2626:	fe 01       	movw	r30, r28
    2628:	ef 57       	subi	r30, 0x7F	; 127
    262a:	ff 4f       	sbci	r31, 0xFF	; 255
    262c:	80 81       	ld	r24, Z
    262e:	91 81       	ldd	r25, Z+1	; 0x01
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	f1 f7       	brne	.-4      	; 0x2630 <main+0x1aea>
    2634:	fe 01       	movw	r30, r28
    2636:	ef 57       	subi	r30, 0x7F	; 127
    2638:	ff 4f       	sbci	r31, 0xFF	; 255
    263a:	91 83       	std	Z+1, r25	; 0x01
    263c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    263e:	de 01       	movw	r26, r28
    2640:	ad 57       	subi	r26, 0x7D	; 125
    2642:	bf 4f       	sbci	r27, 0xFF	; 255
    2644:	fe 01       	movw	r30, r28
    2646:	ed 57       	subi	r30, 0x7D	; 125
    2648:	ff 4f       	sbci	r31, 0xFF	; 255
    264a:	80 81       	ld	r24, Z
    264c:	91 81       	ldd	r25, Z+1	; 0x01
    264e:	01 97       	sbiw	r24, 0x01	; 1
    2650:	11 96       	adiw	r26, 0x01	; 1
    2652:	9c 93       	st	X, r25
    2654:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2656:	fe 01       	movw	r30, r28
    2658:	ed 57       	subi	r30, 0x7D	; 125
    265a:	ff 4f       	sbci	r31, 0xFF	; 255
    265c:	80 81       	ld	r24, Z
    265e:	91 81       	ldd	r25, Z+1	; 0x01
    2660:	00 97       	sbiw	r24, 0x00	; 0
    2662:	d1 f6       	brne	.-76     	; 0x2618 <main+0x1ad2>
    2664:	27 c0       	rjmp	.+78     	; 0x26b4 <main+0x1b6e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2666:	8e 01       	movw	r16, r28
    2668:	0d 57       	subi	r16, 0x7D	; 125
    266a:	1f 4f       	sbci	r17, 0xFF	; 255
    266c:	fe 01       	movw	r30, r28
    266e:	eb 57       	subi	r30, 0x7B	; 123
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
    2672:	60 81       	ld	r22, Z
    2674:	71 81       	ldd	r23, Z+1	; 0x01
    2676:	82 81       	ldd	r24, Z+2	; 0x02
    2678:	93 81       	ldd	r25, Z+3	; 0x03
    267a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	f8 01       	movw	r30, r16
    2684:	91 83       	std	Z+1, r25	; 0x01
    2686:	80 83       	st	Z, r24
    2688:	de 01       	movw	r26, r28
    268a:	a1 58       	subi	r26, 0x81	; 129
    268c:	bf 4f       	sbci	r27, 0xFF	; 255
    268e:	fe 01       	movw	r30, r28
    2690:	ed 57       	subi	r30, 0x7D	; 125
    2692:	ff 4f       	sbci	r31, 0xFF	; 255
    2694:	80 81       	ld	r24, Z
    2696:	91 81       	ldd	r25, Z+1	; 0x01
    2698:	8d 93       	st	X+, r24
    269a:	9c 93       	st	X, r25
    269c:	fe 01       	movw	r30, r28
    269e:	e1 58       	subi	r30, 0x81	; 129
    26a0:	ff 4f       	sbci	r31, 0xFF	; 255
    26a2:	80 81       	ld	r24, Z
    26a4:	91 81       	ldd	r25, Z+1	; 0x01
    26a6:	01 97       	sbiw	r24, 0x01	; 1
    26a8:	f1 f7       	brne	.-4      	; 0x26a6 <main+0x1b60>
    26aa:	fe 01       	movw	r30, r28
    26ac:	e1 58       	subi	r30, 0x81	; 129
    26ae:	ff 4f       	sbci	r31, 0xFF	; 255
    26b0:	91 83       	std	Z+1, r25	; 0x01
    26b2:	80 83       	st	Z, r24
    26b4:	fe 01       	movw	r30, r28
    26b6:	e5 58       	subi	r30, 0x85	; 133
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	90 e8       	ldi	r25, 0x80	; 128
    26be:	ab e3       	ldi	r26, 0x3B	; 59
    26c0:	b5 e4       	ldi	r27, 0x45	; 69
    26c2:	80 83       	st	Z, r24
    26c4:	91 83       	std	Z+1, r25	; 0x01
    26c6:	a2 83       	std	Z+2, r26	; 0x02
    26c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ca:	8e 01       	movw	r16, r28
    26cc:	09 58       	subi	r16, 0x89	; 137
    26ce:	1f 4f       	sbci	r17, 0xFF	; 255
    26d0:	fe 01       	movw	r30, r28
    26d2:	e5 58       	subi	r30, 0x85	; 133
    26d4:	ff 4f       	sbci	r31, 0xFF	; 255
    26d6:	60 81       	ld	r22, Z
    26d8:	71 81       	ldd	r23, Z+1	; 0x01
    26da:	82 81       	ldd	r24, Z+2	; 0x02
    26dc:	93 81       	ldd	r25, Z+3	; 0x03
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	4a ef       	ldi	r20, 0xFA	; 250
    26e4:	54 e4       	ldi	r21, 0x44	; 68
    26e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	f8 01       	movw	r30, r16
    26f0:	80 83       	st	Z, r24
    26f2:	91 83       	std	Z+1, r25	; 0x01
    26f4:	a2 83       	std	Z+2, r26	; 0x02
    26f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26f8:	fe 01       	movw	r30, r28
    26fa:	e9 58       	subi	r30, 0x89	; 137
    26fc:	ff 4f       	sbci	r31, 0xFF	; 255
    26fe:	60 81       	ld	r22, Z
    2700:	71 81       	ldd	r23, Z+1	; 0x01
    2702:	82 81       	ldd	r24, Z+2	; 0x02
    2704:	93 81       	ldd	r25, Z+3	; 0x03
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	40 e8       	ldi	r20, 0x80	; 128
    270c:	5f e3       	ldi	r21, 0x3F	; 63
    270e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2712:	88 23       	and	r24, r24
    2714:	44 f4       	brge	.+16     	; 0x2726 <main+0x1be0>
		__ticks = 1;
    2716:	fe 01       	movw	r30, r28
    2718:	eb 58       	subi	r30, 0x8B	; 139
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	91 83       	std	Z+1, r25	; 0x01
    2722:	80 83       	st	Z, r24
    2724:	64 c0       	rjmp	.+200    	; 0x27ee <main+0x1ca8>
	else if (__tmp > 65535)
    2726:	fe 01       	movw	r30, r28
    2728:	e9 58       	subi	r30, 0x89	; 137
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	60 81       	ld	r22, Z
    272e:	71 81       	ldd	r23, Z+1	; 0x01
    2730:	82 81       	ldd	r24, Z+2	; 0x02
    2732:	93 81       	ldd	r25, Z+3	; 0x03
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	3f ef       	ldi	r19, 0xFF	; 255
    2738:	4f e7       	ldi	r20, 0x7F	; 127
    273a:	57 e4       	ldi	r21, 0x47	; 71
    273c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2740:	18 16       	cp	r1, r24
    2742:	0c f0       	brlt	.+2      	; 0x2746 <main+0x1c00>
    2744:	43 c0       	rjmp	.+134    	; 0x27cc <main+0x1c86>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2746:	fe 01       	movw	r30, r28
    2748:	e5 58       	subi	r30, 0x85	; 133
    274a:	ff 4f       	sbci	r31, 0xFF	; 255
    274c:	60 81       	ld	r22, Z
    274e:	71 81       	ldd	r23, Z+1	; 0x01
    2750:	82 81       	ldd	r24, Z+2	; 0x02
    2752:	93 81       	ldd	r25, Z+3	; 0x03
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	40 e2       	ldi	r20, 0x20	; 32
    275a:	51 e4       	ldi	r21, 0x41	; 65
    275c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	8e 01       	movw	r16, r28
    2766:	0b 58       	subi	r16, 0x8B	; 139
    2768:	1f 4f       	sbci	r17, 0xFF	; 255
    276a:	bc 01       	movw	r22, r24
    276c:	cd 01       	movw	r24, r26
    276e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	f8 01       	movw	r30, r16
    2778:	91 83       	std	Z+1, r25	; 0x01
    277a:	80 83       	st	Z, r24
    277c:	1f c0       	rjmp	.+62     	; 0x27bc <main+0x1c76>
    277e:	fe 01       	movw	r30, r28
    2780:	ed 58       	subi	r30, 0x8D	; 141
    2782:	ff 4f       	sbci	r31, 0xFF	; 255
    2784:	88 ec       	ldi	r24, 0xC8	; 200
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	91 83       	std	Z+1, r25	; 0x01
    278a:	80 83       	st	Z, r24
    278c:	fe 01       	movw	r30, r28
    278e:	ed 58       	subi	r30, 0x8D	; 141
    2790:	ff 4f       	sbci	r31, 0xFF	; 255
    2792:	80 81       	ld	r24, Z
    2794:	91 81       	ldd	r25, Z+1	; 0x01
    2796:	01 97       	sbiw	r24, 0x01	; 1
    2798:	f1 f7       	brne	.-4      	; 0x2796 <main+0x1c50>
    279a:	fe 01       	movw	r30, r28
    279c:	ed 58       	subi	r30, 0x8D	; 141
    279e:	ff 4f       	sbci	r31, 0xFF	; 255
    27a0:	91 83       	std	Z+1, r25	; 0x01
    27a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a4:	de 01       	movw	r26, r28
    27a6:	ab 58       	subi	r26, 0x8B	; 139
    27a8:	bf 4f       	sbci	r27, 0xFF	; 255
    27aa:	fe 01       	movw	r30, r28
    27ac:	eb 58       	subi	r30, 0x8B	; 139
    27ae:	ff 4f       	sbci	r31, 0xFF	; 255
    27b0:	80 81       	ld	r24, Z
    27b2:	91 81       	ldd	r25, Z+1	; 0x01
    27b4:	01 97       	sbiw	r24, 0x01	; 1
    27b6:	11 96       	adiw	r26, 0x01	; 1
    27b8:	9c 93       	st	X, r25
    27ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27bc:	fe 01       	movw	r30, r28
    27be:	eb 58       	subi	r30, 0x8B	; 139
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	80 81       	ld	r24, Z
    27c4:	91 81       	ldd	r25, Z+1	; 0x01
    27c6:	00 97       	sbiw	r24, 0x00	; 0
    27c8:	d1 f6       	brne	.-76     	; 0x277e <main+0x1c38>
    27ca:	27 c0       	rjmp	.+78     	; 0x281a <main+0x1cd4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27cc:	8e 01       	movw	r16, r28
    27ce:	0b 58       	subi	r16, 0x8B	; 139
    27d0:	1f 4f       	sbci	r17, 0xFF	; 255
    27d2:	fe 01       	movw	r30, r28
    27d4:	e9 58       	subi	r30, 0x89	; 137
    27d6:	ff 4f       	sbci	r31, 0xFF	; 255
    27d8:	60 81       	ld	r22, Z
    27da:	71 81       	ldd	r23, Z+1	; 0x01
    27dc:	82 81       	ldd	r24, Z+2	; 0x02
    27de:	93 81       	ldd	r25, Z+3	; 0x03
    27e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	f8 01       	movw	r30, r16
    27ea:	91 83       	std	Z+1, r25	; 0x01
    27ec:	80 83       	st	Z, r24
    27ee:	de 01       	movw	r26, r28
    27f0:	af 58       	subi	r26, 0x8F	; 143
    27f2:	bf 4f       	sbci	r27, 0xFF	; 255
    27f4:	fe 01       	movw	r30, r28
    27f6:	eb 58       	subi	r30, 0x8B	; 139
    27f8:	ff 4f       	sbci	r31, 0xFF	; 255
    27fa:	80 81       	ld	r24, Z
    27fc:	91 81       	ldd	r25, Z+1	; 0x01
    27fe:	8d 93       	st	X+, r24
    2800:	9c 93       	st	X, r25
    2802:	fe 01       	movw	r30, r28
    2804:	ef 58       	subi	r30, 0x8F	; 143
    2806:	ff 4f       	sbci	r31, 0xFF	; 255
    2808:	80 81       	ld	r24, Z
    280a:	91 81       	ldd	r25, Z+1	; 0x01
    280c:	01 97       	sbiw	r24, 0x01	; 1
    280e:	f1 f7       	brne	.-4      	; 0x280c <main+0x1cc6>
    2810:	fe 01       	movw	r30, r28
    2812:	ef 58       	subi	r30, 0x8F	; 143
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	91 83       	std	Z+1, r25	; 0x01
    2818:	80 83       	st	Z, r24
    281a:	fe 01       	movw	r30, r28
    281c:	e3 59       	subi	r30, 0x93	; 147
    281e:	ff 4f       	sbci	r31, 0xFF	; 255
    2820:	80 e0       	ldi	r24, 0x00	; 0
    2822:	90 e8       	ldi	r25, 0x80	; 128
    2824:	ab e3       	ldi	r26, 0x3B	; 59
    2826:	b5 e4       	ldi	r27, 0x45	; 69
    2828:	80 83       	st	Z, r24
    282a:	91 83       	std	Z+1, r25	; 0x01
    282c:	a2 83       	std	Z+2, r26	; 0x02
    282e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2830:	8e 01       	movw	r16, r28
    2832:	07 59       	subi	r16, 0x97	; 151
    2834:	1f 4f       	sbci	r17, 0xFF	; 255
    2836:	fe 01       	movw	r30, r28
    2838:	e3 59       	subi	r30, 0x93	; 147
    283a:	ff 4f       	sbci	r31, 0xFF	; 255
    283c:	60 81       	ld	r22, Z
    283e:	71 81       	ldd	r23, Z+1	; 0x01
    2840:	82 81       	ldd	r24, Z+2	; 0x02
    2842:	93 81       	ldd	r25, Z+3	; 0x03
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	4a ef       	ldi	r20, 0xFA	; 250
    284a:	54 e4       	ldi	r21, 0x44	; 68
    284c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	f8 01       	movw	r30, r16
    2856:	80 83       	st	Z, r24
    2858:	91 83       	std	Z+1, r25	; 0x01
    285a:	a2 83       	std	Z+2, r26	; 0x02
    285c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    285e:	fe 01       	movw	r30, r28
    2860:	e7 59       	subi	r30, 0x97	; 151
    2862:	ff 4f       	sbci	r31, 0xFF	; 255
    2864:	60 81       	ld	r22, Z
    2866:	71 81       	ldd	r23, Z+1	; 0x01
    2868:	82 81       	ldd	r24, Z+2	; 0x02
    286a:	93 81       	ldd	r25, Z+3	; 0x03
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	40 e8       	ldi	r20, 0x80	; 128
    2872:	5f e3       	ldi	r21, 0x3F	; 63
    2874:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2878:	88 23       	and	r24, r24
    287a:	44 f4       	brge	.+16     	; 0x288c <main+0x1d46>
		__ticks = 1;
    287c:	fe 01       	movw	r30, r28
    287e:	e9 59       	subi	r30, 0x99	; 153
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	91 83       	std	Z+1, r25	; 0x01
    2888:	80 83       	st	Z, r24
    288a:	64 c0       	rjmp	.+200    	; 0x2954 <main+0x1e0e>
	else if (__tmp > 65535)
    288c:	fe 01       	movw	r30, r28
    288e:	e7 59       	subi	r30, 0x97	; 151
    2890:	ff 4f       	sbci	r31, 0xFF	; 255
    2892:	60 81       	ld	r22, Z
    2894:	71 81       	ldd	r23, Z+1	; 0x01
    2896:	82 81       	ldd	r24, Z+2	; 0x02
    2898:	93 81       	ldd	r25, Z+3	; 0x03
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	3f ef       	ldi	r19, 0xFF	; 255
    289e:	4f e7       	ldi	r20, 0x7F	; 127
    28a0:	57 e4       	ldi	r21, 0x47	; 71
    28a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28a6:	18 16       	cp	r1, r24
    28a8:	0c f0       	brlt	.+2      	; 0x28ac <main+0x1d66>
    28aa:	43 c0       	rjmp	.+134    	; 0x2932 <main+0x1dec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ac:	fe 01       	movw	r30, r28
    28ae:	e3 59       	subi	r30, 0x93	; 147
    28b0:	ff 4f       	sbci	r31, 0xFF	; 255
    28b2:	60 81       	ld	r22, Z
    28b4:	71 81       	ldd	r23, Z+1	; 0x01
    28b6:	82 81       	ldd	r24, Z+2	; 0x02
    28b8:	93 81       	ldd	r25, Z+3	; 0x03
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	40 e2       	ldi	r20, 0x20	; 32
    28c0:	51 e4       	ldi	r21, 0x41	; 65
    28c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c6:	dc 01       	movw	r26, r24
    28c8:	cb 01       	movw	r24, r22
    28ca:	8e 01       	movw	r16, r28
    28cc:	09 59       	subi	r16, 0x99	; 153
    28ce:	1f 4f       	sbci	r17, 0xFF	; 255
    28d0:	bc 01       	movw	r22, r24
    28d2:	cd 01       	movw	r24, r26
    28d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	f8 01       	movw	r30, r16
    28de:	91 83       	std	Z+1, r25	; 0x01
    28e0:	80 83       	st	Z, r24
    28e2:	1f c0       	rjmp	.+62     	; 0x2922 <main+0x1ddc>
    28e4:	fe 01       	movw	r30, r28
    28e6:	eb 59       	subi	r30, 0x9B	; 155
    28e8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ea:	88 ec       	ldi	r24, 0xC8	; 200
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	91 83       	std	Z+1, r25	; 0x01
    28f0:	80 83       	st	Z, r24
    28f2:	fe 01       	movw	r30, r28
    28f4:	eb 59       	subi	r30, 0x9B	; 155
    28f6:	ff 4f       	sbci	r31, 0xFF	; 255
    28f8:	80 81       	ld	r24, Z
    28fa:	91 81       	ldd	r25, Z+1	; 0x01
    28fc:	01 97       	sbiw	r24, 0x01	; 1
    28fe:	f1 f7       	brne	.-4      	; 0x28fc <main+0x1db6>
    2900:	fe 01       	movw	r30, r28
    2902:	eb 59       	subi	r30, 0x9B	; 155
    2904:	ff 4f       	sbci	r31, 0xFF	; 255
    2906:	91 83       	std	Z+1, r25	; 0x01
    2908:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    290a:	de 01       	movw	r26, r28
    290c:	a9 59       	subi	r26, 0x99	; 153
    290e:	bf 4f       	sbci	r27, 0xFF	; 255
    2910:	fe 01       	movw	r30, r28
    2912:	e9 59       	subi	r30, 0x99	; 153
    2914:	ff 4f       	sbci	r31, 0xFF	; 255
    2916:	80 81       	ld	r24, Z
    2918:	91 81       	ldd	r25, Z+1	; 0x01
    291a:	01 97       	sbiw	r24, 0x01	; 1
    291c:	11 96       	adiw	r26, 0x01	; 1
    291e:	9c 93       	st	X, r25
    2920:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2922:	fe 01       	movw	r30, r28
    2924:	e9 59       	subi	r30, 0x99	; 153
    2926:	ff 4f       	sbci	r31, 0xFF	; 255
    2928:	80 81       	ld	r24, Z
    292a:	91 81       	ldd	r25, Z+1	; 0x01
    292c:	00 97       	sbiw	r24, 0x00	; 0
    292e:	d1 f6       	brne	.-76     	; 0x28e4 <main+0x1d9e>
    2930:	27 c0       	rjmp	.+78     	; 0x2980 <main+0x1e3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2932:	8e 01       	movw	r16, r28
    2934:	09 59       	subi	r16, 0x99	; 153
    2936:	1f 4f       	sbci	r17, 0xFF	; 255
    2938:	fe 01       	movw	r30, r28
    293a:	e7 59       	subi	r30, 0x97	; 151
    293c:	ff 4f       	sbci	r31, 0xFF	; 255
    293e:	60 81       	ld	r22, Z
    2940:	71 81       	ldd	r23, Z+1	; 0x01
    2942:	82 81       	ldd	r24, Z+2	; 0x02
    2944:	93 81       	ldd	r25, Z+3	; 0x03
    2946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294a:	dc 01       	movw	r26, r24
    294c:	cb 01       	movw	r24, r22
    294e:	f8 01       	movw	r30, r16
    2950:	91 83       	std	Z+1, r25	; 0x01
    2952:	80 83       	st	Z, r24
    2954:	de 01       	movw	r26, r28
    2956:	ad 59       	subi	r26, 0x9D	; 157
    2958:	bf 4f       	sbci	r27, 0xFF	; 255
    295a:	fe 01       	movw	r30, r28
    295c:	e9 59       	subi	r30, 0x99	; 153
    295e:	ff 4f       	sbci	r31, 0xFF	; 255
    2960:	80 81       	ld	r24, Z
    2962:	91 81       	ldd	r25, Z+1	; 0x01
    2964:	8d 93       	st	X+, r24
    2966:	9c 93       	st	X, r25
    2968:	fe 01       	movw	r30, r28
    296a:	ed 59       	subi	r30, 0x9D	; 157
    296c:	ff 4f       	sbci	r31, 0xFF	; 255
    296e:	80 81       	ld	r24, Z
    2970:	91 81       	ldd	r25, Z+1	; 0x01
    2972:	01 97       	sbiw	r24, 0x01	; 1
    2974:	f1 f7       	brne	.-4      	; 0x2972 <main+0x1e2c>
    2976:	fe 01       	movw	r30, r28
    2978:	ed 59       	subi	r30, 0x9D	; 157
    297a:	ff 4f       	sbci	r31, 0xFF	; 255
    297c:	91 83       	std	Z+1, r25	; 0x01
    297e:	80 83       	st	Z, r24
    2980:	fe 01       	movw	r30, r28
    2982:	e1 5a       	subi	r30, 0xA1	; 161
    2984:	ff 4f       	sbci	r31, 0xFF	; 255
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	90 e8       	ldi	r25, 0x80	; 128
    298a:	ab e3       	ldi	r26, 0x3B	; 59
    298c:	b5 e4       	ldi	r27, 0x45	; 69
    298e:	80 83       	st	Z, r24
    2990:	91 83       	std	Z+1, r25	; 0x01
    2992:	a2 83       	std	Z+2, r26	; 0x02
    2994:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2996:	8e 01       	movw	r16, r28
    2998:	05 5a       	subi	r16, 0xA5	; 165
    299a:	1f 4f       	sbci	r17, 0xFF	; 255
    299c:	fe 01       	movw	r30, r28
    299e:	e1 5a       	subi	r30, 0xA1	; 161
    29a0:	ff 4f       	sbci	r31, 0xFF	; 255
    29a2:	60 81       	ld	r22, Z
    29a4:	71 81       	ldd	r23, Z+1	; 0x01
    29a6:	82 81       	ldd	r24, Z+2	; 0x02
    29a8:	93 81       	ldd	r25, Z+3	; 0x03
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	4a ef       	ldi	r20, 0xFA	; 250
    29b0:	54 e4       	ldi	r21, 0x44	; 68
    29b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b6:	dc 01       	movw	r26, r24
    29b8:	cb 01       	movw	r24, r22
    29ba:	f8 01       	movw	r30, r16
    29bc:	80 83       	st	Z, r24
    29be:	91 83       	std	Z+1, r25	; 0x01
    29c0:	a2 83       	std	Z+2, r26	; 0x02
    29c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29c4:	fe 01       	movw	r30, r28
    29c6:	e5 5a       	subi	r30, 0xA5	; 165
    29c8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ca:	60 81       	ld	r22, Z
    29cc:	71 81       	ldd	r23, Z+1	; 0x01
    29ce:	82 81       	ldd	r24, Z+2	; 0x02
    29d0:	93 81       	ldd	r25, Z+3	; 0x03
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	40 e8       	ldi	r20, 0x80	; 128
    29d8:	5f e3       	ldi	r21, 0x3F	; 63
    29da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29de:	88 23       	and	r24, r24
    29e0:	44 f4       	brge	.+16     	; 0x29f2 <main+0x1eac>
		__ticks = 1;
    29e2:	fe 01       	movw	r30, r28
    29e4:	e7 5a       	subi	r30, 0xA7	; 167
    29e6:	ff 4f       	sbci	r31, 0xFF	; 255
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	91 83       	std	Z+1, r25	; 0x01
    29ee:	80 83       	st	Z, r24
    29f0:	64 c0       	rjmp	.+200    	; 0x2aba <main+0x1f74>
	else if (__tmp > 65535)
    29f2:	fe 01       	movw	r30, r28
    29f4:	e5 5a       	subi	r30, 0xA5	; 165
    29f6:	ff 4f       	sbci	r31, 0xFF	; 255
    29f8:	60 81       	ld	r22, Z
    29fa:	71 81       	ldd	r23, Z+1	; 0x01
    29fc:	82 81       	ldd	r24, Z+2	; 0x02
    29fe:	93 81       	ldd	r25, Z+3	; 0x03
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	3f ef       	ldi	r19, 0xFF	; 255
    2a04:	4f e7       	ldi	r20, 0x7F	; 127
    2a06:	57 e4       	ldi	r21, 0x47	; 71
    2a08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a0c:	18 16       	cp	r1, r24
    2a0e:	0c f0       	brlt	.+2      	; 0x2a12 <main+0x1ecc>
    2a10:	43 c0       	rjmp	.+134    	; 0x2a98 <main+0x1f52>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a12:	fe 01       	movw	r30, r28
    2a14:	e1 5a       	subi	r30, 0xA1	; 161
    2a16:	ff 4f       	sbci	r31, 0xFF	; 255
    2a18:	60 81       	ld	r22, Z
    2a1a:	71 81       	ldd	r23, Z+1	; 0x01
    2a1c:	82 81       	ldd	r24, Z+2	; 0x02
    2a1e:	93 81       	ldd	r25, Z+3	; 0x03
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	40 e2       	ldi	r20, 0x20	; 32
    2a26:	51 e4       	ldi	r21, 0x41	; 65
    2a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	8e 01       	movw	r16, r28
    2a32:	07 5a       	subi	r16, 0xA7	; 167
    2a34:	1f 4f       	sbci	r17, 0xFF	; 255
    2a36:	bc 01       	movw	r22, r24
    2a38:	cd 01       	movw	r24, r26
    2a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	f8 01       	movw	r30, r16
    2a44:	91 83       	std	Z+1, r25	; 0x01
    2a46:	80 83       	st	Z, r24
    2a48:	1f c0       	rjmp	.+62     	; 0x2a88 <main+0x1f42>
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	e9 5a       	subi	r30, 0xA9	; 169
    2a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a50:	88 ec       	ldi	r24, 0xC8	; 200
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	91 83       	std	Z+1, r25	; 0x01
    2a56:	80 83       	st	Z, r24
    2a58:	fe 01       	movw	r30, r28
    2a5a:	e9 5a       	subi	r30, 0xA9	; 169
    2a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5e:	80 81       	ld	r24, Z
    2a60:	91 81       	ldd	r25, Z+1	; 0x01
    2a62:	01 97       	sbiw	r24, 0x01	; 1
    2a64:	f1 f7       	brne	.-4      	; 0x2a62 <main+0x1f1c>
    2a66:	fe 01       	movw	r30, r28
    2a68:	e9 5a       	subi	r30, 0xA9	; 169
    2a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6c:	91 83       	std	Z+1, r25	; 0x01
    2a6e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a70:	de 01       	movw	r26, r28
    2a72:	a7 5a       	subi	r26, 0xA7	; 167
    2a74:	bf 4f       	sbci	r27, 0xFF	; 255
    2a76:	fe 01       	movw	r30, r28
    2a78:	e7 5a       	subi	r30, 0xA7	; 167
    2a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7c:	80 81       	ld	r24, Z
    2a7e:	91 81       	ldd	r25, Z+1	; 0x01
    2a80:	01 97       	sbiw	r24, 0x01	; 1
    2a82:	11 96       	adiw	r26, 0x01	; 1
    2a84:	9c 93       	st	X, r25
    2a86:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a88:	fe 01       	movw	r30, r28
    2a8a:	e7 5a       	subi	r30, 0xA7	; 167
    2a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8e:	80 81       	ld	r24, Z
    2a90:	91 81       	ldd	r25, Z+1	; 0x01
    2a92:	00 97       	sbiw	r24, 0x00	; 0
    2a94:	d1 f6       	brne	.-76     	; 0x2a4a <main+0x1f04>
    2a96:	27 c0       	rjmp	.+78     	; 0x2ae6 <main+0x1fa0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a98:	8e 01       	movw	r16, r28
    2a9a:	07 5a       	subi	r16, 0xA7	; 167
    2a9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a9e:	fe 01       	movw	r30, r28
    2aa0:	e5 5a       	subi	r30, 0xA5	; 165
    2aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa4:	60 81       	ld	r22, Z
    2aa6:	71 81       	ldd	r23, Z+1	; 0x01
    2aa8:	82 81       	ldd	r24, Z+2	; 0x02
    2aaa:	93 81       	ldd	r25, Z+3	; 0x03
    2aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	f8 01       	movw	r30, r16
    2ab6:	91 83       	std	Z+1, r25	; 0x01
    2ab8:	80 83       	st	Z, r24
    2aba:	de 01       	movw	r26, r28
    2abc:	ab 5a       	subi	r26, 0xAB	; 171
    2abe:	bf 4f       	sbci	r27, 0xFF	; 255
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	e7 5a       	subi	r30, 0xA7	; 167
    2ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac6:	80 81       	ld	r24, Z
    2ac8:	91 81       	ldd	r25, Z+1	; 0x01
    2aca:	8d 93       	st	X+, r24
    2acc:	9c 93       	st	X, r25
    2ace:	fe 01       	movw	r30, r28
    2ad0:	eb 5a       	subi	r30, 0xAB	; 171
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	80 81       	ld	r24, Z
    2ad6:	91 81       	ldd	r25, Z+1	; 0x01
    2ad8:	01 97       	sbiw	r24, 0x01	; 1
    2ada:	f1 f7       	brne	.-4      	; 0x2ad8 <main+0x1f92>
    2adc:	fe 01       	movw	r30, r28
    2ade:	eb 5a       	subi	r30, 0xAB	; 171
    2ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae2:	91 83       	std	Z+1, r25	; 0x01
    2ae4:	80 83       	st	Z, r24
			_delay_ms(3000);
			_delay_ms(3000);
			_delay_ms(3000);
			_delay_ms(3000);
			_delay_ms(3000);
			UART_sendByte(DOOR_STOP); // MC2 is ready
    2ae6:	87 e9       	ldi	r24, 0x97	; 151
    2ae8:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <UART_sendByte>
			UART_receivestring(string); // receive the string
    2aec:	ce 01       	movw	r24, r28
    2aee:	8f 58       	subi	r24, 0x8F	; 143
    2af0:	9e 4f       	sbci	r25, 0xFE	; 254
    2af2:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <UART_receivestring>
			LCD_clearScreen();
    2af6:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <LCD_clearScreen>
			LCD_displayString(string); // display the string on LCD
    2afa:	ce 01       	movw	r24, r28
    2afc:	8f 58       	subi	r24, 0x8F	; 143
    2afe:	9e 4f       	sbci	r25, 0xFE	; 254
    2b00:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <LCD_displayString>
    2b04:	fe 01       	movw	r30, r28
    2b06:	ef 5a       	subi	r30, 0xAF	; 175
    2b08:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0a:	80 e0       	ldi	r24, 0x00	; 0
    2b0c:	90 e8       	ldi	r25, 0x80	; 128
    2b0e:	ab e3       	ldi	r26, 0x3B	; 59
    2b10:	b5 e4       	ldi	r27, 0x45	; 69
    2b12:	80 83       	st	Z, r24
    2b14:	91 83       	std	Z+1, r25	; 0x01
    2b16:	a2 83       	std	Z+2, r26	; 0x02
    2b18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b1a:	8e 01       	movw	r16, r28
    2b1c:	03 5b       	subi	r16, 0xB3	; 179
    2b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b20:	fe 01       	movw	r30, r28
    2b22:	ef 5a       	subi	r30, 0xAF	; 175
    2b24:	ff 4f       	sbci	r31, 0xFF	; 255
    2b26:	60 81       	ld	r22, Z
    2b28:	71 81       	ldd	r23, Z+1	; 0x01
    2b2a:	82 81       	ldd	r24, Z+2	; 0x02
    2b2c:	93 81       	ldd	r25, Z+3	; 0x03
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	4a ef       	ldi	r20, 0xFA	; 250
    2b34:	54 e4       	ldi	r21, 0x44	; 68
    2b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	f8 01       	movw	r30, r16
    2b40:	80 83       	st	Z, r24
    2b42:	91 83       	std	Z+1, r25	; 0x01
    2b44:	a2 83       	std	Z+2, r26	; 0x02
    2b46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b48:	fe 01       	movw	r30, r28
    2b4a:	e3 5b       	subi	r30, 0xB3	; 179
    2b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4e:	60 81       	ld	r22, Z
    2b50:	71 81       	ldd	r23, Z+1	; 0x01
    2b52:	82 81       	ldd	r24, Z+2	; 0x02
    2b54:	93 81       	ldd	r25, Z+3	; 0x03
    2b56:	20 e0       	ldi	r18, 0x00	; 0
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	40 e8       	ldi	r20, 0x80	; 128
    2b5c:	5f e3       	ldi	r21, 0x3F	; 63
    2b5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b62:	88 23       	and	r24, r24
    2b64:	44 f4       	brge	.+16     	; 0x2b76 <main+0x2030>
		__ticks = 1;
    2b66:	fe 01       	movw	r30, r28
    2b68:	e5 5b       	subi	r30, 0xB5	; 181
    2b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	91 83       	std	Z+1, r25	; 0x01
    2b72:	80 83       	st	Z, r24
    2b74:	64 c0       	rjmp	.+200    	; 0x2c3e <main+0x20f8>
	else if (__tmp > 65535)
    2b76:	fe 01       	movw	r30, r28
    2b78:	e3 5b       	subi	r30, 0xB3	; 179
    2b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7c:	60 81       	ld	r22, Z
    2b7e:	71 81       	ldd	r23, Z+1	; 0x01
    2b80:	82 81       	ldd	r24, Z+2	; 0x02
    2b82:	93 81       	ldd	r25, Z+3	; 0x03
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	3f ef       	ldi	r19, 0xFF	; 255
    2b88:	4f e7       	ldi	r20, 0x7F	; 127
    2b8a:	57 e4       	ldi	r21, 0x47	; 71
    2b8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b90:	18 16       	cp	r1, r24
    2b92:	0c f0       	brlt	.+2      	; 0x2b96 <main+0x2050>
    2b94:	43 c0       	rjmp	.+134    	; 0x2c1c <main+0x20d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b96:	fe 01       	movw	r30, r28
    2b98:	ef 5a       	subi	r30, 0xAF	; 175
    2b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9c:	60 81       	ld	r22, Z
    2b9e:	71 81       	ldd	r23, Z+1	; 0x01
    2ba0:	82 81       	ldd	r24, Z+2	; 0x02
    2ba2:	93 81       	ldd	r25, Z+3	; 0x03
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	40 e2       	ldi	r20, 0x20	; 32
    2baa:	51 e4       	ldi	r21, 0x41	; 65
    2bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	8e 01       	movw	r16, r28
    2bb6:	05 5b       	subi	r16, 0xB5	; 181
    2bb8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bba:	bc 01       	movw	r22, r24
    2bbc:	cd 01       	movw	r24, r26
    2bbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	cb 01       	movw	r24, r22
    2bc6:	f8 01       	movw	r30, r16
    2bc8:	91 83       	std	Z+1, r25	; 0x01
    2bca:	80 83       	st	Z, r24
    2bcc:	1f c0       	rjmp	.+62     	; 0x2c0c <main+0x20c6>
    2bce:	fe 01       	movw	r30, r28
    2bd0:	e7 5b       	subi	r30, 0xB7	; 183
    2bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd4:	88 ec       	ldi	r24, 0xC8	; 200
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	91 83       	std	Z+1, r25	; 0x01
    2bda:	80 83       	st	Z, r24
    2bdc:	fe 01       	movw	r30, r28
    2bde:	e7 5b       	subi	r30, 0xB7	; 183
    2be0:	ff 4f       	sbci	r31, 0xFF	; 255
    2be2:	80 81       	ld	r24, Z
    2be4:	91 81       	ldd	r25, Z+1	; 0x01
    2be6:	01 97       	sbiw	r24, 0x01	; 1
    2be8:	f1 f7       	brne	.-4      	; 0x2be6 <main+0x20a0>
    2bea:	fe 01       	movw	r30, r28
    2bec:	e7 5b       	subi	r30, 0xB7	; 183
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	91 83       	std	Z+1, r25	; 0x01
    2bf2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf4:	de 01       	movw	r26, r28
    2bf6:	a5 5b       	subi	r26, 0xB5	; 181
    2bf8:	bf 4f       	sbci	r27, 0xFF	; 255
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	e5 5b       	subi	r30, 0xB5	; 181
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	80 81       	ld	r24, Z
    2c02:	91 81       	ldd	r25, Z+1	; 0x01
    2c04:	01 97       	sbiw	r24, 0x01	; 1
    2c06:	11 96       	adiw	r26, 0x01	; 1
    2c08:	9c 93       	st	X, r25
    2c0a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c0c:	fe 01       	movw	r30, r28
    2c0e:	e5 5b       	subi	r30, 0xB5	; 181
    2c10:	ff 4f       	sbci	r31, 0xFF	; 255
    2c12:	80 81       	ld	r24, Z
    2c14:	91 81       	ldd	r25, Z+1	; 0x01
    2c16:	00 97       	sbiw	r24, 0x00	; 0
    2c18:	d1 f6       	brne	.-76     	; 0x2bce <main+0x2088>
    2c1a:	27 c0       	rjmp	.+78     	; 0x2c6a <main+0x2124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c1c:	8e 01       	movw	r16, r28
    2c1e:	05 5b       	subi	r16, 0xB5	; 181
    2c20:	1f 4f       	sbci	r17, 0xFF	; 255
    2c22:	fe 01       	movw	r30, r28
    2c24:	e3 5b       	subi	r30, 0xB3	; 179
    2c26:	ff 4f       	sbci	r31, 0xFF	; 255
    2c28:	60 81       	ld	r22, Z
    2c2a:	71 81       	ldd	r23, Z+1	; 0x01
    2c2c:	82 81       	ldd	r24, Z+2	; 0x02
    2c2e:	93 81       	ldd	r25, Z+3	; 0x03
    2c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	f8 01       	movw	r30, r16
    2c3a:	91 83       	std	Z+1, r25	; 0x01
    2c3c:	80 83       	st	Z, r24
    2c3e:	de 01       	movw	r26, r28
    2c40:	a9 5b       	subi	r26, 0xB9	; 185
    2c42:	bf 4f       	sbci	r27, 0xFF	; 255
    2c44:	fe 01       	movw	r30, r28
    2c46:	e5 5b       	subi	r30, 0xB5	; 181
    2c48:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4a:	80 81       	ld	r24, Z
    2c4c:	91 81       	ldd	r25, Z+1	; 0x01
    2c4e:	8d 93       	st	X+, r24
    2c50:	9c 93       	st	X, r25
    2c52:	fe 01       	movw	r30, r28
    2c54:	e9 5b       	subi	r30, 0xB9	; 185
    2c56:	ff 4f       	sbci	r31, 0xFF	; 255
    2c58:	80 81       	ld	r24, Z
    2c5a:	91 81       	ldd	r25, Z+1	; 0x01
    2c5c:	01 97       	sbiw	r24, 0x01	; 1
    2c5e:	f1 f7       	brne	.-4      	; 0x2c5c <main+0x2116>
    2c60:	fe 01       	movw	r30, r28
    2c62:	e9 5b       	subi	r30, 0xB9	; 185
    2c64:	ff 4f       	sbci	r31, 0xFF	; 255
    2c66:	91 83       	std	Z+1, r25	; 0x01
    2c68:	80 83       	st	Z, r24
			_delay_ms(3000);
			UART_sendByte(DOOR_UNLOCKING); // MC2 is ready
    2c6a:	88 e9       	ldi	r24, 0x98	; 152
    2c6c:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <UART_sendByte>
			UART_receivestring(string); // receive the string
    2c70:	ce 01       	movw	r24, r28
    2c72:	8f 58       	subi	r24, 0x8F	; 143
    2c74:	9e 4f       	sbci	r25, 0xFE	; 254
    2c76:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <UART_receivestring>
			LCD_clearScreen();
    2c7a:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <LCD_clearScreen>
			LCD_displayString(string); // display the string on LCD
    2c7e:	ce 01       	movw	r24, r28
    2c80:	8f 58       	subi	r24, 0x8F	; 143
    2c82:	9e 4f       	sbci	r25, 0xFE	; 254
    2c84:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <LCD_displayString>
    2c88:	fe 01       	movw	r30, r28
    2c8a:	ed 5b       	subi	r30, 0xBD	; 189
    2c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8e:	80 e0       	ldi	r24, 0x00	; 0
    2c90:	90 e8       	ldi	r25, 0x80	; 128
    2c92:	ab e3       	ldi	r26, 0x3B	; 59
    2c94:	b5 e4       	ldi	r27, 0x45	; 69
    2c96:	80 83       	st	Z, r24
    2c98:	91 83       	std	Z+1, r25	; 0x01
    2c9a:	a2 83       	std	Z+2, r26	; 0x02
    2c9c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c9e:	8e 01       	movw	r16, r28
    2ca0:	01 5c       	subi	r16, 0xC1	; 193
    2ca2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ca4:	fe 01       	movw	r30, r28
    2ca6:	ed 5b       	subi	r30, 0xBD	; 189
    2ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    2caa:	60 81       	ld	r22, Z
    2cac:	71 81       	ldd	r23, Z+1	; 0x01
    2cae:	82 81       	ldd	r24, Z+2	; 0x02
    2cb0:	93 81       	ldd	r25, Z+3	; 0x03
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	4a ef       	ldi	r20, 0xFA	; 250
    2cb8:	54 e4       	ldi	r21, 0x44	; 68
    2cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	f8 01       	movw	r30, r16
    2cc4:	80 83       	st	Z, r24
    2cc6:	91 83       	std	Z+1, r25	; 0x01
    2cc8:	a2 83       	std	Z+2, r26	; 0x02
    2cca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ccc:	fe 01       	movw	r30, r28
    2cce:	ff 96       	adiw	r30, 0x3f	; 63
    2cd0:	60 81       	ld	r22, Z
    2cd2:	71 81       	ldd	r23, Z+1	; 0x01
    2cd4:	82 81       	ldd	r24, Z+2	; 0x02
    2cd6:	93 81       	ldd	r25, Z+3	; 0x03
    2cd8:	20 e0       	ldi	r18, 0x00	; 0
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	40 e8       	ldi	r20, 0x80	; 128
    2cde:	5f e3       	ldi	r21, 0x3F	; 63
    2ce0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ce4:	88 23       	and	r24, r24
    2ce6:	2c f4       	brge	.+10     	; 0x2cf2 <main+0x21ac>
		__ticks = 1;
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	9e af       	std	Y+62, r25	; 0x3e
    2cee:	8d af       	std	Y+61, r24	; 0x3d
    2cf0:	46 c0       	rjmp	.+140    	; 0x2d7e <main+0x2238>
	else if (__tmp > 65535)
    2cf2:	fe 01       	movw	r30, r28
    2cf4:	ff 96       	adiw	r30, 0x3f	; 63
    2cf6:	60 81       	ld	r22, Z
    2cf8:	71 81       	ldd	r23, Z+1	; 0x01
    2cfa:	82 81       	ldd	r24, Z+2	; 0x02
    2cfc:	93 81       	ldd	r25, Z+3	; 0x03
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	3f ef       	ldi	r19, 0xFF	; 255
    2d02:	4f e7       	ldi	r20, 0x7F	; 127
    2d04:	57 e4       	ldi	r21, 0x47	; 71
    2d06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d0a:	18 16       	cp	r1, r24
    2d0c:	64 f5       	brge	.+88     	; 0x2d66 <main+0x2220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d0e:	fe 01       	movw	r30, r28
    2d10:	ed 5b       	subi	r30, 0xBD	; 189
    2d12:	ff 4f       	sbci	r31, 0xFF	; 255
    2d14:	60 81       	ld	r22, Z
    2d16:	71 81       	ldd	r23, Z+1	; 0x01
    2d18:	82 81       	ldd	r24, Z+2	; 0x02
    2d1a:	93 81       	ldd	r25, Z+3	; 0x03
    2d1c:	20 e0       	ldi	r18, 0x00	; 0
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	40 e2       	ldi	r20, 0x20	; 32
    2d22:	51 e4       	ldi	r21, 0x41	; 65
    2d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	bc 01       	movw	r22, r24
    2d2e:	cd 01       	movw	r24, r26
    2d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d34:	dc 01       	movw	r26, r24
    2d36:	cb 01       	movw	r24, r22
    2d38:	9e af       	std	Y+62, r25	; 0x3e
    2d3a:	8d af       	std	Y+61, r24	; 0x3d
    2d3c:	0f c0       	rjmp	.+30     	; 0x2d5c <main+0x2216>
    2d3e:	88 ec       	ldi	r24, 0xC8	; 200
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	9c af       	std	Y+60, r25	; 0x3c
    2d44:	8b af       	std	Y+59, r24	; 0x3b
    2d46:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d48:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d4a:	01 97       	sbiw	r24, 0x01	; 1
    2d4c:	f1 f7       	brne	.-4      	; 0x2d4a <main+0x2204>
    2d4e:	9c af       	std	Y+60, r25	; 0x3c
    2d50:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d52:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d54:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d56:	01 97       	sbiw	r24, 0x01	; 1
    2d58:	9e af       	std	Y+62, r25	; 0x3e
    2d5a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d5c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d5e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d60:	00 97       	sbiw	r24, 0x00	; 0
    2d62:	69 f7       	brne	.-38     	; 0x2d3e <main+0x21f8>
    2d64:	16 c0       	rjmp	.+44     	; 0x2d92 <main+0x224c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d66:	fe 01       	movw	r30, r28
    2d68:	ff 96       	adiw	r30, 0x3f	; 63
    2d6a:	60 81       	ld	r22, Z
    2d6c:	71 81       	ldd	r23, Z+1	; 0x01
    2d6e:	82 81       	ldd	r24, Z+2	; 0x02
    2d70:	93 81       	ldd	r25, Z+3	; 0x03
    2d72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d76:	dc 01       	movw	r26, r24
    2d78:	cb 01       	movw	r24, r22
    2d7a:	9e af       	std	Y+62, r25	; 0x3e
    2d7c:	8d af       	std	Y+61, r24	; 0x3d
    2d7e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d80:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d82:	9a af       	std	Y+58, r25	; 0x3a
    2d84:	89 af       	std	Y+57, r24	; 0x39
    2d86:	89 ad       	ldd	r24, Y+57	; 0x39
    2d88:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d8a:	01 97       	sbiw	r24, 0x01	; 1
    2d8c:	f1 f7       	brne	.-4      	; 0x2d8a <main+0x2244>
    2d8e:	9a af       	std	Y+58, r25	; 0x3a
    2d90:	89 af       	std	Y+57, r24	; 0x39
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	90 e8       	ldi	r25, 0x80	; 128
    2d96:	ab e3       	ldi	r26, 0x3B	; 59
    2d98:	b5 e4       	ldi	r27, 0x45	; 69
    2d9a:	8d ab       	std	Y+53, r24	; 0x35
    2d9c:	9e ab       	std	Y+54, r25	; 0x36
    2d9e:	af ab       	std	Y+55, r26	; 0x37
    2da0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da2:	6d a9       	ldd	r22, Y+53	; 0x35
    2da4:	7e a9       	ldd	r23, Y+54	; 0x36
    2da6:	8f a9       	ldd	r24, Y+55	; 0x37
    2da8:	98 ad       	ldd	r25, Y+56	; 0x38
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	4a ef       	ldi	r20, 0xFA	; 250
    2db0:	54 e4       	ldi	r21, 0x44	; 68
    2db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db6:	dc 01       	movw	r26, r24
    2db8:	cb 01       	movw	r24, r22
    2dba:	89 ab       	std	Y+49, r24	; 0x31
    2dbc:	9a ab       	std	Y+50, r25	; 0x32
    2dbe:	ab ab       	std	Y+51, r26	; 0x33
    2dc0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2dc2:	69 a9       	ldd	r22, Y+49	; 0x31
    2dc4:	7a a9       	ldd	r23, Y+50	; 0x32
    2dc6:	8b a9       	ldd	r24, Y+51	; 0x33
    2dc8:	9c a9       	ldd	r25, Y+52	; 0x34
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	40 e8       	ldi	r20, 0x80	; 128
    2dd0:	5f e3       	ldi	r21, 0x3F	; 63
    2dd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dd6:	88 23       	and	r24, r24
    2dd8:	2c f4       	brge	.+10     	; 0x2de4 <main+0x229e>
		__ticks = 1;
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	98 ab       	std	Y+48, r25	; 0x30
    2de0:	8f a7       	std	Y+47, r24	; 0x2f
    2de2:	3f c0       	rjmp	.+126    	; 0x2e62 <main+0x231c>
	else if (__tmp > 65535)
    2de4:	69 a9       	ldd	r22, Y+49	; 0x31
    2de6:	7a a9       	ldd	r23, Y+50	; 0x32
    2de8:	8b a9       	ldd	r24, Y+51	; 0x33
    2dea:	9c a9       	ldd	r25, Y+52	; 0x34
    2dec:	20 e0       	ldi	r18, 0x00	; 0
    2dee:	3f ef       	ldi	r19, 0xFF	; 255
    2df0:	4f e7       	ldi	r20, 0x7F	; 127
    2df2:	57 e4       	ldi	r21, 0x47	; 71
    2df4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2df8:	18 16       	cp	r1, r24
    2dfa:	4c f5       	brge	.+82     	; 0x2e4e <main+0x2308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dfc:	6d a9       	ldd	r22, Y+53	; 0x35
    2dfe:	7e a9       	ldd	r23, Y+54	; 0x36
    2e00:	8f a9       	ldd	r24, Y+55	; 0x37
    2e02:	98 ad       	ldd	r25, Y+56	; 0x38
    2e04:	20 e0       	ldi	r18, 0x00	; 0
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	40 e2       	ldi	r20, 0x20	; 32
    2e0a:	51 e4       	ldi	r21, 0x41	; 65
    2e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	bc 01       	movw	r22, r24
    2e16:	cd 01       	movw	r24, r26
    2e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	98 ab       	std	Y+48, r25	; 0x30
    2e22:	8f a7       	std	Y+47, r24	; 0x2f
    2e24:	0f c0       	rjmp	.+30     	; 0x2e44 <main+0x22fe>
    2e26:	88 ec       	ldi	r24, 0xC8	; 200
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	9e a7       	std	Y+46, r25	; 0x2e
    2e2c:	8d a7       	std	Y+45, r24	; 0x2d
    2e2e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e30:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e32:	01 97       	sbiw	r24, 0x01	; 1
    2e34:	f1 f7       	brne	.-4      	; 0x2e32 <main+0x22ec>
    2e36:	9e a7       	std	Y+46, r25	; 0x2e
    2e38:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e3c:	98 a9       	ldd	r25, Y+48	; 0x30
    2e3e:	01 97       	sbiw	r24, 0x01	; 1
    2e40:	98 ab       	std	Y+48, r25	; 0x30
    2e42:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e44:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e46:	98 a9       	ldd	r25, Y+48	; 0x30
    2e48:	00 97       	sbiw	r24, 0x00	; 0
    2e4a:	69 f7       	brne	.-38     	; 0x2e26 <main+0x22e0>
    2e4c:	14 c0       	rjmp	.+40     	; 0x2e76 <main+0x2330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e4e:	69 a9       	ldd	r22, Y+49	; 0x31
    2e50:	7a a9       	ldd	r23, Y+50	; 0x32
    2e52:	8b a9       	ldd	r24, Y+51	; 0x33
    2e54:	9c a9       	ldd	r25, Y+52	; 0x34
    2e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	98 ab       	std	Y+48, r25	; 0x30
    2e60:	8f a7       	std	Y+47, r24	; 0x2f
    2e62:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e64:	98 a9       	ldd	r25, Y+48	; 0x30
    2e66:	9c a7       	std	Y+44, r25	; 0x2c
    2e68:	8b a7       	std	Y+43, r24	; 0x2b
    2e6a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e6c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e6e:	01 97       	sbiw	r24, 0x01	; 1
    2e70:	f1 f7       	brne	.-4      	; 0x2e6e <main+0x2328>
    2e72:	9c a7       	std	Y+44, r25	; 0x2c
    2e74:	8b a7       	std	Y+43, r24	; 0x2b
    2e76:	80 e0       	ldi	r24, 0x00	; 0
    2e78:	90 e8       	ldi	r25, 0x80	; 128
    2e7a:	ab e3       	ldi	r26, 0x3B	; 59
    2e7c:	b5 e4       	ldi	r27, 0x45	; 69
    2e7e:	8f a3       	std	Y+39, r24	; 0x27
    2e80:	98 a7       	std	Y+40, r25	; 0x28
    2e82:	a9 a7       	std	Y+41, r26	; 0x29
    2e84:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e86:	6f a1       	ldd	r22, Y+39	; 0x27
    2e88:	78 a5       	ldd	r23, Y+40	; 0x28
    2e8a:	89 a5       	ldd	r24, Y+41	; 0x29
    2e8c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	4a ef       	ldi	r20, 0xFA	; 250
    2e94:	54 e4       	ldi	r21, 0x44	; 68
    2e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	8b a3       	std	Y+35, r24	; 0x23
    2ea0:	9c a3       	std	Y+36, r25	; 0x24
    2ea2:	ad a3       	std	Y+37, r26	; 0x25
    2ea4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ea6:	6b a1       	ldd	r22, Y+35	; 0x23
    2ea8:	7c a1       	ldd	r23, Y+36	; 0x24
    2eaa:	8d a1       	ldd	r24, Y+37	; 0x25
    2eac:	9e a1       	ldd	r25, Y+38	; 0x26
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	40 e8       	ldi	r20, 0x80	; 128
    2eb4:	5f e3       	ldi	r21, 0x3F	; 63
    2eb6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2eba:	88 23       	and	r24, r24
    2ebc:	2c f4       	brge	.+10     	; 0x2ec8 <main+0x2382>
		__ticks = 1;
    2ebe:	81 e0       	ldi	r24, 0x01	; 1
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	9a a3       	std	Y+34, r25	; 0x22
    2ec4:	89 a3       	std	Y+33, r24	; 0x21
    2ec6:	3f c0       	rjmp	.+126    	; 0x2f46 <main+0x2400>
	else if (__tmp > 65535)
    2ec8:	6b a1       	ldd	r22, Y+35	; 0x23
    2eca:	7c a1       	ldd	r23, Y+36	; 0x24
    2ecc:	8d a1       	ldd	r24, Y+37	; 0x25
    2ece:	9e a1       	ldd	r25, Y+38	; 0x26
    2ed0:	20 e0       	ldi	r18, 0x00	; 0
    2ed2:	3f ef       	ldi	r19, 0xFF	; 255
    2ed4:	4f e7       	ldi	r20, 0x7F	; 127
    2ed6:	57 e4       	ldi	r21, 0x47	; 71
    2ed8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2edc:	18 16       	cp	r1, r24
    2ede:	4c f5       	brge	.+82     	; 0x2f32 <main+0x23ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ee0:	6f a1       	ldd	r22, Y+39	; 0x27
    2ee2:	78 a5       	ldd	r23, Y+40	; 0x28
    2ee4:	89 a5       	ldd	r24, Y+41	; 0x29
    2ee6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ee8:	20 e0       	ldi	r18, 0x00	; 0
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	40 e2       	ldi	r20, 0x20	; 32
    2eee:	51 e4       	ldi	r21, 0x41	; 65
    2ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	bc 01       	movw	r22, r24
    2efa:	cd 01       	movw	r24, r26
    2efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f00:	dc 01       	movw	r26, r24
    2f02:	cb 01       	movw	r24, r22
    2f04:	9a a3       	std	Y+34, r25	; 0x22
    2f06:	89 a3       	std	Y+33, r24	; 0x21
    2f08:	0f c0       	rjmp	.+30     	; 0x2f28 <main+0x23e2>
    2f0a:	88 ec       	ldi	r24, 0xC8	; 200
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	98 a3       	std	Y+32, r25	; 0x20
    2f10:	8f 8f       	std	Y+31, r24	; 0x1f
    2f12:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f14:	98 a1       	ldd	r25, Y+32	; 0x20
    2f16:	01 97       	sbiw	r24, 0x01	; 1
    2f18:	f1 f7       	brne	.-4      	; 0x2f16 <main+0x23d0>
    2f1a:	98 a3       	std	Y+32, r25	; 0x20
    2f1c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f1e:	89 a1       	ldd	r24, Y+33	; 0x21
    2f20:	9a a1       	ldd	r25, Y+34	; 0x22
    2f22:	01 97       	sbiw	r24, 0x01	; 1
    2f24:	9a a3       	std	Y+34, r25	; 0x22
    2f26:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f28:	89 a1       	ldd	r24, Y+33	; 0x21
    2f2a:	9a a1       	ldd	r25, Y+34	; 0x22
    2f2c:	00 97       	sbiw	r24, 0x00	; 0
    2f2e:	69 f7       	brne	.-38     	; 0x2f0a <main+0x23c4>
    2f30:	14 c0       	rjmp	.+40     	; 0x2f5a <main+0x2414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f32:	6b a1       	ldd	r22, Y+35	; 0x23
    2f34:	7c a1       	ldd	r23, Y+36	; 0x24
    2f36:	8d a1       	ldd	r24, Y+37	; 0x25
    2f38:	9e a1       	ldd	r25, Y+38	; 0x26
    2f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f3e:	dc 01       	movw	r26, r24
    2f40:	cb 01       	movw	r24, r22
    2f42:	9a a3       	std	Y+34, r25	; 0x22
    2f44:	89 a3       	std	Y+33, r24	; 0x21
    2f46:	89 a1       	ldd	r24, Y+33	; 0x21
    2f48:	9a a1       	ldd	r25, Y+34	; 0x22
    2f4a:	9e 8f       	std	Y+30, r25	; 0x1e
    2f4c:	8d 8f       	std	Y+29, r24	; 0x1d
    2f4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f50:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f52:	01 97       	sbiw	r24, 0x01	; 1
    2f54:	f1 f7       	brne	.-4      	; 0x2f52 <main+0x240c>
    2f56:	9e 8f       	std	Y+30, r25	; 0x1e
    2f58:	8d 8f       	std	Y+29, r24	; 0x1d
    2f5a:	80 e0       	ldi	r24, 0x00	; 0
    2f5c:	90 e8       	ldi	r25, 0x80	; 128
    2f5e:	ab e3       	ldi	r26, 0x3B	; 59
    2f60:	b5 e4       	ldi	r27, 0x45	; 69
    2f62:	89 8f       	std	Y+25, r24	; 0x19
    2f64:	9a 8f       	std	Y+26, r25	; 0x1a
    2f66:	ab 8f       	std	Y+27, r26	; 0x1b
    2f68:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f6a:	69 8d       	ldd	r22, Y+25	; 0x19
    2f6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f72:	20 e0       	ldi	r18, 0x00	; 0
    2f74:	30 e0       	ldi	r19, 0x00	; 0
    2f76:	4a ef       	ldi	r20, 0xFA	; 250
    2f78:	54 e4       	ldi	r21, 0x44	; 68
    2f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cb 01       	movw	r24, r22
    2f82:	8d 8b       	std	Y+21, r24	; 0x15
    2f84:	9e 8b       	std	Y+22, r25	; 0x16
    2f86:	af 8b       	std	Y+23, r26	; 0x17
    2f88:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f8a:	6d 89       	ldd	r22, Y+21	; 0x15
    2f8c:	7e 89       	ldd	r23, Y+22	; 0x16
    2f8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f90:	98 8d       	ldd	r25, Y+24	; 0x18
    2f92:	20 e0       	ldi	r18, 0x00	; 0
    2f94:	30 e0       	ldi	r19, 0x00	; 0
    2f96:	40 e8       	ldi	r20, 0x80	; 128
    2f98:	5f e3       	ldi	r21, 0x3F	; 63
    2f9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f9e:	88 23       	and	r24, r24
    2fa0:	2c f4       	brge	.+10     	; 0x2fac <main+0x2466>
		__ticks = 1;
    2fa2:	81 e0       	ldi	r24, 0x01	; 1
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	9c 8b       	std	Y+20, r25	; 0x14
    2fa8:	8b 8b       	std	Y+19, r24	; 0x13
    2faa:	3f c0       	rjmp	.+126    	; 0x302a <main+0x24e4>
	else if (__tmp > 65535)
    2fac:	6d 89       	ldd	r22, Y+21	; 0x15
    2fae:	7e 89       	ldd	r23, Y+22	; 0x16
    2fb0:	8f 89       	ldd	r24, Y+23	; 0x17
    2fb2:	98 8d       	ldd	r25, Y+24	; 0x18
    2fb4:	20 e0       	ldi	r18, 0x00	; 0
    2fb6:	3f ef       	ldi	r19, 0xFF	; 255
    2fb8:	4f e7       	ldi	r20, 0x7F	; 127
    2fba:	57 e4       	ldi	r21, 0x47	; 71
    2fbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fc0:	18 16       	cp	r1, r24
    2fc2:	4c f5       	brge	.+82     	; 0x3016 <main+0x24d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fc4:	69 8d       	ldd	r22, Y+25	; 0x19
    2fc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fcc:	20 e0       	ldi	r18, 0x00	; 0
    2fce:	30 e0       	ldi	r19, 0x00	; 0
    2fd0:	40 e2       	ldi	r20, 0x20	; 32
    2fd2:	51 e4       	ldi	r21, 0x41	; 65
    2fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd8:	dc 01       	movw	r26, r24
    2fda:	cb 01       	movw	r24, r22
    2fdc:	bc 01       	movw	r22, r24
    2fde:	cd 01       	movw	r24, r26
    2fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe4:	dc 01       	movw	r26, r24
    2fe6:	cb 01       	movw	r24, r22
    2fe8:	9c 8b       	std	Y+20, r25	; 0x14
    2fea:	8b 8b       	std	Y+19, r24	; 0x13
    2fec:	0f c0       	rjmp	.+30     	; 0x300c <main+0x24c6>
    2fee:	88 ec       	ldi	r24, 0xC8	; 200
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	9a 8b       	std	Y+18, r25	; 0x12
    2ff4:	89 8b       	std	Y+17, r24	; 0x11
    2ff6:	89 89       	ldd	r24, Y+17	; 0x11
    2ff8:	9a 89       	ldd	r25, Y+18	; 0x12
    2ffa:	01 97       	sbiw	r24, 0x01	; 1
    2ffc:	f1 f7       	brne	.-4      	; 0x2ffa <main+0x24b4>
    2ffe:	9a 8b       	std	Y+18, r25	; 0x12
    3000:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3002:	8b 89       	ldd	r24, Y+19	; 0x13
    3004:	9c 89       	ldd	r25, Y+20	; 0x14
    3006:	01 97       	sbiw	r24, 0x01	; 1
    3008:	9c 8b       	std	Y+20, r25	; 0x14
    300a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    300c:	8b 89       	ldd	r24, Y+19	; 0x13
    300e:	9c 89       	ldd	r25, Y+20	; 0x14
    3010:	00 97       	sbiw	r24, 0x00	; 0
    3012:	69 f7       	brne	.-38     	; 0x2fee <main+0x24a8>
    3014:	14 c0       	rjmp	.+40     	; 0x303e <main+0x24f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3016:	6d 89       	ldd	r22, Y+21	; 0x15
    3018:	7e 89       	ldd	r23, Y+22	; 0x16
    301a:	8f 89       	ldd	r24, Y+23	; 0x17
    301c:	98 8d       	ldd	r25, Y+24	; 0x18
    301e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3022:	dc 01       	movw	r26, r24
    3024:	cb 01       	movw	r24, r22
    3026:	9c 8b       	std	Y+20, r25	; 0x14
    3028:	8b 8b       	std	Y+19, r24	; 0x13
    302a:	8b 89       	ldd	r24, Y+19	; 0x13
    302c:	9c 89       	ldd	r25, Y+20	; 0x14
    302e:	98 8b       	std	Y+16, r25	; 0x10
    3030:	8f 87       	std	Y+15, r24	; 0x0f
    3032:	8f 85       	ldd	r24, Y+15	; 0x0f
    3034:	98 89       	ldd	r25, Y+16	; 0x10
    3036:	01 97       	sbiw	r24, 0x01	; 1
    3038:	f1 f7       	brne	.-4      	; 0x3036 <main+0x24f0>
    303a:	98 8b       	std	Y+16, r25	; 0x10
    303c:	8f 87       	std	Y+15, r24	; 0x0f
    303e:	80 e0       	ldi	r24, 0x00	; 0
    3040:	90 e8       	ldi	r25, 0x80	; 128
    3042:	ab e3       	ldi	r26, 0x3B	; 59
    3044:	b5 e4       	ldi	r27, 0x45	; 69
    3046:	8b 87       	std	Y+11, r24	; 0x0b
    3048:	9c 87       	std	Y+12, r25	; 0x0c
    304a:	ad 87       	std	Y+13, r26	; 0x0d
    304c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    304e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3050:	7c 85       	ldd	r23, Y+12	; 0x0c
    3052:	8d 85       	ldd	r24, Y+13	; 0x0d
    3054:	9e 85       	ldd	r25, Y+14	; 0x0e
    3056:	20 e0       	ldi	r18, 0x00	; 0
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	4a ef       	ldi	r20, 0xFA	; 250
    305c:	54 e4       	ldi	r21, 0x44	; 68
    305e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	8f 83       	std	Y+7, r24	; 0x07
    3068:	98 87       	std	Y+8, r25	; 0x08
    306a:	a9 87       	std	Y+9, r26	; 0x09
    306c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    306e:	6f 81       	ldd	r22, Y+7	; 0x07
    3070:	78 85       	ldd	r23, Y+8	; 0x08
    3072:	89 85       	ldd	r24, Y+9	; 0x09
    3074:	9a 85       	ldd	r25, Y+10	; 0x0a
    3076:	20 e0       	ldi	r18, 0x00	; 0
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	40 e8       	ldi	r20, 0x80	; 128
    307c:	5f e3       	ldi	r21, 0x3F	; 63
    307e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3082:	88 23       	and	r24, r24
    3084:	2c f4       	brge	.+10     	; 0x3090 <main+0x254a>
		__ticks = 1;
    3086:	81 e0       	ldi	r24, 0x01	; 1
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	9e 83       	std	Y+6, r25	; 0x06
    308c:	8d 83       	std	Y+5, r24	; 0x05
    308e:	3f c0       	rjmp	.+126    	; 0x310e <main+0x25c8>
	else if (__tmp > 65535)
    3090:	6f 81       	ldd	r22, Y+7	; 0x07
    3092:	78 85       	ldd	r23, Y+8	; 0x08
    3094:	89 85       	ldd	r24, Y+9	; 0x09
    3096:	9a 85       	ldd	r25, Y+10	; 0x0a
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	3f ef       	ldi	r19, 0xFF	; 255
    309c:	4f e7       	ldi	r20, 0x7F	; 127
    309e:	57 e4       	ldi	r21, 0x47	; 71
    30a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30a4:	18 16       	cp	r1, r24
    30a6:	4c f5       	brge	.+82     	; 0x30fa <main+0x25b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    30aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    30ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	40 e2       	ldi	r20, 0x20	; 32
    30b6:	51 e4       	ldi	r21, 0x41	; 65
    30b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30bc:	dc 01       	movw	r26, r24
    30be:	cb 01       	movw	r24, r22
    30c0:	bc 01       	movw	r22, r24
    30c2:	cd 01       	movw	r24, r26
    30c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c8:	dc 01       	movw	r26, r24
    30ca:	cb 01       	movw	r24, r22
    30cc:	9e 83       	std	Y+6, r25	; 0x06
    30ce:	8d 83       	std	Y+5, r24	; 0x05
    30d0:	0f c0       	rjmp	.+30     	; 0x30f0 <main+0x25aa>
    30d2:	88 ec       	ldi	r24, 0xC8	; 200
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	9c 83       	std	Y+4, r25	; 0x04
    30d8:	8b 83       	std	Y+3, r24	; 0x03
    30da:	8b 81       	ldd	r24, Y+3	; 0x03
    30dc:	9c 81       	ldd	r25, Y+4	; 0x04
    30de:	01 97       	sbiw	r24, 0x01	; 1
    30e0:	f1 f7       	brne	.-4      	; 0x30de <main+0x2598>
    30e2:	9c 83       	std	Y+4, r25	; 0x04
    30e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e6:	8d 81       	ldd	r24, Y+5	; 0x05
    30e8:	9e 81       	ldd	r25, Y+6	; 0x06
    30ea:	01 97       	sbiw	r24, 0x01	; 1
    30ec:	9e 83       	std	Y+6, r25	; 0x06
    30ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f0:	8d 81       	ldd	r24, Y+5	; 0x05
    30f2:	9e 81       	ldd	r25, Y+6	; 0x06
    30f4:	00 97       	sbiw	r24, 0x00	; 0
    30f6:	69 f7       	brne	.-38     	; 0x30d2 <main+0x258c>
    30f8:	14 c0       	rjmp	.+40     	; 0x3122 <main+0x25dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30fa:	6f 81       	ldd	r22, Y+7	; 0x07
    30fc:	78 85       	ldd	r23, Y+8	; 0x08
    30fe:	89 85       	ldd	r24, Y+9	; 0x09
    3100:	9a 85       	ldd	r25, Y+10	; 0x0a
    3102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3106:	dc 01       	movw	r26, r24
    3108:	cb 01       	movw	r24, r22
    310a:	9e 83       	std	Y+6, r25	; 0x06
    310c:	8d 83       	std	Y+5, r24	; 0x05
    310e:	8d 81       	ldd	r24, Y+5	; 0x05
    3110:	9e 81       	ldd	r25, Y+6	; 0x06
    3112:	9a 83       	std	Y+2, r25	; 0x02
    3114:	89 83       	std	Y+1, r24	; 0x01
    3116:	89 81       	ldd	r24, Y+1	; 0x01
    3118:	9a 81       	ldd	r25, Y+2	; 0x02
    311a:	01 97       	sbiw	r24, 0x01	; 1
    311c:	f1 f7       	brne	.-4      	; 0x311a <main+0x25d4>
    311e:	9a 83       	std	Y+2, r25	; 0x02
    3120:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(3000);
			_delay_ms(3000);
			_delay_ms(3000);
			_delay_ms(3000);
			_delay_ms(3000);
			LCD_clearScreen();
    3122:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <LCD_clearScreen>
			LCD_displayString("notfication"); // display the string on LCD
    3126:	8a ed       	ldi	r24, 0xDA	; 218
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <LCD_displayString>
    312e:	0c 94 89 0f 	jmp	0x1f12	; 0x1f12 <main+0x13cc>

00003132 <passwordCompare>:
			break;
		}
	}
}
uint8 passwordCompare(void)
{
    3132:	df 93       	push	r29
    3134:	cf 93       	push	r28
    3136:	00 d0       	rcall	.+0      	; 0x3138 <passwordCompare+0x6>
    3138:	cd b7       	in	r28, 0x3d	; 61
    313a:	de b7       	in	r29, 0x3e	; 62
	uint8 i=0;
    313c:	19 82       	std	Y+1, r1	; 0x01
	for (i = 0; i < ArraySize; i++)
    313e:	19 82       	std	Y+1, r1	; 0x01
    3140:	15 c0       	rjmp	.+42     	; 0x316c <passwordCompare+0x3a>
	{
		if (password[i] != passwordconfirmation[i])
    3142:	89 81       	ldd	r24, Y+1	; 0x01
    3144:	88 2f       	mov	r24, r24
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	fc 01       	movw	r30, r24
    314a:	e8 50       	subi	r30, 0x08	; 8
    314c:	ff 4f       	sbci	r31, 0xFF	; 255
    314e:	20 81       	ld	r18, Z
    3150:	89 81       	ldd	r24, Y+1	; 0x01
    3152:	88 2f       	mov	r24, r24
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	fc 01       	movw	r30, r24
    3158:	e3 50       	subi	r30, 0x03	; 3
    315a:	ff 4f       	sbci	r31, 0xFF	; 255
    315c:	80 81       	ld	r24, Z
    315e:	28 17       	cp	r18, r24
    3160:	11 f0       	breq	.+4      	; 0x3166 <passwordCompare+0x34>
		{
			return 0;
    3162:	1a 82       	std	Y+2, r1	; 0x02
    3164:	08 c0       	rjmp	.+16     	; 0x3176 <passwordCompare+0x44>
	}
}
uint8 passwordCompare(void)
{
	uint8 i=0;
	for (i = 0; i < ArraySize; i++)
    3166:	89 81       	ldd	r24, Y+1	; 0x01
    3168:	8f 5f       	subi	r24, 0xFF	; 255
    316a:	89 83       	std	Y+1, r24	; 0x01
    316c:	89 81       	ldd	r24, Y+1	; 0x01
    316e:	85 30       	cpi	r24, 0x05	; 5
    3170:	40 f3       	brcs	.-48     	; 0x3142 <passwordCompare+0x10>
		if (password[i] != passwordconfirmation[i])
		{
			return 0;
		}
	}
	return 1;
    3172:	81 e0       	ldi	r24, 0x01	; 1
    3174:	8a 83       	std	Y+2, r24	; 0x02
    3176:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3178:	0f 90       	pop	r0
    317a:	0f 90       	pop	r0
    317c:	cf 91       	pop	r28
    317e:	df 91       	pop	r29
    3180:	08 95       	ret

00003182 <KeyPad_getPressedKey>:
 unsigned char key;
/******************************Static Functions Prototypes******************************************/
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_Num);
/****************************** Functions Definitions ********************************/
uint8 KeyPad_getPressedKey(void)
{
    3182:	df 93       	push	r29
    3184:	cf 93       	push	r28
    3186:	00 d0       	rcall	.+0      	; 0x3188 <KeyPad_getPressedKey+0x6>
    3188:	cd b7       	in	r28, 0x3d	; 61
    318a:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* 1st loop on columns */
    318c:	1a 82       	std	Y+2, r1	; 0x02
    318e:	4c c0       	rjmp	.+152    	; 0x3228 <KeyPad_getPressedKey+0xa6>
		{
			/*
			 1 output at a time and the rest of cols are inputs
			 */
			KEYPAD_PORT_DIR = (0b00010000<<col);
    3190:	ea e3       	ldi	r30, 0x3A	; 58
    3192:	f0 e0       	ldi	r31, 0x00	; 0
    3194:	8a 81       	ldd	r24, Y+2	; 0x02
    3196:	28 2f       	mov	r18, r24
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	80 e1       	ldi	r24, 0x10	; 16
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	02 c0       	rjmp	.+4      	; 0x31a4 <KeyPad_getPressedKey+0x22>
    31a0:	88 0f       	add	r24, r24
    31a2:	99 1f       	adc	r25, r25
    31a4:	2a 95       	dec	r18
    31a6:	e2 f7       	brpl	.-8      	; 0x31a0 <KeyPad_getPressedKey+0x1e>
    31a8:	80 83       	st	Z, r24
			/*
			 PortA pullup resistors
			 */
			KEYPAD_OUT_PORT = (~(0b00010000<<col));
    31aa:	eb e3       	ldi	r30, 0x3B	; 59
    31ac:	f0 e0       	ldi	r31, 0x00	; 0
    31ae:	8a 81       	ldd	r24, Y+2	; 0x02
    31b0:	28 2f       	mov	r18, r24
    31b2:	30 e0       	ldi	r19, 0x00	; 0
    31b4:	80 e1       	ldi	r24, 0x10	; 16
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	02 2e       	mov	r0, r18
    31ba:	02 c0       	rjmp	.+4      	; 0x31c0 <KeyPad_getPressedKey+0x3e>
    31bc:	88 0f       	add	r24, r24
    31be:	99 1f       	adc	r25, r25
    31c0:	0a 94       	dec	r0
    31c2:	e2 f7       	brpl	.-8      	; 0x31bc <KeyPad_getPressedKey+0x3a>
    31c4:	80 95       	com	r24
    31c6:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* nested 2nd loop on rows */
    31c8:	19 82       	std	Y+1, r1	; 0x01
    31ca:	28 c0       	rjmp	.+80     	; 0x321c <KeyPad_getPressedKey+0x9a>
			{
				/*Check if the bit is cleared to konw if the switch is press in this row*/
				if(BIT_IS_CLEAR(KEYPAD_IN_PORT,row))
    31cc:	e9 e3       	ldi	r30, 0x39	; 57
    31ce:	f0 e0       	ldi	r31, 0x00	; 0
    31d0:	80 81       	ld	r24, Z
    31d2:	28 2f       	mov	r18, r24
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	89 81       	ldd	r24, Y+1	; 0x01
    31d8:	88 2f       	mov	r24, r24
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	a9 01       	movw	r20, r18
    31de:	02 c0       	rjmp	.+4      	; 0x31e4 <KeyPad_getPressedKey+0x62>
    31e0:	55 95       	asr	r21
    31e2:	47 95       	ror	r20
    31e4:	8a 95       	dec	r24
    31e6:	e2 f7       	brpl	.-8      	; 0x31e0 <KeyPad_getPressedKey+0x5e>
    31e8:	ca 01       	movw	r24, r20
    31ea:	81 70       	andi	r24, 0x01	; 1
    31ec:	90 70       	andi	r25, 0x00	; 0
    31ee:	00 97       	sbiw	r24, 0x00	; 0
    31f0:	91 f4       	brne	.+36     	; 0x3216 <KeyPad_getPressedKey+0x94>
				{
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    31f2:	89 81       	ldd	r24, Y+1	; 0x01
    31f4:	88 2f       	mov	r24, r24
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	88 0f       	add	r24, r24
    31fa:	99 1f       	adc	r25, r25
    31fc:	88 0f       	add	r24, r24
    31fe:	99 1f       	adc	r25, r25
    3200:	98 2f       	mov	r25, r24
    3202:	8a 81       	ldd	r24, Y+2	; 0x02
    3204:	89 0f       	add	r24, r25
    3206:	8f 5f       	subi	r24, 0xFF	; 255
    3208:	0e 94 19 19 	call	0x3232	; 0x3232 <KeyPad_4x4_adjustKeyNumber>
				}
			}
		}
	}
}
    320c:	0f 90       	pop	r0
    320e:	0f 90       	pop	r0
    3210:	cf 91       	pop	r28
    3212:	df 91       	pop	r29
    3214:	08 95       	ret
			KEYPAD_PORT_DIR = (0b00010000<<col);
			/*
			 PortA pullup resistors
			 */
			KEYPAD_OUT_PORT = (~(0b00010000<<col));
			for(row=0;row<N_row;row++) /* nested 2nd loop on rows */
    3216:	89 81       	ldd	r24, Y+1	; 0x01
    3218:	8f 5f       	subi	r24, 0xFF	; 255
    321a:	89 83       	std	Y+1, r24	; 0x01
    321c:	89 81       	ldd	r24, Y+1	; 0x01
    321e:	84 30       	cpi	r24, 0x04	; 4
    3220:	a8 f2       	brcs	.-86     	; 0x31cc <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* 1st loop on columns */
    3222:	8a 81       	ldd	r24, Y+2	; 0x02
    3224:	8f 5f       	subi	r24, 0xFF	; 255
    3226:	8a 83       	std	Y+2, r24	; 0x02
    3228:	8a 81       	ldd	r24, Y+2	; 0x02
    322a:	84 30       	cpi	r24, 0x04	; 4
    322c:	08 f4       	brcc	.+2      	; 0x3230 <KeyPad_getPressedKey+0xae>
    322e:	b0 cf       	rjmp	.-160    	; 0x3190 <KeyPad_getPressedKey+0xe>
    3230:	ad cf       	rjmp	.-166    	; 0x318c <KeyPad_getPressedKey+0xa>

00003232 <KeyPad_4x4_adjustKeyNumber>:
	}
}

/******************************Static Functions declaration******************************************/
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_Num)
{
    3232:	df 93       	push	r29
    3234:	cf 93       	push	r28
    3236:	00 d0       	rcall	.+0      	; 0x3238 <KeyPad_4x4_adjustKeyNumber+0x6>
    3238:	00 d0       	rcall	.+0      	; 0x323a <KeyPad_4x4_adjustKeyNumber+0x8>
    323a:	cd b7       	in	r28, 0x3d	; 61
    323c:	de b7       	in	r29, 0x3e	; 62
    323e:	89 83       	std	Y+1, r24	; 0x01
	switch(button_Num)
    3240:	89 81       	ldd	r24, Y+1	; 0x01
    3242:	28 2f       	mov	r18, r24
    3244:	30 e0       	ldi	r19, 0x00	; 0
    3246:	3c 83       	std	Y+4, r19	; 0x04
    3248:	2b 83       	std	Y+3, r18	; 0x03
    324a:	8b 81       	ldd	r24, Y+3	; 0x03
    324c:	9c 81       	ldd	r25, Y+4	; 0x04
    324e:	88 30       	cpi	r24, 0x08	; 8
    3250:	91 05       	cpc	r25, r1
    3252:	09 f4       	brne	.+2      	; 0x3256 <KeyPad_4x4_adjustKeyNumber+0x24>
    3254:	70 c0       	rjmp	.+224    	; 0x3336 <KeyPad_4x4_adjustKeyNumber+0x104>
    3256:	2b 81       	ldd	r18, Y+3	; 0x03
    3258:	3c 81       	ldd	r19, Y+4	; 0x04
    325a:	29 30       	cpi	r18, 0x09	; 9
    325c:	31 05       	cpc	r19, r1
    325e:	5c f5       	brge	.+86     	; 0x32b6 <KeyPad_4x4_adjustKeyNumber+0x84>
    3260:	8b 81       	ldd	r24, Y+3	; 0x03
    3262:	9c 81       	ldd	r25, Y+4	; 0x04
    3264:	84 30       	cpi	r24, 0x04	; 4
    3266:	91 05       	cpc	r25, r1
    3268:	09 f4       	brne	.+2      	; 0x326c <KeyPad_4x4_adjustKeyNumber+0x3a>
    326a:	59 c0       	rjmp	.+178    	; 0x331e <KeyPad_4x4_adjustKeyNumber+0xec>
    326c:	2b 81       	ldd	r18, Y+3	; 0x03
    326e:	3c 81       	ldd	r19, Y+4	; 0x04
    3270:	25 30       	cpi	r18, 0x05	; 5
    3272:	31 05       	cpc	r19, r1
    3274:	9c f4       	brge	.+38     	; 0x329c <KeyPad_4x4_adjustKeyNumber+0x6a>
    3276:	8b 81       	ldd	r24, Y+3	; 0x03
    3278:	9c 81       	ldd	r25, Y+4	; 0x04
    327a:	82 30       	cpi	r24, 0x02	; 2
    327c:	91 05       	cpc	r25, r1
    327e:	09 f4       	brne	.+2      	; 0x3282 <KeyPad_4x4_adjustKeyNumber+0x50>
    3280:	48 c0       	rjmp	.+144    	; 0x3312 <KeyPad_4x4_adjustKeyNumber+0xe0>
    3282:	2b 81       	ldd	r18, Y+3	; 0x03
    3284:	3c 81       	ldd	r19, Y+4	; 0x04
    3286:	23 30       	cpi	r18, 0x03	; 3
    3288:	31 05       	cpc	r19, r1
    328a:	0c f0       	brlt	.+2      	; 0x328e <KeyPad_4x4_adjustKeyNumber+0x5c>
    328c:	45 c0       	rjmp	.+138    	; 0x3318 <KeyPad_4x4_adjustKeyNumber+0xe6>
    328e:	8b 81       	ldd	r24, Y+3	; 0x03
    3290:	9c 81       	ldd	r25, Y+4	; 0x04
    3292:	81 30       	cpi	r24, 0x01	; 1
    3294:	91 05       	cpc	r25, r1
    3296:	09 f4       	brne	.+2      	; 0x329a <KeyPad_4x4_adjustKeyNumber+0x68>
    3298:	39 c0       	rjmp	.+114    	; 0x330c <KeyPad_4x4_adjustKeyNumber+0xda>
    329a:	67 c0       	rjmp	.+206    	; 0x336a <KeyPad_4x4_adjustKeyNumber+0x138>
    329c:	2b 81       	ldd	r18, Y+3	; 0x03
    329e:	3c 81       	ldd	r19, Y+4	; 0x04
    32a0:	26 30       	cpi	r18, 0x06	; 6
    32a2:	31 05       	cpc	r19, r1
    32a4:	09 f4       	brne	.+2      	; 0x32a8 <KeyPad_4x4_adjustKeyNumber+0x76>
    32a6:	41 c0       	rjmp	.+130    	; 0x332a <KeyPad_4x4_adjustKeyNumber+0xf8>
    32a8:	8b 81       	ldd	r24, Y+3	; 0x03
    32aa:	9c 81       	ldd	r25, Y+4	; 0x04
    32ac:	87 30       	cpi	r24, 0x07	; 7
    32ae:	91 05       	cpc	r25, r1
    32b0:	0c f0       	brlt	.+2      	; 0x32b4 <KeyPad_4x4_adjustKeyNumber+0x82>
    32b2:	3e c0       	rjmp	.+124    	; 0x3330 <KeyPad_4x4_adjustKeyNumber+0xfe>
    32b4:	37 c0       	rjmp	.+110    	; 0x3324 <KeyPad_4x4_adjustKeyNumber+0xf2>
    32b6:	2b 81       	ldd	r18, Y+3	; 0x03
    32b8:	3c 81       	ldd	r19, Y+4	; 0x04
    32ba:	2c 30       	cpi	r18, 0x0C	; 12
    32bc:	31 05       	cpc	r19, r1
    32be:	09 f4       	brne	.+2      	; 0x32c2 <KeyPad_4x4_adjustKeyNumber+0x90>
    32c0:	46 c0       	rjmp	.+140    	; 0x334e <KeyPad_4x4_adjustKeyNumber+0x11c>
    32c2:	8b 81       	ldd	r24, Y+3	; 0x03
    32c4:	9c 81       	ldd	r25, Y+4	; 0x04
    32c6:	8d 30       	cpi	r24, 0x0D	; 13
    32c8:	91 05       	cpc	r25, r1
    32ca:	5c f4       	brge	.+22     	; 0x32e2 <KeyPad_4x4_adjustKeyNumber+0xb0>
    32cc:	2b 81       	ldd	r18, Y+3	; 0x03
    32ce:	3c 81       	ldd	r19, Y+4	; 0x04
    32d0:	2a 30       	cpi	r18, 0x0A	; 10
    32d2:	31 05       	cpc	r19, r1
    32d4:	b1 f1       	breq	.+108    	; 0x3342 <KeyPad_4x4_adjustKeyNumber+0x110>
    32d6:	8b 81       	ldd	r24, Y+3	; 0x03
    32d8:	9c 81       	ldd	r25, Y+4	; 0x04
    32da:	8b 30       	cpi	r24, 0x0B	; 11
    32dc:	91 05       	cpc	r25, r1
    32de:	a4 f5       	brge	.+104    	; 0x3348 <KeyPad_4x4_adjustKeyNumber+0x116>
    32e0:	2d c0       	rjmp	.+90     	; 0x333c <KeyPad_4x4_adjustKeyNumber+0x10a>
    32e2:	2b 81       	ldd	r18, Y+3	; 0x03
    32e4:	3c 81       	ldd	r19, Y+4	; 0x04
    32e6:	2e 30       	cpi	r18, 0x0E	; 14
    32e8:	31 05       	cpc	r19, r1
    32ea:	b9 f1       	breq	.+110    	; 0x335a <KeyPad_4x4_adjustKeyNumber+0x128>
    32ec:	8b 81       	ldd	r24, Y+3	; 0x03
    32ee:	9c 81       	ldd	r25, Y+4	; 0x04
    32f0:	8e 30       	cpi	r24, 0x0E	; 14
    32f2:	91 05       	cpc	r25, r1
    32f4:	7c f1       	brlt	.+94     	; 0x3354 <KeyPad_4x4_adjustKeyNumber+0x122>
    32f6:	2b 81       	ldd	r18, Y+3	; 0x03
    32f8:	3c 81       	ldd	r19, Y+4	; 0x04
    32fa:	2f 30       	cpi	r18, 0x0F	; 15
    32fc:	31 05       	cpc	r19, r1
    32fe:	79 f1       	breq	.+94     	; 0x335e <KeyPad_4x4_adjustKeyNumber+0x12c>
    3300:	8b 81       	ldd	r24, Y+3	; 0x03
    3302:	9c 81       	ldd	r25, Y+4	; 0x04
    3304:	80 31       	cpi	r24, 0x10	; 16
    3306:	91 05       	cpc	r25, r1
    3308:	69 f1       	breq	.+90     	; 0x3364 <KeyPad_4x4_adjustKeyNumber+0x132>
    330a:	2f c0       	rjmp	.+94     	; 0x336a <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7;
    330c:	97 e0       	ldi	r25, 0x07	; 7
    330e:	9a 83       	std	Y+2, r25	; 0x02
    3310:	2e c0       	rjmp	.+92     	; 0x336e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8;
    3312:	28 e0       	ldi	r18, 0x08	; 8
    3314:	2a 83       	std	Y+2, r18	; 0x02
    3316:	2b c0       	rjmp	.+86     	; 0x336e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9;
    3318:	39 e0       	ldi	r19, 0x09	; 9
    331a:	3a 83       	std	Y+2, r19	; 0x02
    331c:	28 c0       	rjmp	.+80     	; 0x336e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; /* ASCII Code of % */
    331e:	85 e2       	ldi	r24, 0x25	; 37
    3320:	8a 83       	std	Y+2, r24	; 0x02
    3322:	25 c0       	rjmp	.+74     	; 0x336e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4;
    3324:	94 e0       	ldi	r25, 0x04	; 4
    3326:	9a 83       	std	Y+2, r25	; 0x02
    3328:	22 c0       	rjmp	.+68     	; 0x336e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    332a:	25 e0       	ldi	r18, 0x05	; 5
    332c:	2a 83       	std	Y+2, r18	; 0x02
    332e:	1f c0       	rjmp	.+62     	; 0x336e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6;
    3330:	36 e0       	ldi	r19, 0x06	; 6
    3332:	3a 83       	std	Y+2, r19	; 0x02
    3334:	1c c0       	rjmp	.+56     	; 0x336e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    3336:	8a e2       	ldi	r24, 0x2A	; 42
    3338:	8a 83       	std	Y+2, r24	; 0x02
    333a:	19 c0       	rjmp	.+50     	; 0x336e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 9: return 1;
    333c:	91 e0       	ldi	r25, 0x01	; 1
    333e:	9a 83       	std	Y+2, r25	; 0x02
    3340:	16 c0       	rjmp	.+44     	; 0x336e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2;
    3342:	22 e0       	ldi	r18, 0x02	; 2
    3344:	2a 83       	std	Y+2, r18	; 0x02
    3346:	13 c0       	rjmp	.+38     	; 0x336e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3;
    3348:	33 e0       	ldi	r19, 0x03	; 3
    334a:	3a 83       	std	Y+2, r19	; 0x02
    334c:	10 c0       	rjmp	.+32     	; 0x336e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    334e:	8d e2       	ldi	r24, 0x2D	; 45
    3350:	8a 83       	std	Y+2, r24	; 0x02
    3352:	0d c0       	rjmp	.+26     	; 0x336e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    3354:	9d e0       	ldi	r25, 0x0D	; 13
    3356:	9a 83       	std	Y+2, r25	; 0x02
    3358:	0a c0       	rjmp	.+20     	; 0x336e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 14: return 0;
    335a:	1a 82       	std	Y+2, r1	; 0x02
    335c:	08 c0       	rjmp	.+16     	; 0x336e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    335e:	2d e3       	ldi	r18, 0x3D	; 61
    3360:	2a 83       	std	Y+2, r18	; 0x02
    3362:	05 c0       	rjmp	.+10     	; 0x336e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    3364:	3b e2       	ldi	r19, 0x2B	; 43
    3366:	3a 83       	std	Y+2, r19	; 0x02
    3368:	02 c0       	rjmp	.+4      	; 0x336e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_Num;
    336a:	89 81       	ldd	r24, Y+1	; 0x01
    336c:	8a 83       	std	Y+2, r24	; 0x02
    336e:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    3370:	0f 90       	pop	r0
    3372:	0f 90       	pop	r0
    3374:	0f 90       	pop	r0
    3376:	0f 90       	pop	r0
    3378:	cf 91       	pop	r28
    337a:	df 91       	pop	r29
    337c:	08 95       	ret

0000337e <LCD_init>:

#include"LCD.h"
/*****************FUNCTIONS DEFINTIONS *****************/
/*INIT function to initialize the LCD*/
void LCD_init(void)
{
    337e:	df 93       	push	r29
    3380:	cf 93       	push	r28
    3382:	cd b7       	in	r28, 0x3d	; 61
    3384:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(PORT_DIRECTION_CTRL,REGISTER_SELECT_RS);
    3386:	a1 e3       	ldi	r26, 0x31	; 49
    3388:	b0 e0       	ldi	r27, 0x00	; 0
    338a:	e1 e3       	ldi	r30, 0x31	; 49
    338c:	f0 e0       	ldi	r31, 0x00	; 0
    338e:	80 81       	ld	r24, Z
    3390:	80 61       	ori	r24, 0x10	; 16
    3392:	8c 93       	st	X, r24
	SET_BIT(PORT_DIRECTION_CTRL,READ_OR_WRITE);
    3394:	a1 e3       	ldi	r26, 0x31	; 49
    3396:	b0 e0       	ldi	r27, 0x00	; 0
    3398:	e1 e3       	ldi	r30, 0x31	; 49
    339a:	f0 e0       	ldi	r31, 0x00	; 0
    339c:	80 81       	ld	r24, Z
    339e:	80 62       	ori	r24, 0x20	; 32
    33a0:	8c 93       	st	X, r24
	SET_BIT(PORT_DIRECTION_CTRL,ENABLE_LCD);
    33a2:	a1 e3       	ldi	r26, 0x31	; 49
    33a4:	b0 e0       	ldi	r27, 0x00	; 0
    33a6:	e1 e3       	ldi	r30, 0x31	; 49
    33a8:	f0 e0       	ldi	r31, 0x00	; 0
    33aa:	80 81       	ld	r24, Z
    33ac:	80 64       	ori	r24, 0x40	; 64
    33ae:	8c 93       	st	X, r24
	/*Set the first 3 bits of port D to output pins*/
	PORT_DIRECTION_DATA = 0xFF; /* Configure the data port c as output port */
    33b0:	e4 e3       	ldi	r30, 0x34	; 52
    33b2:	f0 e0       	ldi	r31, 0x00	; 0
    33b4:	8f ef       	ldi	r24, 0xFF	; 255
    33b6:	80 83       	st	Z, r24
	LCD_sendCommand(LCD_8_BIT_MODE_WITH_2_LINES); /*  2-line LCD  8-bit Data Mode with 5x7 dot display mode */
    33b8:	88 e3       	ldi	r24, 0x38	; 56
    33ba:	0e 94 e7 19 	call	0x33ce	; 0x33ce <LCD_sendCommand>
	LCD_sendCommand(CURSOR_BLINK); /* cursor off */
    33be:	8f e0       	ldi	r24, 0x0F	; 15
    33c0:	0e 94 e7 19 	call	0x33ce	; 0x33ce <LCD_sendCommand>
	LCD_clearScreen(); /* clear LCD */
    33c4:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <LCD_clearScreen>
}
    33c8:	cf 91       	pop	r28
    33ca:	df 91       	pop	r29
    33cc:	08 95       	ret

000033ce <LCD_sendCommand>:

/*Function to send command for the LCD */
void LCD_sendCommand( uint8 command )
{
    33ce:	df 93       	push	r29
    33d0:	cf 93       	push	r28
    33d2:	cd b7       	in	r28, 0x3d	; 61
    33d4:	de b7       	in	r29, 0x3e	; 62
    33d6:	ea 97       	sbiw	r28, 0x3a	; 58
    33d8:	0f b6       	in	r0, 0x3f	; 63
    33da:	f8 94       	cli
    33dc:	de bf       	out	0x3e, r29	; 62
    33de:	0f be       	out	0x3f, r0	; 63
    33e0:	cd bf       	out	0x3d, r28	; 61
    33e2:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(CONTROL_PORT_LCD ,REGISTER_SELECT_RS);    /*0---> COMMAND */
    33e4:	a2 e3       	ldi	r26, 0x32	; 50
    33e6:	b0 e0       	ldi	r27, 0x00	; 0
    33e8:	e2 e3       	ldi	r30, 0x32	; 50
    33ea:	f0 e0       	ldi	r31, 0x00	; 0
    33ec:	80 81       	ld	r24, Z
    33ee:	8f 7e       	andi	r24, 0xEF	; 239
    33f0:	8c 93       	st	X, r24
	CLEAR_BIT(CONTROL_PORT_LCD,READ_OR_WRITE);         /*0---> WRITE*/
    33f2:	a2 e3       	ldi	r26, 0x32	; 50
    33f4:	b0 e0       	ldi	r27, 0x00	; 0
    33f6:	e2 e3       	ldi	r30, 0x32	; 50
    33f8:	f0 e0       	ldi	r31, 0x00	; 0
    33fa:	80 81       	ld	r24, Z
    33fc:	8f 7d       	andi	r24, 0xDF	; 223
    33fe:	8c 93       	st	X, r24
    3400:	80 e0       	ldi	r24, 0x00	; 0
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	a0 e8       	ldi	r26, 0x80	; 128
    3406:	bf e3       	ldi	r27, 0x3F	; 63
    3408:	8d ab       	std	Y+53, r24	; 0x35
    340a:	9e ab       	std	Y+54, r25	; 0x36
    340c:	af ab       	std	Y+55, r26	; 0x37
    340e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3410:	6d a9       	ldd	r22, Y+53	; 0x35
    3412:	7e a9       	ldd	r23, Y+54	; 0x36
    3414:	8f a9       	ldd	r24, Y+55	; 0x37
    3416:	98 ad       	ldd	r25, Y+56	; 0x38
    3418:	20 e0       	ldi	r18, 0x00	; 0
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	4a ef       	ldi	r20, 0xFA	; 250
    341e:	54 e4       	ldi	r21, 0x44	; 68
    3420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3424:	dc 01       	movw	r26, r24
    3426:	cb 01       	movw	r24, r22
    3428:	89 ab       	std	Y+49, r24	; 0x31
    342a:	9a ab       	std	Y+50, r25	; 0x32
    342c:	ab ab       	std	Y+51, r26	; 0x33
    342e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3430:	69 a9       	ldd	r22, Y+49	; 0x31
    3432:	7a a9       	ldd	r23, Y+50	; 0x32
    3434:	8b a9       	ldd	r24, Y+51	; 0x33
    3436:	9c a9       	ldd	r25, Y+52	; 0x34
    3438:	20 e0       	ldi	r18, 0x00	; 0
    343a:	30 e0       	ldi	r19, 0x00	; 0
    343c:	40 e8       	ldi	r20, 0x80	; 128
    343e:	5f e3       	ldi	r21, 0x3F	; 63
    3440:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3444:	88 23       	and	r24, r24
    3446:	2c f4       	brge	.+10     	; 0x3452 <LCD_sendCommand+0x84>
		__ticks = 1;
    3448:	81 e0       	ldi	r24, 0x01	; 1
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	98 ab       	std	Y+48, r25	; 0x30
    344e:	8f a7       	std	Y+47, r24	; 0x2f
    3450:	3f c0       	rjmp	.+126    	; 0x34d0 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    3452:	69 a9       	ldd	r22, Y+49	; 0x31
    3454:	7a a9       	ldd	r23, Y+50	; 0x32
    3456:	8b a9       	ldd	r24, Y+51	; 0x33
    3458:	9c a9       	ldd	r25, Y+52	; 0x34
    345a:	20 e0       	ldi	r18, 0x00	; 0
    345c:	3f ef       	ldi	r19, 0xFF	; 255
    345e:	4f e7       	ldi	r20, 0x7F	; 127
    3460:	57 e4       	ldi	r21, 0x47	; 71
    3462:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3466:	18 16       	cp	r1, r24
    3468:	4c f5       	brge	.+82     	; 0x34bc <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    346a:	6d a9       	ldd	r22, Y+53	; 0x35
    346c:	7e a9       	ldd	r23, Y+54	; 0x36
    346e:	8f a9       	ldd	r24, Y+55	; 0x37
    3470:	98 ad       	ldd	r25, Y+56	; 0x38
    3472:	20 e0       	ldi	r18, 0x00	; 0
    3474:	30 e0       	ldi	r19, 0x00	; 0
    3476:	40 e2       	ldi	r20, 0x20	; 32
    3478:	51 e4       	ldi	r21, 0x41	; 65
    347a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    347e:	dc 01       	movw	r26, r24
    3480:	cb 01       	movw	r24, r22
    3482:	bc 01       	movw	r22, r24
    3484:	cd 01       	movw	r24, r26
    3486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    348a:	dc 01       	movw	r26, r24
    348c:	cb 01       	movw	r24, r22
    348e:	98 ab       	std	Y+48, r25	; 0x30
    3490:	8f a7       	std	Y+47, r24	; 0x2f
    3492:	0f c0       	rjmp	.+30     	; 0x34b2 <LCD_sendCommand+0xe4>
    3494:	88 ec       	ldi	r24, 0xC8	; 200
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	9e a7       	std	Y+46, r25	; 0x2e
    349a:	8d a7       	std	Y+45, r24	; 0x2d
    349c:	8d a5       	ldd	r24, Y+45	; 0x2d
    349e:	9e a5       	ldd	r25, Y+46	; 0x2e
    34a0:	01 97       	sbiw	r24, 0x01	; 1
    34a2:	f1 f7       	brne	.-4      	; 0x34a0 <LCD_sendCommand+0xd2>
    34a4:	9e a7       	std	Y+46, r25	; 0x2e
    34a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    34aa:	98 a9       	ldd	r25, Y+48	; 0x30
    34ac:	01 97       	sbiw	r24, 0x01	; 1
    34ae:	98 ab       	std	Y+48, r25	; 0x30
    34b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    34b4:	98 a9       	ldd	r25, Y+48	; 0x30
    34b6:	00 97       	sbiw	r24, 0x00	; 0
    34b8:	69 f7       	brne	.-38     	; 0x3494 <LCD_sendCommand+0xc6>
    34ba:	14 c0       	rjmp	.+40     	; 0x34e4 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34bc:	69 a9       	ldd	r22, Y+49	; 0x31
    34be:	7a a9       	ldd	r23, Y+50	; 0x32
    34c0:	8b a9       	ldd	r24, Y+51	; 0x33
    34c2:	9c a9       	ldd	r25, Y+52	; 0x34
    34c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c8:	dc 01       	movw	r26, r24
    34ca:	cb 01       	movw	r24, r22
    34cc:	98 ab       	std	Y+48, r25	; 0x30
    34ce:	8f a7       	std	Y+47, r24	; 0x2f
    34d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    34d2:	98 a9       	ldd	r25, Y+48	; 0x30
    34d4:	9c a7       	std	Y+44, r25	; 0x2c
    34d6:	8b a7       	std	Y+43, r24	; 0x2b
    34d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    34da:	9c a5       	ldd	r25, Y+44	; 0x2c
    34dc:	01 97       	sbiw	r24, 0x01	; 1
    34de:	f1 f7       	brne	.-4      	; 0x34dc <LCD_sendCommand+0x10e>
    34e0:	9c a7       	std	Y+44, r25	; 0x2c
    34e2:	8b a7       	std	Y+43, r24	; 0x2b
	/*set RS to 0 to make Rs to select the command register and send instruction and to wrtie */
	_delay_ms(1);   /*delay for tas =  50 ns due to the timing diagram*/
	SET_BIT(CONTROL_PORT_LCD,ENABLE_LCD);
    34e4:	a2 e3       	ldi	r26, 0x32	; 50
    34e6:	b0 e0       	ldi	r27, 0x00	; 0
    34e8:	e2 e3       	ldi	r30, 0x32	; 50
    34ea:	f0 e0       	ldi	r31, 0x00	; 0
    34ec:	80 81       	ld	r24, Z
    34ee:	80 64       	ori	r24, 0x40	; 64
    34f0:	8c 93       	st	X, r24
    34f2:	80 e0       	ldi	r24, 0x00	; 0
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	a0 e8       	ldi	r26, 0x80	; 128
    34f8:	bf e3       	ldi	r27, 0x3F	; 63
    34fa:	8f a3       	std	Y+39, r24	; 0x27
    34fc:	98 a7       	std	Y+40, r25	; 0x28
    34fe:	a9 a7       	std	Y+41, r26	; 0x29
    3500:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3502:	6f a1       	ldd	r22, Y+39	; 0x27
    3504:	78 a5       	ldd	r23, Y+40	; 0x28
    3506:	89 a5       	ldd	r24, Y+41	; 0x29
    3508:	9a a5       	ldd	r25, Y+42	; 0x2a
    350a:	20 e0       	ldi	r18, 0x00	; 0
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	4a ef       	ldi	r20, 0xFA	; 250
    3510:	54 e4       	ldi	r21, 0x44	; 68
    3512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3516:	dc 01       	movw	r26, r24
    3518:	cb 01       	movw	r24, r22
    351a:	8b a3       	std	Y+35, r24	; 0x23
    351c:	9c a3       	std	Y+36, r25	; 0x24
    351e:	ad a3       	std	Y+37, r26	; 0x25
    3520:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3522:	6b a1       	ldd	r22, Y+35	; 0x23
    3524:	7c a1       	ldd	r23, Y+36	; 0x24
    3526:	8d a1       	ldd	r24, Y+37	; 0x25
    3528:	9e a1       	ldd	r25, Y+38	; 0x26
    352a:	20 e0       	ldi	r18, 0x00	; 0
    352c:	30 e0       	ldi	r19, 0x00	; 0
    352e:	40 e8       	ldi	r20, 0x80	; 128
    3530:	5f e3       	ldi	r21, 0x3F	; 63
    3532:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3536:	88 23       	and	r24, r24
    3538:	2c f4       	brge	.+10     	; 0x3544 <LCD_sendCommand+0x176>
		__ticks = 1;
    353a:	81 e0       	ldi	r24, 0x01	; 1
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	9a a3       	std	Y+34, r25	; 0x22
    3540:	89 a3       	std	Y+33, r24	; 0x21
    3542:	3f c0       	rjmp	.+126    	; 0x35c2 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    3544:	6b a1       	ldd	r22, Y+35	; 0x23
    3546:	7c a1       	ldd	r23, Y+36	; 0x24
    3548:	8d a1       	ldd	r24, Y+37	; 0x25
    354a:	9e a1       	ldd	r25, Y+38	; 0x26
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	3f ef       	ldi	r19, 0xFF	; 255
    3550:	4f e7       	ldi	r20, 0x7F	; 127
    3552:	57 e4       	ldi	r21, 0x47	; 71
    3554:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3558:	18 16       	cp	r1, r24
    355a:	4c f5       	brge	.+82     	; 0x35ae <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    355c:	6f a1       	ldd	r22, Y+39	; 0x27
    355e:	78 a5       	ldd	r23, Y+40	; 0x28
    3560:	89 a5       	ldd	r24, Y+41	; 0x29
    3562:	9a a5       	ldd	r25, Y+42	; 0x2a
    3564:	20 e0       	ldi	r18, 0x00	; 0
    3566:	30 e0       	ldi	r19, 0x00	; 0
    3568:	40 e2       	ldi	r20, 0x20	; 32
    356a:	51 e4       	ldi	r21, 0x41	; 65
    356c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3570:	dc 01       	movw	r26, r24
    3572:	cb 01       	movw	r24, r22
    3574:	bc 01       	movw	r22, r24
    3576:	cd 01       	movw	r24, r26
    3578:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    357c:	dc 01       	movw	r26, r24
    357e:	cb 01       	movw	r24, r22
    3580:	9a a3       	std	Y+34, r25	; 0x22
    3582:	89 a3       	std	Y+33, r24	; 0x21
    3584:	0f c0       	rjmp	.+30     	; 0x35a4 <LCD_sendCommand+0x1d6>
    3586:	88 ec       	ldi	r24, 0xC8	; 200
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	98 a3       	std	Y+32, r25	; 0x20
    358c:	8f 8f       	std	Y+31, r24	; 0x1f
    358e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3590:	98 a1       	ldd	r25, Y+32	; 0x20
    3592:	01 97       	sbiw	r24, 0x01	; 1
    3594:	f1 f7       	brne	.-4      	; 0x3592 <LCD_sendCommand+0x1c4>
    3596:	98 a3       	std	Y+32, r25	; 0x20
    3598:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    359a:	89 a1       	ldd	r24, Y+33	; 0x21
    359c:	9a a1       	ldd	r25, Y+34	; 0x22
    359e:	01 97       	sbiw	r24, 0x01	; 1
    35a0:	9a a3       	std	Y+34, r25	; 0x22
    35a2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35a4:	89 a1       	ldd	r24, Y+33	; 0x21
    35a6:	9a a1       	ldd	r25, Y+34	; 0x22
    35a8:	00 97       	sbiw	r24, 0x00	; 0
    35aa:	69 f7       	brne	.-38     	; 0x3586 <LCD_sendCommand+0x1b8>
    35ac:	14 c0       	rjmp	.+40     	; 0x35d6 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ae:	6b a1       	ldd	r22, Y+35	; 0x23
    35b0:	7c a1       	ldd	r23, Y+36	; 0x24
    35b2:	8d a1       	ldd	r24, Y+37	; 0x25
    35b4:	9e a1       	ldd	r25, Y+38	; 0x26
    35b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ba:	dc 01       	movw	r26, r24
    35bc:	cb 01       	movw	r24, r22
    35be:	9a a3       	std	Y+34, r25	; 0x22
    35c0:	89 a3       	std	Y+33, r24	; 0x21
    35c2:	89 a1       	ldd	r24, Y+33	; 0x21
    35c4:	9a a1       	ldd	r25, Y+34	; 0x22
    35c6:	9e 8f       	std	Y+30, r25	; 0x1e
    35c8:	8d 8f       	std	Y+29, r24	; 0x1d
    35ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35ce:	01 97       	sbiw	r24, 0x01	; 1
    35d0:	f1 f7       	brne	.-4      	; 0x35ce <LCD_sendCommand+0x200>
    35d2:	9e 8f       	std	Y+30, r25	; 0x1e
    35d4:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Enable the LCD*/
	_delay_ms(1);   /*delay for tpw-tdsw=290-100 =190 ns due to the timing diagram*/
	DATA_PORT_LCD  = (DATA_PORT_LCD  & 0x00) |(  command   & 0xFF ) ;
    35d6:	e5 e3       	ldi	r30, 0x35	; 53
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	80 81       	ld	r24, Z
    35dc:	e5 e3       	ldi	r30, 0x35	; 53
    35de:	f0 e0       	ldi	r31, 0x00	; 0
    35e0:	89 ad       	ldd	r24, Y+57	; 0x39
    35e2:	80 83       	st	Z, r24
    35e4:	80 e0       	ldi	r24, 0x00	; 0
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	a0 e8       	ldi	r26, 0x80	; 128
    35ea:	bf e3       	ldi	r27, 0x3F	; 63
    35ec:	89 8f       	std	Y+25, r24	; 0x19
    35ee:	9a 8f       	std	Y+26, r25	; 0x1a
    35f0:	ab 8f       	std	Y+27, r26	; 0x1b
    35f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35f4:	69 8d       	ldd	r22, Y+25	; 0x19
    35f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35fc:	20 e0       	ldi	r18, 0x00	; 0
    35fe:	30 e0       	ldi	r19, 0x00	; 0
    3600:	4a ef       	ldi	r20, 0xFA	; 250
    3602:	54 e4       	ldi	r21, 0x44	; 68
    3604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3608:	dc 01       	movw	r26, r24
    360a:	cb 01       	movw	r24, r22
    360c:	8d 8b       	std	Y+21, r24	; 0x15
    360e:	9e 8b       	std	Y+22, r25	; 0x16
    3610:	af 8b       	std	Y+23, r26	; 0x17
    3612:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3614:	6d 89       	ldd	r22, Y+21	; 0x15
    3616:	7e 89       	ldd	r23, Y+22	; 0x16
    3618:	8f 89       	ldd	r24, Y+23	; 0x17
    361a:	98 8d       	ldd	r25, Y+24	; 0x18
    361c:	20 e0       	ldi	r18, 0x00	; 0
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	40 e8       	ldi	r20, 0x80	; 128
    3622:	5f e3       	ldi	r21, 0x3F	; 63
    3624:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3628:	88 23       	and	r24, r24
    362a:	2c f4       	brge	.+10     	; 0x3636 <LCD_sendCommand+0x268>
		__ticks = 1;
    362c:	81 e0       	ldi	r24, 0x01	; 1
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	9c 8b       	std	Y+20, r25	; 0x14
    3632:	8b 8b       	std	Y+19, r24	; 0x13
    3634:	3f c0       	rjmp	.+126    	; 0x36b4 <LCD_sendCommand+0x2e6>
	else if (__tmp > 65535)
    3636:	6d 89       	ldd	r22, Y+21	; 0x15
    3638:	7e 89       	ldd	r23, Y+22	; 0x16
    363a:	8f 89       	ldd	r24, Y+23	; 0x17
    363c:	98 8d       	ldd	r25, Y+24	; 0x18
    363e:	20 e0       	ldi	r18, 0x00	; 0
    3640:	3f ef       	ldi	r19, 0xFF	; 255
    3642:	4f e7       	ldi	r20, 0x7F	; 127
    3644:	57 e4       	ldi	r21, 0x47	; 71
    3646:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    364a:	18 16       	cp	r1, r24
    364c:	4c f5       	brge	.+82     	; 0x36a0 <LCD_sendCommand+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    364e:	69 8d       	ldd	r22, Y+25	; 0x19
    3650:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3652:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3654:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3656:	20 e0       	ldi	r18, 0x00	; 0
    3658:	30 e0       	ldi	r19, 0x00	; 0
    365a:	40 e2       	ldi	r20, 0x20	; 32
    365c:	51 e4       	ldi	r21, 0x41	; 65
    365e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3662:	dc 01       	movw	r26, r24
    3664:	cb 01       	movw	r24, r22
    3666:	bc 01       	movw	r22, r24
    3668:	cd 01       	movw	r24, r26
    366a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    366e:	dc 01       	movw	r26, r24
    3670:	cb 01       	movw	r24, r22
    3672:	9c 8b       	std	Y+20, r25	; 0x14
    3674:	8b 8b       	std	Y+19, r24	; 0x13
    3676:	0f c0       	rjmp	.+30     	; 0x3696 <LCD_sendCommand+0x2c8>
    3678:	88 ec       	ldi	r24, 0xC8	; 200
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	9a 8b       	std	Y+18, r25	; 0x12
    367e:	89 8b       	std	Y+17, r24	; 0x11
    3680:	89 89       	ldd	r24, Y+17	; 0x11
    3682:	9a 89       	ldd	r25, Y+18	; 0x12
    3684:	01 97       	sbiw	r24, 0x01	; 1
    3686:	f1 f7       	brne	.-4      	; 0x3684 <LCD_sendCommand+0x2b6>
    3688:	9a 8b       	std	Y+18, r25	; 0x12
    368a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    368c:	8b 89       	ldd	r24, Y+19	; 0x13
    368e:	9c 89       	ldd	r25, Y+20	; 0x14
    3690:	01 97       	sbiw	r24, 0x01	; 1
    3692:	9c 8b       	std	Y+20, r25	; 0x14
    3694:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3696:	8b 89       	ldd	r24, Y+19	; 0x13
    3698:	9c 89       	ldd	r25, Y+20	; 0x14
    369a:	00 97       	sbiw	r24, 0x00	; 0
    369c:	69 f7       	brne	.-38     	; 0x3678 <LCD_sendCommand+0x2aa>
    369e:	14 c0       	rjmp	.+40     	; 0x36c8 <LCD_sendCommand+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36a0:	6d 89       	ldd	r22, Y+21	; 0x15
    36a2:	7e 89       	ldd	r23, Y+22	; 0x16
    36a4:	8f 89       	ldd	r24, Y+23	; 0x17
    36a6:	98 8d       	ldd	r25, Y+24	; 0x18
    36a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ac:	dc 01       	movw	r26, r24
    36ae:	cb 01       	movw	r24, r22
    36b0:	9c 8b       	std	Y+20, r25	; 0x14
    36b2:	8b 8b       	std	Y+19, r24	; 0x13
    36b4:	8b 89       	ldd	r24, Y+19	; 0x13
    36b6:	9c 89       	ldd	r25, Y+20	; 0x14
    36b8:	98 8b       	std	Y+16, r25	; 0x10
    36ba:	8f 87       	std	Y+15, r24	; 0x0f
    36bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    36be:	98 89       	ldd	r25, Y+16	; 0x10
    36c0:	01 97       	sbiw	r24, 0x01	; 1
    36c2:	f1 f7       	brne	.-4      	; 0x36c0 <LCD_sendCommand+0x2f2>
    36c4:	98 8b       	std	Y+16, r25	; 0x10
    36c6:	8f 87       	std	Y+15, r24	; 0x0f
	/*set the instruction in the port to command the LCD */
	_delay_ms(1);   /*delay for tdsw =  100 ns due to the timing diagram*/
	CLEAR_BIT(CONTROL_PORT_LCD,ENABLE_LCD);
    36c8:	a2 e3       	ldi	r26, 0x32	; 50
    36ca:	b0 e0       	ldi	r27, 0x00	; 0
    36cc:	e2 e3       	ldi	r30, 0x32	; 50
    36ce:	f0 e0       	ldi	r31, 0x00	; 0
    36d0:	80 81       	ld	r24, Z
    36d2:	8f 7b       	andi	r24, 0xBF	; 191
    36d4:	8c 93       	st	X, r24
    36d6:	80 e0       	ldi	r24, 0x00	; 0
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	a0 e8       	ldi	r26, 0x80	; 128
    36dc:	bf e3       	ldi	r27, 0x3F	; 63
    36de:	8b 87       	std	Y+11, r24	; 0x0b
    36e0:	9c 87       	std	Y+12, r25	; 0x0c
    36e2:	ad 87       	std	Y+13, r26	; 0x0d
    36e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    36e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    36ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    36ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    36ee:	20 e0       	ldi	r18, 0x00	; 0
    36f0:	30 e0       	ldi	r19, 0x00	; 0
    36f2:	4a ef       	ldi	r20, 0xFA	; 250
    36f4:	54 e4       	ldi	r21, 0x44	; 68
    36f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36fa:	dc 01       	movw	r26, r24
    36fc:	cb 01       	movw	r24, r22
    36fe:	8f 83       	std	Y+7, r24	; 0x07
    3700:	98 87       	std	Y+8, r25	; 0x08
    3702:	a9 87       	std	Y+9, r26	; 0x09
    3704:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3706:	6f 81       	ldd	r22, Y+7	; 0x07
    3708:	78 85       	ldd	r23, Y+8	; 0x08
    370a:	89 85       	ldd	r24, Y+9	; 0x09
    370c:	9a 85       	ldd	r25, Y+10	; 0x0a
    370e:	20 e0       	ldi	r18, 0x00	; 0
    3710:	30 e0       	ldi	r19, 0x00	; 0
    3712:	40 e8       	ldi	r20, 0x80	; 128
    3714:	5f e3       	ldi	r21, 0x3F	; 63
    3716:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    371a:	88 23       	and	r24, r24
    371c:	2c f4       	brge	.+10     	; 0x3728 <LCD_sendCommand+0x35a>
		__ticks = 1;
    371e:	81 e0       	ldi	r24, 0x01	; 1
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	9e 83       	std	Y+6, r25	; 0x06
    3724:	8d 83       	std	Y+5, r24	; 0x05
    3726:	3f c0       	rjmp	.+126    	; 0x37a6 <LCD_sendCommand+0x3d8>
	else if (__tmp > 65535)
    3728:	6f 81       	ldd	r22, Y+7	; 0x07
    372a:	78 85       	ldd	r23, Y+8	; 0x08
    372c:	89 85       	ldd	r24, Y+9	; 0x09
    372e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3730:	20 e0       	ldi	r18, 0x00	; 0
    3732:	3f ef       	ldi	r19, 0xFF	; 255
    3734:	4f e7       	ldi	r20, 0x7F	; 127
    3736:	57 e4       	ldi	r21, 0x47	; 71
    3738:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    373c:	18 16       	cp	r1, r24
    373e:	4c f5       	brge	.+82     	; 0x3792 <LCD_sendCommand+0x3c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3740:	6b 85       	ldd	r22, Y+11	; 0x0b
    3742:	7c 85       	ldd	r23, Y+12	; 0x0c
    3744:	8d 85       	ldd	r24, Y+13	; 0x0d
    3746:	9e 85       	ldd	r25, Y+14	; 0x0e
    3748:	20 e0       	ldi	r18, 0x00	; 0
    374a:	30 e0       	ldi	r19, 0x00	; 0
    374c:	40 e2       	ldi	r20, 0x20	; 32
    374e:	51 e4       	ldi	r21, 0x41	; 65
    3750:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3754:	dc 01       	movw	r26, r24
    3756:	cb 01       	movw	r24, r22
    3758:	bc 01       	movw	r22, r24
    375a:	cd 01       	movw	r24, r26
    375c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3760:	dc 01       	movw	r26, r24
    3762:	cb 01       	movw	r24, r22
    3764:	9e 83       	std	Y+6, r25	; 0x06
    3766:	8d 83       	std	Y+5, r24	; 0x05
    3768:	0f c0       	rjmp	.+30     	; 0x3788 <LCD_sendCommand+0x3ba>
    376a:	88 ec       	ldi	r24, 0xC8	; 200
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	9c 83       	std	Y+4, r25	; 0x04
    3770:	8b 83       	std	Y+3, r24	; 0x03
    3772:	8b 81       	ldd	r24, Y+3	; 0x03
    3774:	9c 81       	ldd	r25, Y+4	; 0x04
    3776:	01 97       	sbiw	r24, 0x01	; 1
    3778:	f1 f7       	brne	.-4      	; 0x3776 <LCD_sendCommand+0x3a8>
    377a:	9c 83       	std	Y+4, r25	; 0x04
    377c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    377e:	8d 81       	ldd	r24, Y+5	; 0x05
    3780:	9e 81       	ldd	r25, Y+6	; 0x06
    3782:	01 97       	sbiw	r24, 0x01	; 1
    3784:	9e 83       	std	Y+6, r25	; 0x06
    3786:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3788:	8d 81       	ldd	r24, Y+5	; 0x05
    378a:	9e 81       	ldd	r25, Y+6	; 0x06
    378c:	00 97       	sbiw	r24, 0x00	; 0
    378e:	69 f7       	brne	.-38     	; 0x376a <LCD_sendCommand+0x39c>
    3790:	14 c0       	rjmp	.+40     	; 0x37ba <LCD_sendCommand+0x3ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3792:	6f 81       	ldd	r22, Y+7	; 0x07
    3794:	78 85       	ldd	r23, Y+8	; 0x08
    3796:	89 85       	ldd	r24, Y+9	; 0x09
    3798:	9a 85       	ldd	r25, Y+10	; 0x0a
    379a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    379e:	dc 01       	movw	r26, r24
    37a0:	cb 01       	movw	r24, r22
    37a2:	9e 83       	std	Y+6, r25	; 0x06
    37a4:	8d 83       	std	Y+5, r24	; 0x05
    37a6:	8d 81       	ldd	r24, Y+5	; 0x05
    37a8:	9e 81       	ldd	r25, Y+6	; 0x06
    37aa:	9a 83       	std	Y+2, r25	; 0x02
    37ac:	89 83       	std	Y+1, r24	; 0x01
    37ae:	89 81       	ldd	r24, Y+1	; 0x01
    37b0:	9a 81       	ldd	r25, Y+2	; 0x02
    37b2:	01 97       	sbiw	r24, 0x01	; 1
    37b4:	f1 f7       	brne	.-4      	; 0x37b2 <LCD_sendCommand+0x3e4>
    37b6:	9a 83       	std	Y+2, r25	; 0x02
    37b8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);   /*delay for  13 ns due to the timing diagram*/
}
    37ba:	ea 96       	adiw	r28, 0x3a	; 58
    37bc:	0f b6       	in	r0, 0x3f	; 63
    37be:	f8 94       	cli
    37c0:	de bf       	out	0x3e, r29	; 62
    37c2:	0f be       	out	0x3f, r0	; 63
    37c4:	cd bf       	out	0x3d, r28	; 61
    37c6:	cf 91       	pop	r28
    37c8:	df 91       	pop	r29
    37ca:	08 95       	ret

000037cc <LCD_displayCharacter>:
/*Function to display a character for the LCD */
void LCD_displayCharacter(uint8 ch_ASCII)
{
    37cc:	df 93       	push	r29
    37ce:	cf 93       	push	r28
    37d0:	cd b7       	in	r28, 0x3d	; 61
    37d2:	de b7       	in	r29, 0x3e	; 62
    37d4:	ea 97       	sbiw	r28, 0x3a	; 58
    37d6:	0f b6       	in	r0, 0x3f	; 63
    37d8:	f8 94       	cli
    37da:	de bf       	out	0x3e, r29	; 62
    37dc:	0f be       	out	0x3f, r0	; 63
    37de:	cd bf       	out	0x3d, r28	; 61
    37e0:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(CONTROL_PORT_LCD ,REGISTER_SELECT_RS);    /*1---> DATA */
    37e2:	a2 e3       	ldi	r26, 0x32	; 50
    37e4:	b0 e0       	ldi	r27, 0x00	; 0
    37e6:	e2 e3       	ldi	r30, 0x32	; 50
    37e8:	f0 e0       	ldi	r31, 0x00	; 0
    37ea:	80 81       	ld	r24, Z
    37ec:	80 61       	ori	r24, 0x10	; 16
    37ee:	8c 93       	st	X, r24
	CLEAR_BIT(CONTROL_PORT_LCD,READ_OR_WRITE);         /*0---> write*/
    37f0:	a2 e3       	ldi	r26, 0x32	; 50
    37f2:	b0 e0       	ldi	r27, 0x00	; 0
    37f4:	e2 e3       	ldi	r30, 0x32	; 50
    37f6:	f0 e0       	ldi	r31, 0x00	; 0
    37f8:	80 81       	ld	r24, Z
    37fa:	8f 7d       	andi	r24, 0xDF	; 223
    37fc:	8c 93       	st	X, r24
    37fe:	80 e0       	ldi	r24, 0x00	; 0
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	a0 e8       	ldi	r26, 0x80	; 128
    3804:	bf e3       	ldi	r27, 0x3F	; 63
    3806:	8d ab       	std	Y+53, r24	; 0x35
    3808:	9e ab       	std	Y+54, r25	; 0x36
    380a:	af ab       	std	Y+55, r26	; 0x37
    380c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    380e:	6d a9       	ldd	r22, Y+53	; 0x35
    3810:	7e a9       	ldd	r23, Y+54	; 0x36
    3812:	8f a9       	ldd	r24, Y+55	; 0x37
    3814:	98 ad       	ldd	r25, Y+56	; 0x38
    3816:	20 e0       	ldi	r18, 0x00	; 0
    3818:	30 e0       	ldi	r19, 0x00	; 0
    381a:	4a ef       	ldi	r20, 0xFA	; 250
    381c:	54 e4       	ldi	r21, 0x44	; 68
    381e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3822:	dc 01       	movw	r26, r24
    3824:	cb 01       	movw	r24, r22
    3826:	89 ab       	std	Y+49, r24	; 0x31
    3828:	9a ab       	std	Y+50, r25	; 0x32
    382a:	ab ab       	std	Y+51, r26	; 0x33
    382c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    382e:	69 a9       	ldd	r22, Y+49	; 0x31
    3830:	7a a9       	ldd	r23, Y+50	; 0x32
    3832:	8b a9       	ldd	r24, Y+51	; 0x33
    3834:	9c a9       	ldd	r25, Y+52	; 0x34
    3836:	20 e0       	ldi	r18, 0x00	; 0
    3838:	30 e0       	ldi	r19, 0x00	; 0
    383a:	40 e8       	ldi	r20, 0x80	; 128
    383c:	5f e3       	ldi	r21, 0x3F	; 63
    383e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3842:	88 23       	and	r24, r24
    3844:	2c f4       	brge	.+10     	; 0x3850 <LCD_displayCharacter+0x84>
		__ticks = 1;
    3846:	81 e0       	ldi	r24, 0x01	; 1
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	98 ab       	std	Y+48, r25	; 0x30
    384c:	8f a7       	std	Y+47, r24	; 0x2f
    384e:	3f c0       	rjmp	.+126    	; 0x38ce <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    3850:	69 a9       	ldd	r22, Y+49	; 0x31
    3852:	7a a9       	ldd	r23, Y+50	; 0x32
    3854:	8b a9       	ldd	r24, Y+51	; 0x33
    3856:	9c a9       	ldd	r25, Y+52	; 0x34
    3858:	20 e0       	ldi	r18, 0x00	; 0
    385a:	3f ef       	ldi	r19, 0xFF	; 255
    385c:	4f e7       	ldi	r20, 0x7F	; 127
    385e:	57 e4       	ldi	r21, 0x47	; 71
    3860:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3864:	18 16       	cp	r1, r24
    3866:	4c f5       	brge	.+82     	; 0x38ba <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3868:	6d a9       	ldd	r22, Y+53	; 0x35
    386a:	7e a9       	ldd	r23, Y+54	; 0x36
    386c:	8f a9       	ldd	r24, Y+55	; 0x37
    386e:	98 ad       	ldd	r25, Y+56	; 0x38
    3870:	20 e0       	ldi	r18, 0x00	; 0
    3872:	30 e0       	ldi	r19, 0x00	; 0
    3874:	40 e2       	ldi	r20, 0x20	; 32
    3876:	51 e4       	ldi	r21, 0x41	; 65
    3878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    387c:	dc 01       	movw	r26, r24
    387e:	cb 01       	movw	r24, r22
    3880:	bc 01       	movw	r22, r24
    3882:	cd 01       	movw	r24, r26
    3884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3888:	dc 01       	movw	r26, r24
    388a:	cb 01       	movw	r24, r22
    388c:	98 ab       	std	Y+48, r25	; 0x30
    388e:	8f a7       	std	Y+47, r24	; 0x2f
    3890:	0f c0       	rjmp	.+30     	; 0x38b0 <LCD_displayCharacter+0xe4>
    3892:	88 ec       	ldi	r24, 0xC8	; 200
    3894:	90 e0       	ldi	r25, 0x00	; 0
    3896:	9e a7       	std	Y+46, r25	; 0x2e
    3898:	8d a7       	std	Y+45, r24	; 0x2d
    389a:	8d a5       	ldd	r24, Y+45	; 0x2d
    389c:	9e a5       	ldd	r25, Y+46	; 0x2e
    389e:	01 97       	sbiw	r24, 0x01	; 1
    38a0:	f1 f7       	brne	.-4      	; 0x389e <LCD_displayCharacter+0xd2>
    38a2:	9e a7       	std	Y+46, r25	; 0x2e
    38a4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    38a8:	98 a9       	ldd	r25, Y+48	; 0x30
    38aa:	01 97       	sbiw	r24, 0x01	; 1
    38ac:	98 ab       	std	Y+48, r25	; 0x30
    38ae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    38b2:	98 a9       	ldd	r25, Y+48	; 0x30
    38b4:	00 97       	sbiw	r24, 0x00	; 0
    38b6:	69 f7       	brne	.-38     	; 0x3892 <LCD_displayCharacter+0xc6>
    38b8:	14 c0       	rjmp	.+40     	; 0x38e2 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38ba:	69 a9       	ldd	r22, Y+49	; 0x31
    38bc:	7a a9       	ldd	r23, Y+50	; 0x32
    38be:	8b a9       	ldd	r24, Y+51	; 0x33
    38c0:	9c a9       	ldd	r25, Y+52	; 0x34
    38c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c6:	dc 01       	movw	r26, r24
    38c8:	cb 01       	movw	r24, r22
    38ca:	98 ab       	std	Y+48, r25	; 0x30
    38cc:	8f a7       	std	Y+47, r24	; 0x2f
    38ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    38d0:	98 a9       	ldd	r25, Y+48	; 0x30
    38d2:	9c a7       	std	Y+44, r25	; 0x2c
    38d4:	8b a7       	std	Y+43, r24	; 0x2b
    38d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    38d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    38da:	01 97       	sbiw	r24, 0x01	; 1
    38dc:	f1 f7       	brne	.-4      	; 0x38da <LCD_displayCharacter+0x10e>
    38de:	9c a7       	std	Y+44, r25	; 0x2c
    38e0:	8b a7       	std	Y+43, r24	; 0x2b
	/*set RES to 1 to make Rs to select the data register and send instruction and to write data */
	_delay_ms(1);   /*delay for tas =  50 ns due to the timing diagram*/
	SET_BIT(CONTROL_PORT_LCD,ENABLE_LCD);
    38e2:	a2 e3       	ldi	r26, 0x32	; 50
    38e4:	b0 e0       	ldi	r27, 0x00	; 0
    38e6:	e2 e3       	ldi	r30, 0x32	; 50
    38e8:	f0 e0       	ldi	r31, 0x00	; 0
    38ea:	80 81       	ld	r24, Z
    38ec:	80 64       	ori	r24, 0x40	; 64
    38ee:	8c 93       	st	X, r24
    38f0:	80 e0       	ldi	r24, 0x00	; 0
    38f2:	90 e0       	ldi	r25, 0x00	; 0
    38f4:	a0 e8       	ldi	r26, 0x80	; 128
    38f6:	bf e3       	ldi	r27, 0x3F	; 63
    38f8:	8f a3       	std	Y+39, r24	; 0x27
    38fa:	98 a7       	std	Y+40, r25	; 0x28
    38fc:	a9 a7       	std	Y+41, r26	; 0x29
    38fe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3900:	6f a1       	ldd	r22, Y+39	; 0x27
    3902:	78 a5       	ldd	r23, Y+40	; 0x28
    3904:	89 a5       	ldd	r24, Y+41	; 0x29
    3906:	9a a5       	ldd	r25, Y+42	; 0x2a
    3908:	20 e0       	ldi	r18, 0x00	; 0
    390a:	30 e0       	ldi	r19, 0x00	; 0
    390c:	4a ef       	ldi	r20, 0xFA	; 250
    390e:	54 e4       	ldi	r21, 0x44	; 68
    3910:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3914:	dc 01       	movw	r26, r24
    3916:	cb 01       	movw	r24, r22
    3918:	8b a3       	std	Y+35, r24	; 0x23
    391a:	9c a3       	std	Y+36, r25	; 0x24
    391c:	ad a3       	std	Y+37, r26	; 0x25
    391e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3920:	6b a1       	ldd	r22, Y+35	; 0x23
    3922:	7c a1       	ldd	r23, Y+36	; 0x24
    3924:	8d a1       	ldd	r24, Y+37	; 0x25
    3926:	9e a1       	ldd	r25, Y+38	; 0x26
    3928:	20 e0       	ldi	r18, 0x00	; 0
    392a:	30 e0       	ldi	r19, 0x00	; 0
    392c:	40 e8       	ldi	r20, 0x80	; 128
    392e:	5f e3       	ldi	r21, 0x3F	; 63
    3930:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3934:	88 23       	and	r24, r24
    3936:	2c f4       	brge	.+10     	; 0x3942 <LCD_displayCharacter+0x176>
		__ticks = 1;
    3938:	81 e0       	ldi	r24, 0x01	; 1
    393a:	90 e0       	ldi	r25, 0x00	; 0
    393c:	9a a3       	std	Y+34, r25	; 0x22
    393e:	89 a3       	std	Y+33, r24	; 0x21
    3940:	3f c0       	rjmp	.+126    	; 0x39c0 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    3942:	6b a1       	ldd	r22, Y+35	; 0x23
    3944:	7c a1       	ldd	r23, Y+36	; 0x24
    3946:	8d a1       	ldd	r24, Y+37	; 0x25
    3948:	9e a1       	ldd	r25, Y+38	; 0x26
    394a:	20 e0       	ldi	r18, 0x00	; 0
    394c:	3f ef       	ldi	r19, 0xFF	; 255
    394e:	4f e7       	ldi	r20, 0x7F	; 127
    3950:	57 e4       	ldi	r21, 0x47	; 71
    3952:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3956:	18 16       	cp	r1, r24
    3958:	4c f5       	brge	.+82     	; 0x39ac <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    395a:	6f a1       	ldd	r22, Y+39	; 0x27
    395c:	78 a5       	ldd	r23, Y+40	; 0x28
    395e:	89 a5       	ldd	r24, Y+41	; 0x29
    3960:	9a a5       	ldd	r25, Y+42	; 0x2a
    3962:	20 e0       	ldi	r18, 0x00	; 0
    3964:	30 e0       	ldi	r19, 0x00	; 0
    3966:	40 e2       	ldi	r20, 0x20	; 32
    3968:	51 e4       	ldi	r21, 0x41	; 65
    396a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    396e:	dc 01       	movw	r26, r24
    3970:	cb 01       	movw	r24, r22
    3972:	bc 01       	movw	r22, r24
    3974:	cd 01       	movw	r24, r26
    3976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    397a:	dc 01       	movw	r26, r24
    397c:	cb 01       	movw	r24, r22
    397e:	9a a3       	std	Y+34, r25	; 0x22
    3980:	89 a3       	std	Y+33, r24	; 0x21
    3982:	0f c0       	rjmp	.+30     	; 0x39a2 <LCD_displayCharacter+0x1d6>
    3984:	88 ec       	ldi	r24, 0xC8	; 200
    3986:	90 e0       	ldi	r25, 0x00	; 0
    3988:	98 a3       	std	Y+32, r25	; 0x20
    398a:	8f 8f       	std	Y+31, r24	; 0x1f
    398c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    398e:	98 a1       	ldd	r25, Y+32	; 0x20
    3990:	01 97       	sbiw	r24, 0x01	; 1
    3992:	f1 f7       	brne	.-4      	; 0x3990 <LCD_displayCharacter+0x1c4>
    3994:	98 a3       	std	Y+32, r25	; 0x20
    3996:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3998:	89 a1       	ldd	r24, Y+33	; 0x21
    399a:	9a a1       	ldd	r25, Y+34	; 0x22
    399c:	01 97       	sbiw	r24, 0x01	; 1
    399e:	9a a3       	std	Y+34, r25	; 0x22
    39a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39a2:	89 a1       	ldd	r24, Y+33	; 0x21
    39a4:	9a a1       	ldd	r25, Y+34	; 0x22
    39a6:	00 97       	sbiw	r24, 0x00	; 0
    39a8:	69 f7       	brne	.-38     	; 0x3984 <LCD_displayCharacter+0x1b8>
    39aa:	14 c0       	rjmp	.+40     	; 0x39d4 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39ac:	6b a1       	ldd	r22, Y+35	; 0x23
    39ae:	7c a1       	ldd	r23, Y+36	; 0x24
    39b0:	8d a1       	ldd	r24, Y+37	; 0x25
    39b2:	9e a1       	ldd	r25, Y+38	; 0x26
    39b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b8:	dc 01       	movw	r26, r24
    39ba:	cb 01       	movw	r24, r22
    39bc:	9a a3       	std	Y+34, r25	; 0x22
    39be:	89 a3       	std	Y+33, r24	; 0x21
    39c0:	89 a1       	ldd	r24, Y+33	; 0x21
    39c2:	9a a1       	ldd	r25, Y+34	; 0x22
    39c4:	9e 8f       	std	Y+30, r25	; 0x1e
    39c6:	8d 8f       	std	Y+29, r24	; 0x1d
    39c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    39cc:	01 97       	sbiw	r24, 0x01	; 1
    39ce:	f1 f7       	brne	.-4      	; 0x39cc <LCD_displayCharacter+0x200>
    39d0:	9e 8f       	std	Y+30, r25	; 0x1e
    39d2:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Enable the LCD*/
	_delay_ms(1);   /*delay for tpw-tdsw=290-100 =190 ns due to the timing diagram*/
	DATA_PORT_LCD  = (DATA_PORT_LCD  & 0x00) |(  ch_ASCII  & 0xFF ) ;
    39d4:	e5 e3       	ldi	r30, 0x35	; 53
    39d6:	f0 e0       	ldi	r31, 0x00	; 0
    39d8:	80 81       	ld	r24, Z
    39da:	e5 e3       	ldi	r30, 0x35	; 53
    39dc:	f0 e0       	ldi	r31, 0x00	; 0
    39de:	89 ad       	ldd	r24, Y+57	; 0x39
    39e0:	80 83       	st	Z, r24
    39e2:	80 e0       	ldi	r24, 0x00	; 0
    39e4:	90 e0       	ldi	r25, 0x00	; 0
    39e6:	a0 e8       	ldi	r26, 0x80	; 128
    39e8:	bf e3       	ldi	r27, 0x3F	; 63
    39ea:	89 8f       	std	Y+25, r24	; 0x19
    39ec:	9a 8f       	std	Y+26, r25	; 0x1a
    39ee:	ab 8f       	std	Y+27, r26	; 0x1b
    39f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39f2:	69 8d       	ldd	r22, Y+25	; 0x19
    39f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39fa:	20 e0       	ldi	r18, 0x00	; 0
    39fc:	30 e0       	ldi	r19, 0x00	; 0
    39fe:	4a ef       	ldi	r20, 0xFA	; 250
    3a00:	54 e4       	ldi	r21, 0x44	; 68
    3a02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a06:	dc 01       	movw	r26, r24
    3a08:	cb 01       	movw	r24, r22
    3a0a:	8d 8b       	std	Y+21, r24	; 0x15
    3a0c:	9e 8b       	std	Y+22, r25	; 0x16
    3a0e:	af 8b       	std	Y+23, r26	; 0x17
    3a10:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a12:	6d 89       	ldd	r22, Y+21	; 0x15
    3a14:	7e 89       	ldd	r23, Y+22	; 0x16
    3a16:	8f 89       	ldd	r24, Y+23	; 0x17
    3a18:	98 8d       	ldd	r25, Y+24	; 0x18
    3a1a:	20 e0       	ldi	r18, 0x00	; 0
    3a1c:	30 e0       	ldi	r19, 0x00	; 0
    3a1e:	40 e8       	ldi	r20, 0x80	; 128
    3a20:	5f e3       	ldi	r21, 0x3F	; 63
    3a22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a26:	88 23       	and	r24, r24
    3a28:	2c f4       	brge	.+10     	; 0x3a34 <LCD_displayCharacter+0x268>
		__ticks = 1;
    3a2a:	81 e0       	ldi	r24, 0x01	; 1
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	9c 8b       	std	Y+20, r25	; 0x14
    3a30:	8b 8b       	std	Y+19, r24	; 0x13
    3a32:	3f c0       	rjmp	.+126    	; 0x3ab2 <LCD_displayCharacter+0x2e6>
	else if (__tmp > 65535)
    3a34:	6d 89       	ldd	r22, Y+21	; 0x15
    3a36:	7e 89       	ldd	r23, Y+22	; 0x16
    3a38:	8f 89       	ldd	r24, Y+23	; 0x17
    3a3a:	98 8d       	ldd	r25, Y+24	; 0x18
    3a3c:	20 e0       	ldi	r18, 0x00	; 0
    3a3e:	3f ef       	ldi	r19, 0xFF	; 255
    3a40:	4f e7       	ldi	r20, 0x7F	; 127
    3a42:	57 e4       	ldi	r21, 0x47	; 71
    3a44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a48:	18 16       	cp	r1, r24
    3a4a:	4c f5       	brge	.+82     	; 0x3a9e <LCD_displayCharacter+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a4c:	69 8d       	ldd	r22, Y+25	; 0x19
    3a4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a54:	20 e0       	ldi	r18, 0x00	; 0
    3a56:	30 e0       	ldi	r19, 0x00	; 0
    3a58:	40 e2       	ldi	r20, 0x20	; 32
    3a5a:	51 e4       	ldi	r21, 0x41	; 65
    3a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a60:	dc 01       	movw	r26, r24
    3a62:	cb 01       	movw	r24, r22
    3a64:	bc 01       	movw	r22, r24
    3a66:	cd 01       	movw	r24, r26
    3a68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a6c:	dc 01       	movw	r26, r24
    3a6e:	cb 01       	movw	r24, r22
    3a70:	9c 8b       	std	Y+20, r25	; 0x14
    3a72:	8b 8b       	std	Y+19, r24	; 0x13
    3a74:	0f c0       	rjmp	.+30     	; 0x3a94 <LCD_displayCharacter+0x2c8>
    3a76:	88 ec       	ldi	r24, 0xC8	; 200
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    3a7a:	9a 8b       	std	Y+18, r25	; 0x12
    3a7c:	89 8b       	std	Y+17, r24	; 0x11
    3a7e:	89 89       	ldd	r24, Y+17	; 0x11
    3a80:	9a 89       	ldd	r25, Y+18	; 0x12
    3a82:	01 97       	sbiw	r24, 0x01	; 1
    3a84:	f1 f7       	brne	.-4      	; 0x3a82 <LCD_displayCharacter+0x2b6>
    3a86:	9a 8b       	std	Y+18, r25	; 0x12
    3a88:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a8a:	8b 89       	ldd	r24, Y+19	; 0x13
    3a8c:	9c 89       	ldd	r25, Y+20	; 0x14
    3a8e:	01 97       	sbiw	r24, 0x01	; 1
    3a90:	9c 8b       	std	Y+20, r25	; 0x14
    3a92:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a94:	8b 89       	ldd	r24, Y+19	; 0x13
    3a96:	9c 89       	ldd	r25, Y+20	; 0x14
    3a98:	00 97       	sbiw	r24, 0x00	; 0
    3a9a:	69 f7       	brne	.-38     	; 0x3a76 <LCD_displayCharacter+0x2aa>
    3a9c:	14 c0       	rjmp	.+40     	; 0x3ac6 <LCD_displayCharacter+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a9e:	6d 89       	ldd	r22, Y+21	; 0x15
    3aa0:	7e 89       	ldd	r23, Y+22	; 0x16
    3aa2:	8f 89       	ldd	r24, Y+23	; 0x17
    3aa4:	98 8d       	ldd	r25, Y+24	; 0x18
    3aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aaa:	dc 01       	movw	r26, r24
    3aac:	cb 01       	movw	r24, r22
    3aae:	9c 8b       	std	Y+20, r25	; 0x14
    3ab0:	8b 8b       	std	Y+19, r24	; 0x13
    3ab2:	8b 89       	ldd	r24, Y+19	; 0x13
    3ab4:	9c 89       	ldd	r25, Y+20	; 0x14
    3ab6:	98 8b       	std	Y+16, r25	; 0x10
    3ab8:	8f 87       	std	Y+15, r24	; 0x0f
    3aba:	8f 85       	ldd	r24, Y+15	; 0x0f
    3abc:	98 89       	ldd	r25, Y+16	; 0x10
    3abe:	01 97       	sbiw	r24, 0x01	; 1
    3ac0:	f1 f7       	brne	.-4      	; 0x3abe <LCD_displayCharacter+0x2f2>
    3ac2:	98 8b       	std	Y+16, r25	; 0x10
    3ac4:	8f 87       	std	Y+15, r24	; 0x0f
	/*send data to the port to display the LCD */
	_delay_ms(1);   /*delay for tdsw =  100 ns due to the timing diagram*/
	CLEAR_BIT(CONTROL_PORT_LCD,ENABLE_LCD);
    3ac6:	a2 e3       	ldi	r26, 0x32	; 50
    3ac8:	b0 e0       	ldi	r27, 0x00	; 0
    3aca:	e2 e3       	ldi	r30, 0x32	; 50
    3acc:	f0 e0       	ldi	r31, 0x00	; 0
    3ace:	80 81       	ld	r24, Z
    3ad0:	8f 7b       	andi	r24, 0xBF	; 191
    3ad2:	8c 93       	st	X, r24
    3ad4:	80 e0       	ldi	r24, 0x00	; 0
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
    3ad8:	a0 e8       	ldi	r26, 0x80	; 128
    3ada:	bf e3       	ldi	r27, 0x3F	; 63
    3adc:	8b 87       	std	Y+11, r24	; 0x0b
    3ade:	9c 87       	std	Y+12, r25	; 0x0c
    3ae0:	ad 87       	std	Y+13, r26	; 0x0d
    3ae2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ae4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ae6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ae8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3aea:	9e 85       	ldd	r25, Y+14	; 0x0e
    3aec:	20 e0       	ldi	r18, 0x00	; 0
    3aee:	30 e0       	ldi	r19, 0x00	; 0
    3af0:	4a ef       	ldi	r20, 0xFA	; 250
    3af2:	54 e4       	ldi	r21, 0x44	; 68
    3af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3af8:	dc 01       	movw	r26, r24
    3afa:	cb 01       	movw	r24, r22
    3afc:	8f 83       	std	Y+7, r24	; 0x07
    3afe:	98 87       	std	Y+8, r25	; 0x08
    3b00:	a9 87       	std	Y+9, r26	; 0x09
    3b02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b04:	6f 81       	ldd	r22, Y+7	; 0x07
    3b06:	78 85       	ldd	r23, Y+8	; 0x08
    3b08:	89 85       	ldd	r24, Y+9	; 0x09
    3b0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b0c:	20 e0       	ldi	r18, 0x00	; 0
    3b0e:	30 e0       	ldi	r19, 0x00	; 0
    3b10:	40 e8       	ldi	r20, 0x80	; 128
    3b12:	5f e3       	ldi	r21, 0x3F	; 63
    3b14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b18:	88 23       	and	r24, r24
    3b1a:	2c f4       	brge	.+10     	; 0x3b26 <LCD_displayCharacter+0x35a>
		__ticks = 1;
    3b1c:	81 e0       	ldi	r24, 0x01	; 1
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	9e 83       	std	Y+6, r25	; 0x06
    3b22:	8d 83       	std	Y+5, r24	; 0x05
    3b24:	3f c0       	rjmp	.+126    	; 0x3ba4 <LCD_displayCharacter+0x3d8>
	else if (__tmp > 65535)
    3b26:	6f 81       	ldd	r22, Y+7	; 0x07
    3b28:	78 85       	ldd	r23, Y+8	; 0x08
    3b2a:	89 85       	ldd	r24, Y+9	; 0x09
    3b2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b2e:	20 e0       	ldi	r18, 0x00	; 0
    3b30:	3f ef       	ldi	r19, 0xFF	; 255
    3b32:	4f e7       	ldi	r20, 0x7F	; 127
    3b34:	57 e4       	ldi	r21, 0x47	; 71
    3b36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b3a:	18 16       	cp	r1, r24
    3b3c:	4c f5       	brge	.+82     	; 0x3b90 <LCD_displayCharacter+0x3c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b40:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b42:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b44:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b46:	20 e0       	ldi	r18, 0x00	; 0
    3b48:	30 e0       	ldi	r19, 0x00	; 0
    3b4a:	40 e2       	ldi	r20, 0x20	; 32
    3b4c:	51 e4       	ldi	r21, 0x41	; 65
    3b4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b52:	dc 01       	movw	r26, r24
    3b54:	cb 01       	movw	r24, r22
    3b56:	bc 01       	movw	r22, r24
    3b58:	cd 01       	movw	r24, r26
    3b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b5e:	dc 01       	movw	r26, r24
    3b60:	cb 01       	movw	r24, r22
    3b62:	9e 83       	std	Y+6, r25	; 0x06
    3b64:	8d 83       	std	Y+5, r24	; 0x05
    3b66:	0f c0       	rjmp	.+30     	; 0x3b86 <LCD_displayCharacter+0x3ba>
    3b68:	88 ec       	ldi	r24, 0xC8	; 200
    3b6a:	90 e0       	ldi	r25, 0x00	; 0
    3b6c:	9c 83       	std	Y+4, r25	; 0x04
    3b6e:	8b 83       	std	Y+3, r24	; 0x03
    3b70:	8b 81       	ldd	r24, Y+3	; 0x03
    3b72:	9c 81       	ldd	r25, Y+4	; 0x04
    3b74:	01 97       	sbiw	r24, 0x01	; 1
    3b76:	f1 f7       	brne	.-4      	; 0x3b74 <LCD_displayCharacter+0x3a8>
    3b78:	9c 83       	std	Y+4, r25	; 0x04
    3b7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b80:	01 97       	sbiw	r24, 0x01	; 1
    3b82:	9e 83       	std	Y+6, r25	; 0x06
    3b84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b86:	8d 81       	ldd	r24, Y+5	; 0x05
    3b88:	9e 81       	ldd	r25, Y+6	; 0x06
    3b8a:	00 97       	sbiw	r24, 0x00	; 0
    3b8c:	69 f7       	brne	.-38     	; 0x3b68 <LCD_displayCharacter+0x39c>
    3b8e:	14 c0       	rjmp	.+40     	; 0x3bb8 <LCD_displayCharacter+0x3ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b90:	6f 81       	ldd	r22, Y+7	; 0x07
    3b92:	78 85       	ldd	r23, Y+8	; 0x08
    3b94:	89 85       	ldd	r24, Y+9	; 0x09
    3b96:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b9c:	dc 01       	movw	r26, r24
    3b9e:	cb 01       	movw	r24, r22
    3ba0:	9e 83       	std	Y+6, r25	; 0x06
    3ba2:	8d 83       	std	Y+5, r24	; 0x05
    3ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ba8:	9a 83       	std	Y+2, r25	; 0x02
    3baa:	89 83       	std	Y+1, r24	; 0x01
    3bac:	89 81       	ldd	r24, Y+1	; 0x01
    3bae:	9a 81       	ldd	r25, Y+2	; 0x02
    3bb0:	01 97       	sbiw	r24, 0x01	; 1
    3bb2:	f1 f7       	brne	.-4      	; 0x3bb0 <LCD_displayCharacter+0x3e4>
    3bb4:	9a 83       	std	Y+2, r25	; 0x02
    3bb6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);   /*delay 13 ns due to the timing diagram*/
}
    3bb8:	ea 96       	adiw	r28, 0x3a	; 58
    3bba:	0f b6       	in	r0, 0x3f	; 63
    3bbc:	f8 94       	cli
    3bbe:	de bf       	out	0x3e, r29	; 62
    3bc0:	0f be       	out	0x3f, r0	; 63
    3bc2:	cd bf       	out	0x3d, r28	; 61
    3bc4:	cf 91       	pop	r28
    3bc6:	df 91       	pop	r29
    3bc8:	08 95       	ret

00003bca <LCD_displayString>:
/*Function to display a string for the LCD */
void LCD_displayString(const char *Str)
{
    3bca:	df 93       	push	r29
    3bcc:	cf 93       	push	r28
    3bce:	00 d0       	rcall	.+0      	; 0x3bd0 <LCD_displayString+0x6>
    3bd0:	cd b7       	in	r28, 0x3d	; 61
    3bd2:	de b7       	in	r29, 0x3e	; 62
    3bd4:	9a 83       	std	Y+2, r25	; 0x02
    3bd6:	89 83       	std	Y+1, r24	; 0x01
    3bd8:	0a c0       	rjmp	.+20     	; 0x3bee <LCD_displayString+0x24>
	while((*Str) != '\0')
	{
		LCD_displayCharacter(*Str);
    3bda:	e9 81       	ldd	r30, Y+1	; 0x01
    3bdc:	fa 81       	ldd	r31, Y+2	; 0x02
    3bde:	80 81       	ld	r24, Z
    3be0:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <LCD_displayCharacter>
		Str++;
    3be4:	89 81       	ldd	r24, Y+1	; 0x01
    3be6:	9a 81       	ldd	r25, Y+2	; 0x02
    3be8:	01 96       	adiw	r24, 0x01	; 1
    3bea:	9a 83       	std	Y+2, r25	; 0x02
    3bec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);   /*delay 13 ns due to the timing diagram*/
}
/*Function to display a string for the LCD */
void LCD_displayString(const char *Str)
{
	while((*Str) != '\0')
    3bee:	e9 81       	ldd	r30, Y+1	; 0x01
    3bf0:	fa 81       	ldd	r31, Y+2	; 0x02
    3bf2:	80 81       	ld	r24, Z
    3bf4:	88 23       	and	r24, r24
    3bf6:	89 f7       	brne	.-30     	; 0x3bda <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	/*while the value that the pointers point to is not equal to NULL display it on the screen*/
}
    3bf8:	0f 90       	pop	r0
    3bfa:	0f 90       	pop	r0
    3bfc:	cf 91       	pop	r28
    3bfe:	df 91       	pop	r29
    3c00:	08 95       	ret

00003c02 <LCD_goToRowColumn>:
/*Function to go to a certain row and column */
void LCD_goToRowColumn(uint8 row,uint8 col)
{
    3c02:	df 93       	push	r29
    3c04:	cf 93       	push	r28
    3c06:	00 d0       	rcall	.+0      	; 0x3c08 <LCD_goToRowColumn+0x6>
    3c08:	00 d0       	rcall	.+0      	; 0x3c0a <LCD_goToRowColumn+0x8>
    3c0a:	0f 92       	push	r0
    3c0c:	cd b7       	in	r28, 0x3d	; 61
    3c0e:	de b7       	in	r29, 0x3e	; 62
    3c10:	8a 83       	std	Y+2, r24	; 0x02
    3c12:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	/* first of all calculate the required address */
	switch(row)
    3c14:	8a 81       	ldd	r24, Y+2	; 0x02
    3c16:	28 2f       	mov	r18, r24
    3c18:	30 e0       	ldi	r19, 0x00	; 0
    3c1a:	3d 83       	std	Y+5, r19	; 0x05
    3c1c:	2c 83       	std	Y+4, r18	; 0x04
    3c1e:	8c 81       	ldd	r24, Y+4	; 0x04
    3c20:	9d 81       	ldd	r25, Y+5	; 0x05
    3c22:	81 30       	cpi	r24, 0x01	; 1
    3c24:	91 05       	cpc	r25, r1
    3c26:	c1 f0       	breq	.+48     	; 0x3c58 <LCD_goToRowColumn+0x56>
    3c28:	2c 81       	ldd	r18, Y+4	; 0x04
    3c2a:	3d 81       	ldd	r19, Y+5	; 0x05
    3c2c:	22 30       	cpi	r18, 0x02	; 2
    3c2e:	31 05       	cpc	r19, r1
    3c30:	2c f4       	brge	.+10     	; 0x3c3c <LCD_goToRowColumn+0x3a>
    3c32:	8c 81       	ldd	r24, Y+4	; 0x04
    3c34:	9d 81       	ldd	r25, Y+5	; 0x05
    3c36:	00 97       	sbiw	r24, 0x00	; 0
    3c38:	61 f0       	breq	.+24     	; 0x3c52 <LCD_goToRowColumn+0x50>
    3c3a:	19 c0       	rjmp	.+50     	; 0x3c6e <LCD_goToRowColumn+0x6c>
    3c3c:	2c 81       	ldd	r18, Y+4	; 0x04
    3c3e:	3d 81       	ldd	r19, Y+5	; 0x05
    3c40:	22 30       	cpi	r18, 0x02	; 2
    3c42:	31 05       	cpc	r19, r1
    3c44:	69 f0       	breq	.+26     	; 0x3c60 <LCD_goToRowColumn+0x5e>
    3c46:	8c 81       	ldd	r24, Y+4	; 0x04
    3c48:	9d 81       	ldd	r25, Y+5	; 0x05
    3c4a:	83 30       	cpi	r24, 0x03	; 3
    3c4c:	91 05       	cpc	r25, r1
    3c4e:	61 f0       	breq	.+24     	; 0x3c68 <LCD_goToRowColumn+0x66>
    3c50:	0e c0       	rjmp	.+28     	; 0x3c6e <LCD_goToRowColumn+0x6c>
	{
	case 0:
		Address=col;
    3c52:	8b 81       	ldd	r24, Y+3	; 0x03
    3c54:	89 83       	std	Y+1, r24	; 0x01
    3c56:	0b c0       	rjmp	.+22     	; 0x3c6e <LCD_goToRowColumn+0x6c>
		break;
	case 1:
		Address=col+0x40;
    3c58:	8b 81       	ldd	r24, Y+3	; 0x03
    3c5a:	80 5c       	subi	r24, 0xC0	; 192
    3c5c:	89 83       	std	Y+1, r24	; 0x01
    3c5e:	07 c0       	rjmp	.+14     	; 0x3c6e <LCD_goToRowColumn+0x6c>
		break;
	case 2:
		Address=col+0x10;
    3c60:	8b 81       	ldd	r24, Y+3	; 0x03
    3c62:	80 5f       	subi	r24, 0xF0	; 240
    3c64:	89 83       	std	Y+1, r24	; 0x01
    3c66:	03 c0       	rjmp	.+6      	; 0x3c6e <LCD_goToRowColumn+0x6c>
		break;
	case 3:
		Address=col+0x50;
    3c68:	8b 81       	ldd	r24, Y+3	; 0x03
    3c6a:	80 5b       	subi	r24, 0xB0	; 176
    3c6c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | FORCE_CURSOR_TO_FIRST_OF_LINE );
    3c6e:	89 81       	ldd	r24, Y+1	; 0x01
    3c70:	80 68       	ori	r24, 0x80	; 128
    3c72:	0e 94 e7 19 	call	0x33ce	; 0x33ce <LCD_sendCommand>
}
    3c76:	0f 90       	pop	r0
    3c78:	0f 90       	pop	r0
    3c7a:	0f 90       	pop	r0
    3c7c:	0f 90       	pop	r0
    3c7e:	0f 90       	pop	r0
    3c80:	cf 91       	pop	r28
    3c82:	df 91       	pop	r29
    3c84:	08 95       	ret

00003c86 <LCD_displayStringRowColumn>:
/*Function to display a certain row and column */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3c86:	df 93       	push	r29
    3c88:	cf 93       	push	r28
    3c8a:	00 d0       	rcall	.+0      	; 0x3c8c <LCD_displayStringRowColumn+0x6>
    3c8c:	00 d0       	rcall	.+0      	; 0x3c8e <LCD_displayStringRowColumn+0x8>
    3c8e:	cd b7       	in	r28, 0x3d	; 61
    3c90:	de b7       	in	r29, 0x3e	; 62
    3c92:	89 83       	std	Y+1, r24	; 0x01
    3c94:	6a 83       	std	Y+2, r22	; 0x02
    3c96:	5c 83       	std	Y+4, r21	; 0x04
    3c98:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    3c9a:	89 81       	ldd	r24, Y+1	; 0x01
    3c9c:	6a 81       	ldd	r22, Y+2	; 0x02
    3c9e:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    3ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ca6:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <LCD_displayString>
}
    3caa:	0f 90       	pop	r0
    3cac:	0f 90       	pop	r0
    3cae:	0f 90       	pop	r0
    3cb0:	0f 90       	pop	r0
    3cb2:	cf 91       	pop	r28
    3cb4:	df 91       	pop	r29
    3cb6:	08 95       	ret

00003cb8 <LCD_intgerToStringDisplay>:
/*Function to convert from int to string*/
void LCD_intgerToStringDisplay(int data)
{
    3cb8:	df 93       	push	r29
    3cba:	cf 93       	push	r28
    3cbc:	cd b7       	in	r28, 0x3d	; 61
    3cbe:	de b7       	in	r29, 0x3e	; 62
    3cc0:	62 97       	sbiw	r28, 0x12	; 18
    3cc2:	0f b6       	in	r0, 0x3f	; 63
    3cc4:	f8 94       	cli
    3cc6:	de bf       	out	0x3e, r29	; 62
    3cc8:	0f be       	out	0x3f, r0	; 63
    3cca:	cd bf       	out	0x3d, r28	; 61
    3ccc:	9a 8b       	std	Y+18, r25	; 0x12
    3cce:	89 8b       	std	Y+17, r24	; 0x11
	char stringDATA[16]; /* String to hold the ascii result */
	itoa(data,stringDATA,10); /* 10 for decimal */
    3cd0:	89 89       	ldd	r24, Y+17	; 0x11
    3cd2:	9a 89       	ldd	r25, Y+18	; 0x12
    3cd4:	9e 01       	movw	r18, r28
    3cd6:	2f 5f       	subi	r18, 0xFF	; 255
    3cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    3cda:	b9 01       	movw	r22, r18
    3cdc:	4a e0       	ldi	r20, 0x0A	; 10
    3cde:	50 e0       	ldi	r21, 0x00	; 0
    3ce0:	0e 94 39 20 	call	0x4072	; 0x4072 <itoa>
	LCD_displayString(stringDATA);
    3ce4:	ce 01       	movw	r24, r28
    3ce6:	01 96       	adiw	r24, 0x01	; 1
    3ce8:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <LCD_displayString>
}
    3cec:	62 96       	adiw	r28, 0x12	; 18
    3cee:	0f b6       	in	r0, 0x3f	; 63
    3cf0:	f8 94       	cli
    3cf2:	de bf       	out	0x3e, r29	; 62
    3cf4:	0f be       	out	0x3f, r0	; 63
    3cf6:	cd bf       	out	0x3d, r28	; 61
    3cf8:	cf 91       	pop	r28
    3cfa:	df 91       	pop	r29
    3cfc:	08 95       	ret

00003cfe <LCD_clearScreen>:
/*Function to clear the screen*/
void LCD_clearScreen(void)
{
    3cfe:	df 93       	push	r29
    3d00:	cf 93       	push	r28
    3d02:	cd b7       	in	r28, 0x3d	; 61
    3d04:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_SCREEN_COMMAND); /*clear display*/
    3d06:	81 e0       	ldi	r24, 0x01	; 1
    3d08:	0e 94 e7 19 	call	0x33ce	; 0x33ce <LCD_sendCommand>
}
    3d0c:	cf 91       	pop	r28
    3d0e:	df 91       	pop	r29
    3d10:	08 95       	ret

00003d12 <UART_sendByte>:

#include"USART.h"
static volatile uint16 BAUD_PRESCALER=0,BAUD_RATE=0;
/*****************FUNCTIONS DEFINTIONS *****************/
void UART_sendByte(uint8 data)
{
    3d12:	df 93       	push	r29
    3d14:	cf 93       	push	r28
    3d16:	0f 92       	push	r0
    3d18:	cd b7       	in	r28, 0x3d	; 61
    3d1a:	de b7       	in	r29, 0x3e	; 62
    3d1c:	89 83       	std	Y+1, r24	; 0x01
	/*pooling till the flag of the UDRE is set when UDR is empty and ready for new transmitting*/
	while(BIT_IS_CLEAR(UCSRA,UDRE)){} /*if equal one --> transmitter register is empty*/
    3d1e:	eb e2       	ldi	r30, 0x2B	; 43
    3d20:	f0 e0       	ldi	r31, 0x00	; 0
    3d22:	80 81       	ld	r24, Z
    3d24:	88 2f       	mov	r24, r24
    3d26:	90 e0       	ldi	r25, 0x00	; 0
    3d28:	80 72       	andi	r24, 0x20	; 32
    3d2a:	90 70       	andi	r25, 0x00	; 0
    3d2c:	00 97       	sbiw	r24, 0x00	; 0
    3d2e:	b9 f3       	breq	.-18     	; 0x3d1e <UART_sendByte+0xc>
	UDR =data;
    3d30:	ec e2       	ldi	r30, 0x2C	; 44
    3d32:	f0 e0       	ldi	r31, 0x00	; 0
    3d34:	89 81       	ldd	r24, Y+1	; 0x01
    3d36:	80 83       	st	Z, r24
	/*USART I/O DATA REGISTER*/
}
    3d38:	0f 90       	pop	r0
    3d3a:	cf 91       	pop	r28
    3d3c:	df 91       	pop	r29
    3d3e:	08 95       	ret

00003d40 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    3d40:	df 93       	push	r29
    3d42:	cf 93       	push	r28
    3d44:	cd b7       	in	r28, 0x3d	; 61
    3d46:	de b7       	in	r29, 0x3e	; 62
	/*pooling till the flag of the RXC is set when UDR is empty and ready for new transmitting*/
	while (BIT_IS_CLEAR(UCSRA,RXC))
    3d48:	eb e2       	ldi	r30, 0x2B	; 43
    3d4a:	f0 e0       	ldi	r31, 0x00	; 0
    3d4c:	80 81       	ld	r24, Z
    3d4e:	88 23       	and	r24, r24
    3d50:	dc f7       	brge	.-10     	; 0x3d48 <UART_recieveByte+0x8>
	{}
	return UDR;
    3d52:	ec e2       	ldi	r30, 0x2C	; 44
    3d54:	f0 e0       	ldi	r31, 0x00	; 0
    3d56:	80 81       	ld	r24, Z
	/*clear rxc flag and read data*/
}
    3d58:	cf 91       	pop	r28
    3d5a:	df 91       	pop	r29
    3d5c:	08 95       	ret

00003d5e <UART_sendString>:
void UART_sendString(const uint8 *Str)
{
    3d5e:	df 93       	push	r29
    3d60:	cf 93       	push	r28
    3d62:	00 d0       	rcall	.+0      	; 0x3d64 <UART_sendString+0x6>
    3d64:	0f 92       	push	r0
    3d66:	cd b7       	in	r28, 0x3d	; 61
    3d68:	de b7       	in	r29, 0x3e	; 62
    3d6a:	9b 83       	std	Y+3, r25	; 0x03
    3d6c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i =0;
    3d6e:	19 82       	std	Y+1, r1	; 0x01
    3d70:	0e c0       	rjmp	.+28     	; 0x3d8e <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		/*Send the components of the string without the null character*/
		UART_sendByte(Str[i]);
    3d72:	89 81       	ldd	r24, Y+1	; 0x01
    3d74:	28 2f       	mov	r18, r24
    3d76:	30 e0       	ldi	r19, 0x00	; 0
    3d78:	8a 81       	ldd	r24, Y+2	; 0x02
    3d7a:	9b 81       	ldd	r25, Y+3	; 0x03
    3d7c:	fc 01       	movw	r30, r24
    3d7e:	e2 0f       	add	r30, r18
    3d80:	f3 1f       	adc	r31, r19
    3d82:	80 81       	ld	r24, Z
    3d84:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <UART_sendByte>
		i++;
    3d88:	89 81       	ldd	r24, Y+1	; 0x01
    3d8a:	8f 5f       	subi	r24, 0xFF	; 255
    3d8c:	89 83       	std	Y+1, r24	; 0x01
	/*clear rxc flag and read data*/
}
void UART_sendString(const uint8 *Str)
{
	uint8 i =0;
	while(Str[i] != '\0')
    3d8e:	89 81       	ldd	r24, Y+1	; 0x01
    3d90:	28 2f       	mov	r18, r24
    3d92:	30 e0       	ldi	r19, 0x00	; 0
    3d94:	8a 81       	ldd	r24, Y+2	; 0x02
    3d96:	9b 81       	ldd	r25, Y+3	; 0x03
    3d98:	fc 01       	movw	r30, r24
    3d9a:	e2 0f       	add	r30, r18
    3d9c:	f3 1f       	adc	r31, r19
    3d9e:	80 81       	ld	r24, Z
    3da0:	88 23       	and	r24, r24
    3da2:	39 f7       	brne	.-50     	; 0x3d72 <UART_sendString+0x14>
		/*Send the components of the string without the null character*/
		UART_sendByte(Str[i]);
		i++;
	}

}
    3da4:	0f 90       	pop	r0
    3da6:	0f 90       	pop	r0
    3da8:	0f 90       	pop	r0
    3daa:	cf 91       	pop	r28
    3dac:	df 91       	pop	r29
    3dae:	08 95       	ret

00003db0 <UART_receivestring>:

void UART_receivestring(uint8 *Str)
{
    3db0:	0f 93       	push	r16
    3db2:	1f 93       	push	r17
    3db4:	df 93       	push	r29
    3db6:	cf 93       	push	r28
    3db8:	00 d0       	rcall	.+0      	; 0x3dba <UART_receivestring+0xa>
    3dba:	0f 92       	push	r0
    3dbc:	cd b7       	in	r28, 0x3d	; 61
    3dbe:	de b7       	in	r29, 0x3e	; 62
    3dc0:	9b 83       	std	Y+3, r25	; 0x03
    3dc2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i =0;
    3dc4:	19 82       	std	Y+1, r1	; 0x01
	Str[i] =UART_recieveByte();
    3dc6:	89 81       	ldd	r24, Y+1	; 0x01
    3dc8:	28 2f       	mov	r18, r24
    3dca:	30 e0       	ldi	r19, 0x00	; 0
    3dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    3dce:	9b 81       	ldd	r25, Y+3	; 0x03
    3dd0:	8c 01       	movw	r16, r24
    3dd2:	02 0f       	add	r16, r18
    3dd4:	13 1f       	adc	r17, r19
    3dd6:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <UART_recieveByte>
    3dda:	f8 01       	movw	r30, r16
    3ddc:	80 83       	st	Z, r24
    3dde:	0f c0       	rjmp	.+30     	; 0x3dfe <UART_receivestring+0x4e>
	/*creating an imaginary null charachter of my own at receiver ( # )*/
	while(Str[i] != '$')
	{
		i++;
    3de0:	89 81       	ldd	r24, Y+1	; 0x01
    3de2:	8f 5f       	subi	r24, 0xFF	; 255
    3de4:	89 83       	std	Y+1, r24	; 0x01
		Str[i]=UART_recieveByte();
    3de6:	89 81       	ldd	r24, Y+1	; 0x01
    3de8:	28 2f       	mov	r18, r24
    3dea:	30 e0       	ldi	r19, 0x00	; 0
    3dec:	8a 81       	ldd	r24, Y+2	; 0x02
    3dee:	9b 81       	ldd	r25, Y+3	; 0x03
    3df0:	8c 01       	movw	r16, r24
    3df2:	02 0f       	add	r16, r18
    3df4:	13 1f       	adc	r17, r19
    3df6:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <UART_recieveByte>
    3dfa:	f8 01       	movw	r30, r16
    3dfc:	80 83       	st	Z, r24
void UART_receivestring(uint8 *Str)
{
	uint8 i =0;
	Str[i] =UART_recieveByte();
	/*creating an imaginary null charachter of my own at receiver ( # )*/
	while(Str[i] != '$')
    3dfe:	89 81       	ldd	r24, Y+1	; 0x01
    3e00:	28 2f       	mov	r18, r24
    3e02:	30 e0       	ldi	r19, 0x00	; 0
    3e04:	8a 81       	ldd	r24, Y+2	; 0x02
    3e06:	9b 81       	ldd	r25, Y+3	; 0x03
    3e08:	fc 01       	movw	r30, r24
    3e0a:	e2 0f       	add	r30, r18
    3e0c:	f3 1f       	adc	r31, r19
    3e0e:	80 81       	ld	r24, Z
    3e10:	84 32       	cpi	r24, 0x24	; 36
    3e12:	31 f7       	brne	.-52     	; 0x3de0 <UART_receivestring+0x30>
	{
		i++;
		Str[i]=UART_recieveByte();
	}
	Str[i] ='\0';
    3e14:	89 81       	ldd	r24, Y+1	; 0x01
    3e16:	28 2f       	mov	r18, r24
    3e18:	30 e0       	ldi	r19, 0x00	; 0
    3e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e1c:	9b 81       	ldd	r25, Y+3	; 0x03
    3e1e:	fc 01       	movw	r30, r24
    3e20:	e2 0f       	add	r30, r18
    3e22:	f3 1f       	adc	r31, r19
    3e24:	10 82       	st	Z, r1
	/*return the null character to its original */

}
    3e26:	0f 90       	pop	r0
    3e28:	0f 90       	pop	r0
    3e2a:	0f 90       	pop	r0
    3e2c:	cf 91       	pop	r28
    3e2e:	df 91       	pop	r29
    3e30:	1f 91       	pop	r17
    3e32:	0f 91       	pop	r16
    3e34:	08 95       	ret

00003e36 <UART_init>:
void UART_init(const USART_config_type * Config_Ptr)
{
    3e36:	df 93       	push	r29
    3e38:	cf 93       	push	r28
    3e3a:	00 d0       	rcall	.+0      	; 0x3e3c <UART_init+0x6>
    3e3c:	cd b7       	in	r28, 0x3d	; 61
    3e3e:	de b7       	in	r29, 0x3e	; 62
    3e40:	9a 83       	std	Y+2, r25	; 0x02
    3e42:	89 83       	std	Y+1, r24	; 0x01
	//FRAME
	//USCRA CONFIG
	SET_BIT(UCSRA,U2X);; //higher transmission speed
    3e44:	ab e2       	ldi	r26, 0x2B	; 43
    3e46:	b0 e0       	ldi	r27, 0x00	; 0
    3e48:	eb e2       	ldi	r30, 0x2B	; 43
    3e4a:	f0 e0       	ldi	r31, 0x00	; 0
    3e4c:	80 81       	ld	r24, Z
    3e4e:	82 60       	ori	r24, 0x02	; 2
    3e50:	8c 93       	st	X, r24
	//UCSRB CONFIG
	CLEAR_BIT(UCSRB,RXCIE); //DISABLE INTTRUPTS
    3e52:	aa e2       	ldi	r26, 0x2A	; 42
    3e54:	b0 e0       	ldi	r27, 0x00	; 0
    3e56:	ea e2       	ldi	r30, 0x2A	; 42
    3e58:	f0 e0       	ldi	r31, 0x00	; 0
    3e5a:	80 81       	ld	r24, Z
    3e5c:	8f 77       	andi	r24, 0x7F	; 127
    3e5e:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRB,TXCIE); //DISABLE INTTRUPTS
    3e60:	aa e2       	ldi	r26, 0x2A	; 42
    3e62:	b0 e0       	ldi	r27, 0x00	; 0
    3e64:	ea e2       	ldi	r30, 0x2A	; 42
    3e66:	f0 e0       	ldi	r31, 0x00	; 0
    3e68:	80 81       	ld	r24, Z
    3e6a:	8f 7b       	andi	r24, 0xBF	; 191
    3e6c:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRB,UDRIE); //DISABLE USART Data Register Empty Interrupt Enable
    3e6e:	aa e2       	ldi	r26, 0x2A	; 42
    3e70:	b0 e0       	ldi	r27, 0x00	; 0
    3e72:	ea e2       	ldi	r30, 0x2A	; 42
    3e74:	f0 e0       	ldi	r31, 0x00	; 0
    3e76:	80 81       	ld	r24, Z
    3e78:	8f 7d       	andi	r24, 0xDF	; 223
    3e7a:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
    3e7c:	aa e2       	ldi	r26, 0x2A	; 42
    3e7e:	b0 e0       	ldi	r27, 0x00	; 0
    3e80:	ea e2       	ldi	r30, 0x2A	; 42
    3e82:	f0 e0       	ldi	r31, 0x00	; 0
    3e84:	80 81       	ld	r24, Z
    3e86:	88 60       	ori	r24, 0x08	; 8
    3e88:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXEN); //ENABLE REVIECER AND TRANSMITTER
    3e8a:	aa e2       	ldi	r26, 0x2A	; 42
    3e8c:	b0 e0       	ldi	r27, 0x00	; 0
    3e8e:	ea e2       	ldi	r30, 0x2A	; 42
    3e90:	f0 e0       	ldi	r31, 0x00	; 0
    3e92:	80 81       	ld	r24, Z
    3e94:	80 61       	ori	r24, 0x10	; 16
    3e96:	8c 93       	st	X, r24
	//USZ BIT SETTINGS 8 bits
	CLEAR_BIT(UCSRB,UCSZ2);//8 BIT MODE
    3e98:	aa e2       	ldi	r26, 0x2A	; 42
    3e9a:	b0 e0       	ldi	r27, 0x00	; 0
    3e9c:	ea e2       	ldi	r30, 0x2A	; 42
    3e9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ea0:	80 81       	ld	r24, Z
    3ea2:	8b 7f       	andi	r24, 0xFB	; 251
    3ea4:	8c 93       	st	X, r24
	//UCSRC CONFIG
	SET_BIT(UCSRC,URSEL); //Must be one when writing to USSRC
    3ea6:	a0 e4       	ldi	r26, 0x40	; 64
    3ea8:	b0 e0       	ldi	r27, 0x00	; 0
    3eaa:	e0 e4       	ldi	r30, 0x40	; 64
    3eac:	f0 e0       	ldi	r31, 0x00	; 0
    3eae:	80 81       	ld	r24, Z
    3eb0:	80 68       	ori	r24, 0x80	; 128
    3eb2:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRC,UCPOL);
    3eb4:	a0 e4       	ldi	r26, 0x40	; 64
    3eb6:	b0 e0       	ldi	r27, 0x00	; 0
    3eb8:	e0 e4       	ldi	r30, 0x40	; 64
    3eba:	f0 e0       	ldi	r31, 0x00	; 0
    3ebc:	80 81       	ld	r24, Z
    3ebe:	8e 7f       	andi	r24, 0xFE	; 254
    3ec0:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRC,UMSEL);//ASYNCHORNUS MODE
    3ec2:	a0 e4       	ldi	r26, 0x40	; 64
    3ec4:	b0 e0       	ldi	r27, 0x00	; 0
    3ec6:	e0 e4       	ldi	r30, 0x40	; 64
    3ec8:	f0 e0       	ldi	r31, 0x00	; 0
    3eca:	80 81       	ld	r24, Z
    3ecc:	8f 7b       	andi	r24, 0xBF	; 191
    3ece:	8c 93       	st	X, r24
	//MODE WITH DISAPLED PARITY UMP1 UMP0 00
	UCSRC = (UCSRC & 0xCF) | (Config_Ptr-> paritybit);
    3ed0:	a0 e4       	ldi	r26, 0x40	; 64
    3ed2:	b0 e0       	ldi	r27, 0x00	; 0
    3ed4:	e0 e4       	ldi	r30, 0x40	; 64
    3ed6:	f0 e0       	ldi	r31, 0x00	; 0
    3ed8:	80 81       	ld	r24, Z
    3eda:	98 2f       	mov	r25, r24
    3edc:	9f 7c       	andi	r25, 0xCF	; 207
    3ede:	e9 81       	ldd	r30, Y+1	; 0x01
    3ee0:	fa 81       	ldd	r31, Y+2	; 0x02
    3ee2:	81 81       	ldd	r24, Z+1	; 0x01
    3ee4:	89 2b       	or	r24, r25
    3ee6:	8c 93       	st	X, r24
	//STOP BIT
	UCSRC = (UCSRC & 0xF7) | (Config_Ptr-> stopbit);
    3ee8:	a0 e4       	ldi	r26, 0x40	; 64
    3eea:	b0 e0       	ldi	r27, 0x00	; 0
    3eec:	e0 e4       	ldi	r30, 0x40	; 64
    3eee:	f0 e0       	ldi	r31, 0x00	; 0
    3ef0:	80 81       	ld	r24, Z
    3ef2:	98 2f       	mov	r25, r24
    3ef4:	97 7f       	andi	r25, 0xF7	; 247
    3ef6:	e9 81       	ldd	r30, Y+1	; 0x01
    3ef8:	fa 81       	ldd	r31, Y+2	; 0x02
    3efa:	82 81       	ldd	r24, Z+2	; 0x02
    3efc:	89 2b       	or	r24, r25
    3efe:	8c 93       	st	X, r24
	//USZ BIT SETTINGS
	UCSRC = (UCSRC & 0xF9) | (Config_Ptr-> bitdata);
    3f00:	a0 e4       	ldi	r26, 0x40	; 64
    3f02:	b0 e0       	ldi	r27, 0x00	; 0
    3f04:	e0 e4       	ldi	r30, 0x40	; 64
    3f06:	f0 e0       	ldi	r31, 0x00	; 0
    3f08:	80 81       	ld	r24, Z
    3f0a:	98 2f       	mov	r25, r24
    3f0c:	99 7f       	andi	r25, 0xF9	; 249
    3f0e:	e9 81       	ldd	r30, Y+1	; 0x01
    3f10:	fa 81       	ldd	r31, Y+2	; 0x02
    3f12:	80 81       	ld	r24, Z
    3f14:	89 2b       	or	r24, r25
    3f16:	8c 93       	st	X, r24
	//9600 bits /sec from BAUD RATE equation
	//UBRR = (Freq (osc of processor) /8*BAUD ) -1 = 12  must be positive or zero
	BAUD_RATE=(Config_Ptr-> baudrate);
    3f18:	e9 81       	ldd	r30, Y+1	; 0x01
    3f1a:	fa 81       	ldd	r31, Y+2	; 0x02
    3f1c:	83 81       	ldd	r24, Z+3	; 0x03
    3f1e:	94 81       	ldd	r25, Z+4	; 0x04
    3f20:	90 93 f7 00 	sts	0x00F7, r25
    3f24:	80 93 f6 00 	sts	0x00F6, r24
	BAUD_PRESCALER =(((1000000 / ( (Config_Ptr-> baudrate) * 8))) - 1);
    3f28:	e9 81       	ldd	r30, Y+1	; 0x01
    3f2a:	fa 81       	ldd	r31, Y+2	; 0x02
    3f2c:	83 81       	ldd	r24, Z+3	; 0x03
    3f2e:	94 81       	ldd	r25, Z+4	; 0x04
    3f30:	88 0f       	add	r24, r24
    3f32:	99 1f       	adc	r25, r25
    3f34:	88 0f       	add	r24, r24
    3f36:	99 1f       	adc	r25, r25
    3f38:	88 0f       	add	r24, r24
    3f3a:	99 1f       	adc	r25, r25
    3f3c:	9c 01       	movw	r18, r24
    3f3e:	40 e0       	ldi	r20, 0x00	; 0
    3f40:	50 e0       	ldi	r21, 0x00	; 0
    3f42:	80 e4       	ldi	r24, 0x40	; 64
    3f44:	92 e4       	ldi	r25, 0x42	; 66
    3f46:	af e0       	ldi	r26, 0x0F	; 15
    3f48:	b0 e0       	ldi	r27, 0x00	; 0
    3f4a:	bc 01       	movw	r22, r24
    3f4c:	cd 01       	movw	r24, r26
    3f4e:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <__divmodsi4>
    3f52:	da 01       	movw	r26, r20
    3f54:	c9 01       	movw	r24, r18
    3f56:	01 97       	sbiw	r24, 0x01	; 1
    3f58:	90 93 f5 00 	sts	0x00F5, r25
    3f5c:	80 93 f4 00 	sts	0x00F4, r24
	UBRRL= BAUD_PRESCALER;
    3f60:	e9 e2       	ldi	r30, 0x29	; 41
    3f62:	f0 e0       	ldi	r31, 0x00	; 0
    3f64:	80 91 f4 00 	lds	r24, 0x00F4
    3f68:	90 91 f5 00 	lds	r25, 0x00F5
    3f6c:	80 83       	st	Z, r24
	UBRRH =(BAUD_PRESCALER)>>8;
    3f6e:	e0 e4       	ldi	r30, 0x40	; 64
    3f70:	f0 e0       	ldi	r31, 0x00	; 0
    3f72:	80 91 f4 00 	lds	r24, 0x00F4
    3f76:	90 91 f5 00 	lds	r25, 0x00F5
    3f7a:	89 2f       	mov	r24, r25
    3f7c:	99 27       	eor	r25, r25
    3f7e:	80 83       	st	Z, r24
	//SEPARATE HARDWARE REGISTERS
	//URSEL 0 FOR NOT WRITING IN THE UBRRH=
}
    3f80:	0f 90       	pop	r0
    3f82:	0f 90       	pop	r0
    3f84:	cf 91       	pop	r28
    3f86:	df 91       	pop	r29
    3f88:	08 95       	ret

00003f8a <__divmodsi4>:
    3f8a:	97 fb       	bst	r25, 7
    3f8c:	09 2e       	mov	r0, r25
    3f8e:	05 26       	eor	r0, r21
    3f90:	0e d0       	rcall	.+28     	; 0x3fae <__divmodsi4_neg1>
    3f92:	57 fd       	sbrc	r21, 7
    3f94:	04 d0       	rcall	.+8      	; 0x3f9e <__divmodsi4_neg2>
    3f96:	14 d0       	rcall	.+40     	; 0x3fc0 <__udivmodsi4>
    3f98:	0a d0       	rcall	.+20     	; 0x3fae <__divmodsi4_neg1>
    3f9a:	00 1c       	adc	r0, r0
    3f9c:	38 f4       	brcc	.+14     	; 0x3fac <__divmodsi4_exit>

00003f9e <__divmodsi4_neg2>:
    3f9e:	50 95       	com	r21
    3fa0:	40 95       	com	r20
    3fa2:	30 95       	com	r19
    3fa4:	21 95       	neg	r18
    3fa6:	3f 4f       	sbci	r19, 0xFF	; 255
    3fa8:	4f 4f       	sbci	r20, 0xFF	; 255
    3faa:	5f 4f       	sbci	r21, 0xFF	; 255

00003fac <__divmodsi4_exit>:
    3fac:	08 95       	ret

00003fae <__divmodsi4_neg1>:
    3fae:	f6 f7       	brtc	.-4      	; 0x3fac <__divmodsi4_exit>
    3fb0:	90 95       	com	r25
    3fb2:	80 95       	com	r24
    3fb4:	70 95       	com	r23
    3fb6:	61 95       	neg	r22
    3fb8:	7f 4f       	sbci	r23, 0xFF	; 255
    3fba:	8f 4f       	sbci	r24, 0xFF	; 255
    3fbc:	9f 4f       	sbci	r25, 0xFF	; 255
    3fbe:	08 95       	ret

00003fc0 <__udivmodsi4>:
    3fc0:	a1 e2       	ldi	r26, 0x21	; 33
    3fc2:	1a 2e       	mov	r1, r26
    3fc4:	aa 1b       	sub	r26, r26
    3fc6:	bb 1b       	sub	r27, r27
    3fc8:	fd 01       	movw	r30, r26
    3fca:	0d c0       	rjmp	.+26     	; 0x3fe6 <__udivmodsi4_ep>

00003fcc <__udivmodsi4_loop>:
    3fcc:	aa 1f       	adc	r26, r26
    3fce:	bb 1f       	adc	r27, r27
    3fd0:	ee 1f       	adc	r30, r30
    3fd2:	ff 1f       	adc	r31, r31
    3fd4:	a2 17       	cp	r26, r18
    3fd6:	b3 07       	cpc	r27, r19
    3fd8:	e4 07       	cpc	r30, r20
    3fda:	f5 07       	cpc	r31, r21
    3fdc:	20 f0       	brcs	.+8      	; 0x3fe6 <__udivmodsi4_ep>
    3fde:	a2 1b       	sub	r26, r18
    3fe0:	b3 0b       	sbc	r27, r19
    3fe2:	e4 0b       	sbc	r30, r20
    3fe4:	f5 0b       	sbc	r31, r21

00003fe6 <__udivmodsi4_ep>:
    3fe6:	66 1f       	adc	r22, r22
    3fe8:	77 1f       	adc	r23, r23
    3fea:	88 1f       	adc	r24, r24
    3fec:	99 1f       	adc	r25, r25
    3fee:	1a 94       	dec	r1
    3ff0:	69 f7       	brne	.-38     	; 0x3fcc <__udivmodsi4_loop>
    3ff2:	60 95       	com	r22
    3ff4:	70 95       	com	r23
    3ff6:	80 95       	com	r24
    3ff8:	90 95       	com	r25
    3ffa:	9b 01       	movw	r18, r22
    3ffc:	ac 01       	movw	r20, r24
    3ffe:	bd 01       	movw	r22, r26
    4000:	cf 01       	movw	r24, r30
    4002:	08 95       	ret

00004004 <__prologue_saves__>:
    4004:	2f 92       	push	r2
    4006:	3f 92       	push	r3
    4008:	4f 92       	push	r4
    400a:	5f 92       	push	r5
    400c:	6f 92       	push	r6
    400e:	7f 92       	push	r7
    4010:	8f 92       	push	r8
    4012:	9f 92       	push	r9
    4014:	af 92       	push	r10
    4016:	bf 92       	push	r11
    4018:	cf 92       	push	r12
    401a:	df 92       	push	r13
    401c:	ef 92       	push	r14
    401e:	ff 92       	push	r15
    4020:	0f 93       	push	r16
    4022:	1f 93       	push	r17
    4024:	cf 93       	push	r28
    4026:	df 93       	push	r29
    4028:	cd b7       	in	r28, 0x3d	; 61
    402a:	de b7       	in	r29, 0x3e	; 62
    402c:	ca 1b       	sub	r28, r26
    402e:	db 0b       	sbc	r29, r27
    4030:	0f b6       	in	r0, 0x3f	; 63
    4032:	f8 94       	cli
    4034:	de bf       	out	0x3e, r29	; 62
    4036:	0f be       	out	0x3f, r0	; 63
    4038:	cd bf       	out	0x3d, r28	; 61
    403a:	09 94       	ijmp

0000403c <__epilogue_restores__>:
    403c:	2a 88       	ldd	r2, Y+18	; 0x12
    403e:	39 88       	ldd	r3, Y+17	; 0x11
    4040:	48 88       	ldd	r4, Y+16	; 0x10
    4042:	5f 84       	ldd	r5, Y+15	; 0x0f
    4044:	6e 84       	ldd	r6, Y+14	; 0x0e
    4046:	7d 84       	ldd	r7, Y+13	; 0x0d
    4048:	8c 84       	ldd	r8, Y+12	; 0x0c
    404a:	9b 84       	ldd	r9, Y+11	; 0x0b
    404c:	aa 84       	ldd	r10, Y+10	; 0x0a
    404e:	b9 84       	ldd	r11, Y+9	; 0x09
    4050:	c8 84       	ldd	r12, Y+8	; 0x08
    4052:	df 80       	ldd	r13, Y+7	; 0x07
    4054:	ee 80       	ldd	r14, Y+6	; 0x06
    4056:	fd 80       	ldd	r15, Y+5	; 0x05
    4058:	0c 81       	ldd	r16, Y+4	; 0x04
    405a:	1b 81       	ldd	r17, Y+3	; 0x03
    405c:	aa 81       	ldd	r26, Y+2	; 0x02
    405e:	b9 81       	ldd	r27, Y+1	; 0x01
    4060:	ce 0f       	add	r28, r30
    4062:	d1 1d       	adc	r29, r1
    4064:	0f b6       	in	r0, 0x3f	; 63
    4066:	f8 94       	cli
    4068:	de bf       	out	0x3e, r29	; 62
    406a:	0f be       	out	0x3f, r0	; 63
    406c:	cd bf       	out	0x3d, r28	; 61
    406e:	ed 01       	movw	r28, r26
    4070:	08 95       	ret

00004072 <itoa>:
    4072:	fb 01       	movw	r30, r22
    4074:	9f 01       	movw	r18, r30
    4076:	e8 94       	clt
    4078:	42 30       	cpi	r20, 0x02	; 2
    407a:	c4 f0       	brlt	.+48     	; 0x40ac <itoa+0x3a>
    407c:	45 32       	cpi	r20, 0x25	; 37
    407e:	b4 f4       	brge	.+44     	; 0x40ac <itoa+0x3a>
    4080:	4a 30       	cpi	r20, 0x0A	; 10
    4082:	29 f4       	brne	.+10     	; 0x408e <itoa+0x1c>
    4084:	97 fb       	bst	r25, 7
    4086:	1e f4       	brtc	.+6      	; 0x408e <itoa+0x1c>
    4088:	90 95       	com	r25
    408a:	81 95       	neg	r24
    408c:	9f 4f       	sbci	r25, 0xFF	; 255
    408e:	64 2f       	mov	r22, r20
    4090:	77 27       	eor	r23, r23
    4092:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <__udivmodhi4>
    4096:	80 5d       	subi	r24, 0xD0	; 208
    4098:	8a 33       	cpi	r24, 0x3A	; 58
    409a:	0c f0       	brlt	.+2      	; 0x409e <itoa+0x2c>
    409c:	89 5d       	subi	r24, 0xD9	; 217
    409e:	81 93       	st	Z+, r24
    40a0:	cb 01       	movw	r24, r22
    40a2:	00 97       	sbiw	r24, 0x00	; 0
    40a4:	a1 f7       	brne	.-24     	; 0x408e <itoa+0x1c>
    40a6:	16 f4       	brtc	.+4      	; 0x40ac <itoa+0x3a>
    40a8:	5d e2       	ldi	r21, 0x2D	; 45
    40aa:	51 93       	st	Z+, r21
    40ac:	10 82       	st	Z, r1
    40ae:	c9 01       	movw	r24, r18
    40b0:	0c 94 5a 20 	jmp	0x40b4	; 0x40b4 <strrev>

000040b4 <strrev>:
    40b4:	dc 01       	movw	r26, r24
    40b6:	fc 01       	movw	r30, r24
    40b8:	67 2f       	mov	r22, r23
    40ba:	71 91       	ld	r23, Z+
    40bc:	77 23       	and	r23, r23
    40be:	e1 f7       	brne	.-8      	; 0x40b8 <strrev+0x4>
    40c0:	32 97       	sbiw	r30, 0x02	; 2
    40c2:	04 c0       	rjmp	.+8      	; 0x40cc <strrev+0x18>
    40c4:	7c 91       	ld	r23, X
    40c6:	6d 93       	st	X+, r22
    40c8:	70 83       	st	Z, r23
    40ca:	62 91       	ld	r22, -Z
    40cc:	ae 17       	cp	r26, r30
    40ce:	bf 07       	cpc	r27, r31
    40d0:	c8 f3       	brcs	.-14     	; 0x40c4 <strrev+0x10>
    40d2:	08 95       	ret

000040d4 <__udivmodhi4>:
    40d4:	aa 1b       	sub	r26, r26
    40d6:	bb 1b       	sub	r27, r27
    40d8:	51 e1       	ldi	r21, 0x11	; 17
    40da:	07 c0       	rjmp	.+14     	; 0x40ea <__udivmodhi4_ep>

000040dc <__udivmodhi4_loop>:
    40dc:	aa 1f       	adc	r26, r26
    40de:	bb 1f       	adc	r27, r27
    40e0:	a6 17       	cp	r26, r22
    40e2:	b7 07       	cpc	r27, r23
    40e4:	10 f0       	brcs	.+4      	; 0x40ea <__udivmodhi4_ep>
    40e6:	a6 1b       	sub	r26, r22
    40e8:	b7 0b       	sbc	r27, r23

000040ea <__udivmodhi4_ep>:
    40ea:	88 1f       	adc	r24, r24
    40ec:	99 1f       	adc	r25, r25
    40ee:	5a 95       	dec	r21
    40f0:	a9 f7       	brne	.-22     	; 0x40dc <__udivmodhi4_loop>
    40f2:	80 95       	com	r24
    40f4:	90 95       	com	r25
    40f6:	bc 01       	movw	r22, r24
    40f8:	cd 01       	movw	r24, r26
    40fa:	08 95       	ret

000040fc <_exit>:
    40fc:	f8 94       	cli

000040fe <__stop_program>:
    40fe:	ff cf       	rjmp	.-2      	; 0x40fe <__stop_program>
